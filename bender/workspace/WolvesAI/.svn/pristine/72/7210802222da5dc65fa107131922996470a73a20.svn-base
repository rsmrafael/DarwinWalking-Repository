// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Blackboard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

void protobuf_ShutdownFile_Blackboard_2eproto() {
  delete Blackboard::default_instance_;
  delete Blackboard_Representation::default_instance_;
}

void protobuf_AddDesc_Blackboard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Blackboard::default_instance_ = new Blackboard();
  Blackboard_Representation::default_instance_ = new Blackboard_Representation();
  Blackboard::default_instance_->InitAsDefaultInstance();
  Blackboard_Representation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Blackboard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Blackboard_2eproto {
  StaticDescriptorInitializer_Blackboard_2eproto() {
    protobuf_AddDesc_Blackboard_2eproto();
  }
} static_descriptor_initializer_Blackboard_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Blackboard_Representation::kNameFieldNumber;
const int Blackboard_Representation::kTypeFieldNumber;
const int Blackboard_Representation::kDataFieldNumber;
#endif  // !_MSC_VER

Blackboard_Representation::Blackboard_Representation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Blackboard_Representation::InitAsDefaultInstance() {
}

Blackboard_Representation::Blackboard_Representation(const Blackboard_Representation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Blackboard_Representation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Blackboard_Representation::~Blackboard_Representation() {
  SharedDtor();
}

void Blackboard_Representation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Blackboard_Representation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Blackboard_Representation& Blackboard_Representation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Blackboard_2eproto();  return *default_instance_;
}

Blackboard_Representation* Blackboard_Representation::default_instance_ = NULL;

Blackboard_Representation* Blackboard_Representation::New() const {
  return new Blackboard_Representation;
}

void Blackboard_Representation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Blackboard_Representation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Blackboard_Representation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }
  
  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }
  
}

int Blackboard_Representation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Blackboard_Representation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Blackboard_Representation*>(&from));
}

void Blackboard_Representation::MergeFrom(const Blackboard_Representation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void Blackboard_Representation::CopyFrom(const Blackboard_Representation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blackboard_Representation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Blackboard_Representation::Swap(Blackboard_Representation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Blackboard_Representation::GetTypeName() const {
  return "protobuf.Blackboard.Representation";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Blackboard::kRepresentationsFieldNumber;
#endif  // !_MSC_VER

Blackboard::Blackboard()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Blackboard::InitAsDefaultInstance() {
}

Blackboard::Blackboard(const Blackboard& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Blackboard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Blackboard::~Blackboard() {
  SharedDtor();
}

void Blackboard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Blackboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Blackboard& Blackboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Blackboard_2eproto();  return *default_instance_;
}

Blackboard* Blackboard::default_instance_ = NULL;

Blackboard* Blackboard::New() const {
  return new Blackboard;
}

void Blackboard::Clear() {
  representations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Blackboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.Blackboard.Representation representations = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_representations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_representations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_representations;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Blackboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.Blackboard.Representation representations = 1;
  for (int i = 0; i < this->representations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->representations(i), output);
  }
  
}

int Blackboard::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.Blackboard.Representation representations = 1;
  total_size += 1 * this->representations_size();
  for (int i = 0; i < this->representations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->representations(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Blackboard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Blackboard*>(&from));
}

void Blackboard::MergeFrom(const Blackboard& from) {
  GOOGLE_CHECK_NE(&from, this);
  representations_.MergeFrom(from.representations_);
}

void Blackboard::CopyFrom(const Blackboard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Blackboard::IsInitialized() const {
  
  for (int i = 0; i < representations_size(); i++) {
    if (!this->representations(i).IsInitialized()) return false;
  }
  return true;
}

void Blackboard::Swap(Blackboard* other) {
  if (other != this) {
    representations_.Swap(&other->representations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Blackboard::GetTypeName() const {
  return "protobuf.Blackboard";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
