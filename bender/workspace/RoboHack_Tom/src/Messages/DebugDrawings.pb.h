// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DebugDrawings.proto

#ifndef PROTOBUF_DebugDrawings_2eproto__INCLUDED
#define PROTOBUF_DebugDrawings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DebugDrawings_2eproto();
void protobuf_AssignDesc_DebugDrawings_2eproto();
void protobuf_ShutdownFile_DebugDrawings_2eproto();

class DebugDrawings;
class DebugDrawings_DebugDrawing;
class DebugDrawings_DebugText;

enum DebugDrawings_DebugDrawing_DrawShape {
  DebugDrawings_DebugDrawing_DrawShape_POINT = 0,
  DebugDrawings_DebugDrawing_DrawShape_LINE = 1,
  DebugDrawings_DebugDrawing_DrawShape_CIRCLE = 2,
  DebugDrawings_DebugDrawing_DrawShape_BOX = 3
};
bool DebugDrawings_DebugDrawing_DrawShape_IsValid(int value);
const DebugDrawings_DebugDrawing_DrawShape DebugDrawings_DebugDrawing_DrawShape_DrawShape_MIN = DebugDrawings_DebugDrawing_DrawShape_POINT;
const DebugDrawings_DebugDrawing_DrawShape DebugDrawings_DebugDrawing_DrawShape_DrawShape_MAX = DebugDrawings_DebugDrawing_DrawShape_BOX;
const int DebugDrawings_DebugDrawing_DrawShape_DrawShape_ARRAYSIZE = DebugDrawings_DebugDrawing_DrawShape_DrawShape_MAX + 1;

enum DebugDrawings_DrawColor {
  DebugDrawings_DrawColor_BLACK = 0,
  DebugDrawings_DrawColor_DARK_GRAY = 1,
  DebugDrawings_DrawColor_LIGHT_GRAY = 2,
  DebugDrawings_DrawColor_WHITE = 3,
  DebugDrawings_DrawColor_RED = 4,
  DebugDrawings_DrawColor_ORANGE = 5,
  DebugDrawings_DrawColor_YELLOW = 6,
  DebugDrawings_DrawColor_LIME = 7,
  DebugDrawings_DrawColor_GREEN = 8,
  DebugDrawings_DrawColor_CYAN = 9,
  DebugDrawings_DrawColor_BLUE = 10,
  DebugDrawings_DrawColor_VIOLET = 11,
  DebugDrawings_DrawColor_PURPLE = 12,
  DebugDrawings_DrawColor_MAGENTA = 13,
  DebugDrawings_DrawColor_LIGHT_RED = 14,
  DebugDrawings_DrawColor_LIGHT_YELLOW = 15,
  DebugDrawings_DrawColor_LIGHT_GREEN = 16,
  DebugDrawings_DrawColor_LIGHT_BLUE = 17,
  DebugDrawings_DrawColor_LIGHT_PURPLE = 18,
  DebugDrawings_DrawColor_BROWN = 19,
  DebugDrawings_DrawColor_OLIVE = 20,
  DebugDrawings_DrawColor_TEAL = 21,
  DebugDrawings_DrawColor_AZURE = 22,
  DebugDrawings_DrawColor_DARK_RED = 23,
  DebugDrawings_DrawColor_DARK_GREEN = 24,
  DebugDrawings_DrawColor_DARK_BLUE = 25
};
bool DebugDrawings_DrawColor_IsValid(int value);
const DebugDrawings_DrawColor DebugDrawings_DrawColor_DrawColor_MIN = DebugDrawings_DrawColor_BLACK;
const DebugDrawings_DrawColor DebugDrawings_DrawColor_DrawColor_MAX = DebugDrawings_DrawColor_DARK_BLUE;
const int DebugDrawings_DrawColor_DrawColor_ARRAYSIZE = DebugDrawings_DrawColor_DrawColor_MAX + 1;

// ===================================================================

class DebugDrawings_DebugDrawing : public ::google::protobuf::MessageLite {
 public:
  DebugDrawings_DebugDrawing();
  virtual ~DebugDrawings_DebugDrawing();
  
  DebugDrawings_DebugDrawing(const DebugDrawings_DebugDrawing& from);
  
  inline DebugDrawings_DebugDrawing& operator=(const DebugDrawings_DebugDrawing& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DebugDrawings_DebugDrawing& default_instance();
  
  void Swap(DebugDrawings_DebugDrawing* other);
  
  // implements Message ----------------------------------------------
  
  DebugDrawings_DebugDrawing* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DebugDrawings_DebugDrawing& from);
  void MergeFrom(const DebugDrawings_DebugDrawing& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef DebugDrawings_DebugDrawing_DrawShape DrawShape;
  static const DrawShape POINT = DebugDrawings_DebugDrawing_DrawShape_POINT;
  static const DrawShape LINE = DebugDrawings_DebugDrawing_DrawShape_LINE;
  static const DrawShape CIRCLE = DebugDrawings_DebugDrawing_DrawShape_CIRCLE;
  static const DrawShape BOX = DebugDrawings_DebugDrawing_DrawShape_BOX;
  static inline bool DrawShape_IsValid(int value) {
    return DebugDrawings_DebugDrawing_DrawShape_IsValid(value);
  }
  static const DrawShape DrawShape_MIN =
    DebugDrawings_DebugDrawing_DrawShape_DrawShape_MIN;
  static const DrawShape DrawShape_MAX =
    DebugDrawings_DebugDrawing_DrawShape_DrawShape_MAX;
  static const int DrawShape_ARRAYSIZE =
    DebugDrawings_DebugDrawing_DrawShape_DrawShape_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // required string module = 1;
  inline bool has_module() const;
  inline void clear_module();
  static const int kModuleFieldNumber = 1;
  inline const ::std::string& module() const;
  inline void set_module(const ::std::string& value);
  inline void set_module(const char* value);
  inline void set_module(const char* value, size_t size);
  inline ::std::string* mutable_module();
  inline ::std::string* release_module();
  
  // required .protobuf.DebugDrawings.DebugDrawing.DrawShape type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::protobuf::DebugDrawings_DebugDrawing_DrawShape type() const;
  inline void set_type(::protobuf::DebugDrawings_DebugDrawing_DrawShape value);
  
  // required int32 x1 = 3;
  inline bool has_x1() const;
  inline void clear_x1();
  static const int kX1FieldNumber = 3;
  inline ::google::protobuf::int32 x1() const;
  inline void set_x1(::google::protobuf::int32 value);
  
  // required int32 y1 = 4;
  inline bool has_y1() const;
  inline void clear_y1();
  static const int kY1FieldNumber = 4;
  inline ::google::protobuf::int32 y1() const;
  inline void set_y1(::google::protobuf::int32 value);
  
  // optional int32 p1 = 5;
  inline bool has_p1() const;
  inline void clear_p1();
  static const int kP1FieldNumber = 5;
  inline ::google::protobuf::int32 p1() const;
  inline void set_p1(::google::protobuf::int32 value);
  
  // optional int32 p2 = 6;
  inline bool has_p2() const;
  inline void clear_p2();
  static const int kP2FieldNumber = 6;
  inline ::google::protobuf::int32 p2() const;
  inline void set_p2(::google::protobuf::int32 value);
  
  // optional .protobuf.DebugDrawings.DrawColor penColor = 7;
  inline bool has_pencolor() const;
  inline void clear_pencolor();
  static const int kPenColorFieldNumber = 7;
  inline ::protobuf::DebugDrawings_DrawColor pencolor() const;
  inline void set_pencolor(::protobuf::DebugDrawings_DrawColor value);
  
  // @@protoc_insertion_point(class_scope:protobuf.DebugDrawings.DebugDrawing)
 private:
  inline void set_has_module();
  inline void clear_has_module();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_x1();
  inline void clear_has_x1();
  inline void set_has_y1();
  inline void clear_has_y1();
  inline void set_has_p1();
  inline void clear_has_p1();
  inline void set_has_p2();
  inline void clear_has_p2();
  inline void set_has_pencolor();
  inline void clear_has_pencolor();
  
  ::std::string* module_;
  int type_;
  ::google::protobuf::int32 x1_;
  ::google::protobuf::int32 y1_;
  ::google::protobuf::int32 p1_;
  ::google::protobuf::int32 p2_;
  int pencolor_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_DebugDrawings_2eproto();
  friend void protobuf_AssignDesc_DebugDrawings_2eproto();
  friend void protobuf_ShutdownFile_DebugDrawings_2eproto();
  
  void InitAsDefaultInstance();
  static DebugDrawings_DebugDrawing* default_instance_;
};
// -------------------------------------------------------------------

class DebugDrawings_DebugText : public ::google::protobuf::MessageLite {
 public:
  DebugDrawings_DebugText();
  virtual ~DebugDrawings_DebugText();
  
  DebugDrawings_DebugText(const DebugDrawings_DebugText& from);
  
  inline DebugDrawings_DebugText& operator=(const DebugDrawings_DebugText& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DebugDrawings_DebugText& default_instance();
  
  void Swap(DebugDrawings_DebugText* other);
  
  // implements Message ----------------------------------------------
  
  DebugDrawings_DebugText* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DebugDrawings_DebugText& from);
  void MergeFrom(const DebugDrawings_DebugText& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string module = 1;
  inline bool has_module() const;
  inline void clear_module();
  static const int kModuleFieldNumber = 1;
  inline const ::std::string& module() const;
  inline void set_module(const ::std::string& value);
  inline void set_module(const char* value);
  inline void set_module(const char* value, size_t size);
  inline ::std::string* mutable_module();
  inline ::std::string* release_module();
  
  // required string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // required int32 x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional .protobuf.DebugDrawings.DrawColor penColor = 5;
  inline bool has_pencolor() const;
  inline void clear_pencolor();
  static const int kPenColorFieldNumber = 5;
  inline ::protobuf::DebugDrawings_DrawColor pencolor() const;
  inline void set_pencolor(::protobuf::DebugDrawings_DrawColor value);
  
  // @@protoc_insertion_point(class_scope:protobuf.DebugDrawings.DebugText)
 private:
  inline void set_has_module();
  inline void clear_has_module();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_pencolor();
  inline void clear_has_pencolor();
  
  ::std::string* module_;
  ::std::string* text_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  int pencolor_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_DebugDrawings_2eproto();
  friend void protobuf_AssignDesc_DebugDrawings_2eproto();
  friend void protobuf_ShutdownFile_DebugDrawings_2eproto();
  
  void InitAsDefaultInstance();
  static DebugDrawings_DebugText* default_instance_;
};
// -------------------------------------------------------------------

class DebugDrawings : public ::google::protobuf::MessageLite {
 public:
  DebugDrawings();
  virtual ~DebugDrawings();
  
  DebugDrawings(const DebugDrawings& from);
  
  inline DebugDrawings& operator=(const DebugDrawings& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const DebugDrawings& default_instance();
  
  void Swap(DebugDrawings* other);
  
  // implements Message ----------------------------------------------
  
  DebugDrawings* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DebugDrawings& from);
  void MergeFrom(const DebugDrawings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef DebugDrawings_DebugDrawing DebugDrawing;
  typedef DebugDrawings_DebugText DebugText;
  
  typedef DebugDrawings_DrawColor DrawColor;
  static const DrawColor BLACK = DebugDrawings_DrawColor_BLACK;
  static const DrawColor DARK_GRAY = DebugDrawings_DrawColor_DARK_GRAY;
  static const DrawColor LIGHT_GRAY = DebugDrawings_DrawColor_LIGHT_GRAY;
  static const DrawColor WHITE = DebugDrawings_DrawColor_WHITE;
  static const DrawColor RED = DebugDrawings_DrawColor_RED;
  static const DrawColor ORANGE = DebugDrawings_DrawColor_ORANGE;
  static const DrawColor YELLOW = DebugDrawings_DrawColor_YELLOW;
  static const DrawColor LIME = DebugDrawings_DrawColor_LIME;
  static const DrawColor GREEN = DebugDrawings_DrawColor_GREEN;
  static const DrawColor CYAN = DebugDrawings_DrawColor_CYAN;
  static const DrawColor BLUE = DebugDrawings_DrawColor_BLUE;
  static const DrawColor VIOLET = DebugDrawings_DrawColor_VIOLET;
  static const DrawColor PURPLE = DebugDrawings_DrawColor_PURPLE;
  static const DrawColor MAGENTA = DebugDrawings_DrawColor_MAGENTA;
  static const DrawColor LIGHT_RED = DebugDrawings_DrawColor_LIGHT_RED;
  static const DrawColor LIGHT_YELLOW = DebugDrawings_DrawColor_LIGHT_YELLOW;
  static const DrawColor LIGHT_GREEN = DebugDrawings_DrawColor_LIGHT_GREEN;
  static const DrawColor LIGHT_BLUE = DebugDrawings_DrawColor_LIGHT_BLUE;
  static const DrawColor LIGHT_PURPLE = DebugDrawings_DrawColor_LIGHT_PURPLE;
  static const DrawColor BROWN = DebugDrawings_DrawColor_BROWN;
  static const DrawColor OLIVE = DebugDrawings_DrawColor_OLIVE;
  static const DrawColor TEAL = DebugDrawings_DrawColor_TEAL;
  static const DrawColor AZURE = DebugDrawings_DrawColor_AZURE;
  static const DrawColor DARK_RED = DebugDrawings_DrawColor_DARK_RED;
  static const DrawColor DARK_GREEN = DebugDrawings_DrawColor_DARK_GREEN;
  static const DrawColor DARK_BLUE = DebugDrawings_DrawColor_DARK_BLUE;
  static inline bool DrawColor_IsValid(int value) {
    return DebugDrawings_DrawColor_IsValid(value);
  }
  static const DrawColor DrawColor_MIN =
    DebugDrawings_DrawColor_DrawColor_MIN;
  static const DrawColor DrawColor_MAX =
    DebugDrawings_DrawColor_DrawColor_MAX;
  static const int DrawColor_ARRAYSIZE =
    DebugDrawings_DrawColor_DrawColor_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.DebugDrawings.DebugDrawing drawing = 1;
  inline int drawing_size() const;
  inline void clear_drawing();
  static const int kDrawingFieldNumber = 1;
  inline const ::protobuf::DebugDrawings_DebugDrawing& drawing(int index) const;
  inline ::protobuf::DebugDrawings_DebugDrawing* mutable_drawing(int index);
  inline ::protobuf::DebugDrawings_DebugDrawing* add_drawing();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::DebugDrawings_DebugDrawing >&
      drawing() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::DebugDrawings_DebugDrawing >*
      mutable_drawing();
  
  // repeated .protobuf.DebugDrawings.DebugText text = 2;
  inline int text_size() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::protobuf::DebugDrawings_DebugText& text(int index) const;
  inline ::protobuf::DebugDrawings_DebugText* mutable_text(int index);
  inline ::protobuf::DebugDrawings_DebugText* add_text();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::DebugDrawings_DebugText >&
      text() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::DebugDrawings_DebugText >*
      mutable_text();
  
  // @@protoc_insertion_point(class_scope:protobuf.DebugDrawings)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::DebugDrawings_DebugDrawing > drawing_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::DebugDrawings_DebugText > text_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DebugDrawings_2eproto();
  friend void protobuf_AssignDesc_DebugDrawings_2eproto();
  friend void protobuf_ShutdownFile_DebugDrawings_2eproto();
  
  void InitAsDefaultInstance();
  static DebugDrawings* default_instance_;
};
// ===================================================================


// ===================================================================

// DebugDrawings_DebugDrawing

// required string module = 1;
inline bool DebugDrawings_DebugDrawing::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugDrawings_DebugDrawing::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DebugDrawings_DebugDrawing::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DebugDrawings_DebugDrawing::clear_module() {
  if (module_ != &::google::protobuf::internal::kEmptyString) {
    module_->clear();
  }
  clear_has_module();
}
inline const ::std::string& DebugDrawings_DebugDrawing::module() const {
  return *module_;
}
inline void DebugDrawings_DebugDrawing::set_module(const ::std::string& value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(value);
}
inline void DebugDrawings_DebugDrawing::set_module(const char* value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(value);
}
inline void DebugDrawings_DebugDrawing::set_module(const char* value, size_t size) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DebugDrawings_DebugDrawing::mutable_module() {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  return module_;
}
inline ::std::string* DebugDrawings_DebugDrawing::release_module() {
  clear_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_;
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .protobuf.DebugDrawings.DebugDrawing.DrawShape type = 2;
inline bool DebugDrawings_DebugDrawing::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugDrawings_DebugDrawing::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DebugDrawings_DebugDrawing::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DebugDrawings_DebugDrawing::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::protobuf::DebugDrawings_DebugDrawing_DrawShape DebugDrawings_DebugDrawing::type() const {
  return static_cast< ::protobuf::DebugDrawings_DebugDrawing_DrawShape >(type_);
}
inline void DebugDrawings_DebugDrawing::set_type(::protobuf::DebugDrawings_DebugDrawing_DrawShape value) {
  GOOGLE_DCHECK(::protobuf::DebugDrawings_DebugDrawing_DrawShape_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 x1 = 3;
inline bool DebugDrawings_DebugDrawing::has_x1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DebugDrawings_DebugDrawing::set_has_x1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DebugDrawings_DebugDrawing::clear_has_x1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DebugDrawings_DebugDrawing::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
inline ::google::protobuf::int32 DebugDrawings_DebugDrawing::x1() const {
  return x1_;
}
inline void DebugDrawings_DebugDrawing::set_x1(::google::protobuf::int32 value) {
  set_has_x1();
  x1_ = value;
}

// required int32 y1 = 4;
inline bool DebugDrawings_DebugDrawing::has_y1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DebugDrawings_DebugDrawing::set_has_y1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DebugDrawings_DebugDrawing::clear_has_y1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DebugDrawings_DebugDrawing::clear_y1() {
  y1_ = 0;
  clear_has_y1();
}
inline ::google::protobuf::int32 DebugDrawings_DebugDrawing::y1() const {
  return y1_;
}
inline void DebugDrawings_DebugDrawing::set_y1(::google::protobuf::int32 value) {
  set_has_y1();
  y1_ = value;
}

// optional int32 p1 = 5;
inline bool DebugDrawings_DebugDrawing::has_p1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DebugDrawings_DebugDrawing::set_has_p1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DebugDrawings_DebugDrawing::clear_has_p1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DebugDrawings_DebugDrawing::clear_p1() {
  p1_ = 0;
  clear_has_p1();
}
inline ::google::protobuf::int32 DebugDrawings_DebugDrawing::p1() const {
  return p1_;
}
inline void DebugDrawings_DebugDrawing::set_p1(::google::protobuf::int32 value) {
  set_has_p1();
  p1_ = value;
}

// optional int32 p2 = 6;
inline bool DebugDrawings_DebugDrawing::has_p2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DebugDrawings_DebugDrawing::set_has_p2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DebugDrawings_DebugDrawing::clear_has_p2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DebugDrawings_DebugDrawing::clear_p2() {
  p2_ = 0;
  clear_has_p2();
}
inline ::google::protobuf::int32 DebugDrawings_DebugDrawing::p2() const {
  return p2_;
}
inline void DebugDrawings_DebugDrawing::set_p2(::google::protobuf::int32 value) {
  set_has_p2();
  p2_ = value;
}

// optional .protobuf.DebugDrawings.DrawColor penColor = 7;
inline bool DebugDrawings_DebugDrawing::has_pencolor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DebugDrawings_DebugDrawing::set_has_pencolor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DebugDrawings_DebugDrawing::clear_has_pencolor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DebugDrawings_DebugDrawing::clear_pencolor() {
  pencolor_ = 0;
  clear_has_pencolor();
}
inline ::protobuf::DebugDrawings_DrawColor DebugDrawings_DebugDrawing::pencolor() const {
  return static_cast< ::protobuf::DebugDrawings_DrawColor >(pencolor_);
}
inline void DebugDrawings_DebugDrawing::set_pencolor(::protobuf::DebugDrawings_DrawColor value) {
  GOOGLE_DCHECK(::protobuf::DebugDrawings_DrawColor_IsValid(value));
  set_has_pencolor();
  pencolor_ = value;
}

// -------------------------------------------------------------------

// DebugDrawings_DebugText

// required string module = 1;
inline bool DebugDrawings_DebugText::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugDrawings_DebugText::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DebugDrawings_DebugText::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DebugDrawings_DebugText::clear_module() {
  if (module_ != &::google::protobuf::internal::kEmptyString) {
    module_->clear();
  }
  clear_has_module();
}
inline const ::std::string& DebugDrawings_DebugText::module() const {
  return *module_;
}
inline void DebugDrawings_DebugText::set_module(const ::std::string& value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(value);
}
inline void DebugDrawings_DebugText::set_module(const char* value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(value);
}
inline void DebugDrawings_DebugText::set_module(const char* value, size_t size) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  module_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DebugDrawings_DebugText::mutable_module() {
  set_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    module_ = new ::std::string;
  }
  return module_;
}
inline ::std::string* DebugDrawings_DebugText::release_module() {
  clear_has_module();
  if (module_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_;
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string text = 2;
inline bool DebugDrawings_DebugText::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugDrawings_DebugText::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DebugDrawings_DebugText::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DebugDrawings_DebugText::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& DebugDrawings_DebugText::text() const {
  return *text_;
}
inline void DebugDrawings_DebugText::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void DebugDrawings_DebugText::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void DebugDrawings_DebugText::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DebugDrawings_DebugText::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* DebugDrawings_DebugText::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 x = 3;
inline bool DebugDrawings_DebugText::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DebugDrawings_DebugText::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DebugDrawings_DebugText::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DebugDrawings_DebugText::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 DebugDrawings_DebugText::x() const {
  return x_;
}
inline void DebugDrawings_DebugText::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 4;
inline bool DebugDrawings_DebugText::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DebugDrawings_DebugText::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DebugDrawings_DebugText::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DebugDrawings_DebugText::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 DebugDrawings_DebugText::y() const {
  return y_;
}
inline void DebugDrawings_DebugText::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional .protobuf.DebugDrawings.DrawColor penColor = 5;
inline bool DebugDrawings_DebugText::has_pencolor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DebugDrawings_DebugText::set_has_pencolor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DebugDrawings_DebugText::clear_has_pencolor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DebugDrawings_DebugText::clear_pencolor() {
  pencolor_ = 0;
  clear_has_pencolor();
}
inline ::protobuf::DebugDrawings_DrawColor DebugDrawings_DebugText::pencolor() const {
  return static_cast< ::protobuf::DebugDrawings_DrawColor >(pencolor_);
}
inline void DebugDrawings_DebugText::set_pencolor(::protobuf::DebugDrawings_DrawColor value) {
  GOOGLE_DCHECK(::protobuf::DebugDrawings_DrawColor_IsValid(value));
  set_has_pencolor();
  pencolor_ = value;
}

// -------------------------------------------------------------------

// DebugDrawings

// repeated .protobuf.DebugDrawings.DebugDrawing drawing = 1;
inline int DebugDrawings::drawing_size() const {
  return drawing_.size();
}
inline void DebugDrawings::clear_drawing() {
  drawing_.Clear();
}
inline const ::protobuf::DebugDrawings_DebugDrawing& DebugDrawings::drawing(int index) const {
  return drawing_.Get(index);
}
inline ::protobuf::DebugDrawings_DebugDrawing* DebugDrawings::mutable_drawing(int index) {
  return drawing_.Mutable(index);
}
inline ::protobuf::DebugDrawings_DebugDrawing* DebugDrawings::add_drawing() {
  return drawing_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::DebugDrawings_DebugDrawing >&
DebugDrawings::drawing() const {
  return drawing_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::DebugDrawings_DebugDrawing >*
DebugDrawings::mutable_drawing() {
  return &drawing_;
}

// repeated .protobuf.DebugDrawings.DebugText text = 2;
inline int DebugDrawings::text_size() const {
  return text_.size();
}
inline void DebugDrawings::clear_text() {
  text_.Clear();
}
inline const ::protobuf::DebugDrawings_DebugText& DebugDrawings::text(int index) const {
  return text_.Get(index);
}
inline ::protobuf::DebugDrawings_DebugText* DebugDrawings::mutable_text(int index) {
  return text_.Mutable(index);
}
inline ::protobuf::DebugDrawings_DebugText* DebugDrawings::add_text() {
  return text_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::DebugDrawings_DebugText >&
DebugDrawings::text() const {
  return text_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::DebugDrawings_DebugText >*
DebugDrawings::mutable_text() {
  return &text_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DebugDrawings_2eproto__INCLUDED
