// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Object.proto

#ifndef PROTOBUF_Object_2eproto__INCLUDED
#define PROTOBUF_Object_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "Vector2D.pb.h"
#include "ProtoBufFrame.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Object_2eproto();
void protobuf_AssignDesc_Object_2eproto();
void protobuf_ShutdownFile_Object_2eproto();

class Object;

// ===================================================================

class Object : public ::google::protobuf::MessageLite {
 public:
  Object();
  virtual ~Object();
  
  Object(const Object& from);
  
  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Object& default_instance();
  
  void Swap(Object* other);
  
  // implements Message ----------------------------------------------
  
  Object* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional int32 topLeftX = 3;
  inline bool has_topleftx() const;
  inline void clear_topleftx();
  static const int kTopLeftXFieldNumber = 3;
  inline ::google::protobuf::int32 topleftx() const;
  inline void set_topleftx(::google::protobuf::int32 value);
  
  // optional int32 topLeftY = 4;
  inline bool has_toplefty() const;
  inline void clear_toplefty();
  static const int kTopLeftYFieldNumber = 4;
  inline ::google::protobuf::int32 toplefty() const;
  inline void set_toplefty(::google::protobuf::int32 value);
  
  // optional int32 width = 5;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // optional int32 heigth = 6;
  inline bool has_heigth() const;
  inline void clear_heigth();
  static const int kHeigthFieldNumber = 6;
  inline ::google::protobuf::int32 heigth() const;
  inline void set_heigth(::google::protobuf::int32 value);
  
  // optional .protobuf.Vector2D vector = 7;
  inline bool has_vector() const;
  inline void clear_vector();
  static const int kVectorFieldNumber = 7;
  inline const ::protobuf::Vector2D& vector() const;
  inline ::protobuf::Vector2D* mutable_vector();
  inline ::protobuf::Vector2D* release_vector();
  
  // optional bool seen = 8;
  inline bool has_seen() const;
  inline void clear_seen();
  static const int kSeenFieldNumber = 8;
  inline bool seen() const;
  inline void set_seen(bool value);
  
  // optional .protobuf.ObjectType type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline protobuf::ObjectType type() const;
  inline void set_type(protobuf::ObjectType value);
  
  // @@protoc_insertion_point(class_scope:protobuf.Object)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_topleftx();
  inline void clear_has_topleftx();
  inline void set_has_toplefty();
  inline void clear_has_toplefty();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_heigth();
  inline void clear_has_heigth();
  inline void set_has_vector();
  inline void clear_has_vector();
  inline void set_has_seen();
  inline void clear_has_seen();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 topleftx_;
  ::google::protobuf::int32 toplefty_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 heigth_;
  ::protobuf::Vector2D* vector_;
  bool seen_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_Object_2eproto();
  friend void protobuf_AssignDesc_Object_2eproto();
  friend void protobuf_ShutdownFile_Object_2eproto();
  
  void InitAsDefaultInstance();
  static Object* default_instance_;
};
// ===================================================================


// ===================================================================

// Object

// required int32 x = 1;
inline bool Object::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Object::x() const {
  return x_;
}
inline void Object::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool Object::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Object::y() const {
  return y_;
}
inline void Object::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional int32 topLeftX = 3;
inline bool Object::has_topleftx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Object::set_has_topleftx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Object::clear_has_topleftx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Object::clear_topleftx() {
  topleftx_ = 0;
  clear_has_topleftx();
}
inline ::google::protobuf::int32 Object::topleftx() const {
  return topleftx_;
}
inline void Object::set_topleftx(::google::protobuf::int32 value) {
  set_has_topleftx();
  topleftx_ = value;
}

// optional int32 topLeftY = 4;
inline bool Object::has_toplefty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Object::set_has_toplefty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Object::clear_has_toplefty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Object::clear_toplefty() {
  toplefty_ = 0;
  clear_has_toplefty();
}
inline ::google::protobuf::int32 Object::toplefty() const {
  return toplefty_;
}
inline void Object::set_toplefty(::google::protobuf::int32 value) {
  set_has_toplefty();
  toplefty_ = value;
}

// optional int32 width = 5;
inline bool Object::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Object::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Object::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Object::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Object::width() const {
  return width_;
}
inline void Object::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 heigth = 6;
inline bool Object::has_heigth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Object::set_has_heigth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Object::clear_has_heigth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Object::clear_heigth() {
  heigth_ = 0;
  clear_has_heigth();
}
inline ::google::protobuf::int32 Object::heigth() const {
  return heigth_;
}
inline void Object::set_heigth(::google::protobuf::int32 value) {
  set_has_heigth();
  heigth_ = value;
}

// optional .protobuf.Vector2D vector = 7;
inline bool Object::has_vector() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Object::set_has_vector() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Object::clear_has_vector() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Object::clear_vector() {
  if (vector_ != NULL) vector_->::protobuf::Vector2D::Clear();
  clear_has_vector();
}
inline const ::protobuf::Vector2D& Object::vector() const {
  return vector_ != NULL ? *vector_ : *default_instance_->vector_;
}
inline ::protobuf::Vector2D* Object::mutable_vector() {
  set_has_vector();
  if (vector_ == NULL) vector_ = new ::protobuf::Vector2D;
  return vector_;
}
inline ::protobuf::Vector2D* Object::release_vector() {
  clear_has_vector();
  ::protobuf::Vector2D* temp = vector_;
  vector_ = NULL;
  return temp;
}

// optional bool seen = 8;
inline bool Object::has_seen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Object::set_has_seen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Object::clear_has_seen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Object::clear_seen() {
  seen_ = false;
  clear_has_seen();
}
inline bool Object::seen() const {
  return seen_;
}
inline void Object::set_seen(bool value) {
  set_has_seen();
  seen_ = value;
}

// optional .protobuf.ObjectType type = 9;
inline bool Object::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Object::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Object::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Object::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline protobuf::ObjectType Object::type() const {
  return static_cast< protobuf::ObjectType >(type_);
}
inline void Object::set_type(protobuf::ObjectType value) {
  GOOGLE_DCHECK(protobuf::ObjectType_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Object_2eproto__INCLUDED
