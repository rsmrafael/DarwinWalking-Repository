/*
 * VisionAnalyzer.cpp
 *
 *  Created on: Sep 3, 2012
 *      Author: jan
 */

#include "VisionAnalyzer.h"
#include <sstream>
#include <iomanip>

using namespace std;

VisionAnalyzer::VisionAnalyzer(bool createCsv)
{
	mCreateCsv = createCsv;
	mTotalImages = 0;

	visionAnalyzeData_t data;
	data.count = 0;
	data.found = 0;
	data.falsePositive = 0;
	data.falseNegative = 0;
	/*data.histogramY.setType(0x00, 0xFF, 16);
	data.histogramU.setType(0x00, 0xFF, 16);
	data.histogramV.setType(0x00, 0xFF, 16);
	//data.histogramYUV.setType(0x00, 0xFFFFFF, 0x40);
	data.histogramYUV.setType(0, 765, 32);
	data.histogramYU.setType(-256, 255, 16);
	data.histogramVU.setType(-256, 255, 16);
	data.histogramYU2.setType(0, 255, 1);
	data.histogramVU2.setType(0, 255, 1);*/

	data.name = "ball";
	mVisionObjects.insert(make_pair<Object::ObjectType, visionAnalyzeData_t>(Object::BALL, data));

	data.name = "goal pole";
	mVisionObjects.insert(make_pair<Object::ObjectType, visionAnalyzeData_t>(Object::GOAL_POLE_YELLOW, data));

	data.name = "cyan robot";
	mVisionObjects.insert(make_pair<Object::ObjectType, visionAnalyzeData_t>(Object::ROBOT_CYAN, data));

	data.name = "magenta robot";
	mVisionObjects.insert(make_pair<Object::ObjectType, visionAnalyzeData_t>(Object::ROBOT_MAGENTA, data));

}

VisionAnalyzer::~VisionAnalyzer()
{
	Debugger::INFO("VisionAnalyzer", "Images processed: %u", mTotalImages);
	if( mCreateCsv) {
		Debugger::addMetric("img", "Images processed", (double)mTotalImages);
	}

	map<Object::ObjectType, visionAnalyzeData_t>::const_iterator it;
	for( it = mVisionObjects.begin(); it != mVisionObjects.end(); ++it)
	{
		visionAnalyzeData_t data = it->second;
		double fpRate = 0.0;
		double fnRate = 0.0;
		double correctRate = 0.0;

		if (mTotalImages > 0) {
			fpRate = 100.0 * (double)data.falsePositive / (double)mTotalImages;
			fnRate = 100.0 * (double)data.falseNegative / (double)mTotalImages;
		}
		if (data.count > 0) {
			correctRate = 100.0 * (double)data.found / (double)data.count;
		}

		Debugger::INFO("VisionAnalyzer",
				"%s: annotated: %u, total found: %u, correct: %.2f %%",
				data.name.c_str(), data.count, data.found, correctRate);
		Debugger::INFO("VisionAnalyzer",
				" falsePositive: %u (%.2f %%), falseNegative: %u (%.2f %%)",
				data.falsePositive, fpRate, data.falseNegative, fnRate);

		if( mCreateCsv) {
			string name = data.name + "s";
			Debugger::addMetric("img", name, (double)data.count);
			Debugger::addMetric("va-abs", "False positive " + name, (double)data.falsePositive);
			Debugger::addMetric("va-abs", "False negative " + name, (double)data.falseNegative);
			Debugger::addMetric("va", "False positive " + name + " [%]", fpRate);
			Debugger::addMetric("va", "False negative " + name + " [%]", fnRate);
			Debugger::addMetric("va-correct", "Correct " + name + " [%]", correctRate);

			/*createHistogram( data.name + "-Y", data.histogramY.getHistData(), data.histogramY.getMaxValue());
			createHistogram( data.name + "-U", data.histogramU.getHistData(), data.histogramU.getMaxValue());
			createHistogram( data.name + "-V", data.histogramV.getHistData(), data.histogramV.getMaxValue());
			//createHistogramHex( data.name + "-YUV", data.histogramYUV.getHistData(), data.histogramYUV.getMaxValue());
			createHistogram( data.name + "-YUV", data.histogramYUV.getHistData(), data.histogramYUV.getMaxValue());

			createHistogram( data.name + "-YU", data.histogramYU.getHistData(), data.histogramYU.getMaxValue());
			createHistogram( data.name + "-VU", data.histogramVU.getHistData(), data.histogramVU.getMaxValue());
			createHistogram( data.name + "-YU2", data.histogramYU2.getHistData(), data.histogramYU2.getMaxValue());
			createHistogram( data.name + "-VU2", data.histogramVU2.getHistData(), data.histogramVU2.getMaxValue());
			*/
		}
	}
}

void VisionAnalyzer::createHistogram(string name, const map<int, int> &mapData, int maxVal)
{
	stringstream sstr;
	sstr << maxVal;
	int numChars = (int) sstr.str().length();
	Debugger::DEBUG("VisionAnalyzer", "maxVal: %s, numChars: %d", sstr.str().c_str(), numChars);
	map<int, int>::const_iterator mapIt;
	for (mapIt = mapData.begin(); mapIt != mapData.end(); ++mapIt) {
		stringstream stream;
		stream << setfill('0') << setw(numChars) << mapIt->first;
		Debugger::addMetric("histogram-" + name,
				stream.str(), (double) mapIt->second);
	}
}

void VisionAnalyzer::createHistogramHex(string name, const map<int, int> &mapData, int maxVal)
{
	stringstream sstr;
	sstr << hex << maxVal;
	int numChars = (int) sstr.str().length();
	Debugger::DEBUG("VisionAnalyzer", "maxVal: %s, numChars: %d", sstr.str().c_str(), numChars);
	map<int, int>::const_iterator mapIt;
	for (mapIt = mapData.begin(); mapIt != mapData.end(); ++mapIt) {
		stringstream stream;
		stream << "0x";
		stream << hex << setfill('0') << setw(numChars) << mapIt->first;
		Debugger::addMetric("histogram-" + name,
				stream.str(), (double) mapIt->second);
	}
}

bool VisionAnalyzer::execute()
{
	++mTotalImages;

	map<Object::ObjectType, visionAnalyzeData_t>::iterator dataIt;
	for( dataIt = mVisionObjects.begin(); dataIt != mVisionObjects.end(); ++dataIt)
	{
		if( dataIt->first == Object::GOAL_POLE_YELLOW) {
			dataIt->second.objects = vector<Object>(getGoalPoles().getObjects());
		} else if( dataIt->first == Object::ROBOT_CYAN) {
			dataIt->second.objects = vector<Object>(getCyanRobots().getObjects());
		} else if( dataIt->first == Object::ROBOT_MAGENTA) {
			dataIt->second.objects = vector<Object>(getMagentaRobots().getObjects());
		} else {
			dataIt->second.objects.clear();
			if( getBall().lastImageSeen) {
				dataIt->second.objects.push_back(getBall());
			}
		}
	}

	const vector<Object>& annotations = getAnnotations().getObjects();
	for (vector<Object>::const_iterator annoIt = annotations.begin();
			annoIt != annotations.end(); ++annoIt)
	{
		bool found = false;
		dataIt = mVisionObjects.find( annoIt->type);
		if (dataIt != mVisionObjects.end())
		{
			++dataIt->second.count;
			/*struct YUVImage::YUVData color = getImage().getValue(annoIt->lastImageX, annoIt->lastImageY);
			dataIt->second.histogramY.addData(color.Y);
			dataIt->second.histogramU.addData(color.U);
			dataIt->second.histogramV.addData(color.V);*/
			/*int value = ((uint8_t)color.Y << 16) | ((uint8_t)color.U << 8) | ((uint8_t)color.V);
			dataIt->second.histogramYUV.addDataBytes(value, 3);
			*/
			/*dataIt->second.histogramYUV.addData(color.Y + color.U + color.V);

			dataIt->second.histogramYU.addData(color.Y + color.U);
			dataIt->second.histogramVU.addData(color.V + color.U);
			dataIt->second.histogramVU2.addData(color.V/(1+color.U));
			dataIt->second.histogramYU2.addData(color.Y/(1+color.U));*/

			vector<Object>::iterator it;
			for ( it = dataIt->second.objects.begin(); it != dataIt->second.objects.end();
					++it)
			{
				if ((*it).doBoundingBoxesOverlap((*annoIt))) {
					found = true;
					++dataIt->second.found;
					dataIt->second.objects.erase(it);
					break;
				}
			}

			if (!found) {
				++dataIt->second.falseNegative;
				Debugger::DEBUG("VisionAnalyzer", "%s falseNegative", dataIt->second.name.c_str());
			}
			break;
		}

	}

	for( dataIt = mVisionObjects.begin(); dataIt != mVisionObjects.end(); ++dataIt)
	{
		size_t falsePositive = dataIt->second.objects.size();
		if( falsePositive > 0) {
			dataIt->second.falsePositive += falsePositive;
			Debugger::DEBUG("VisionAnalyzer", "%s falsePositive: %u", dataIt->second.name.c_str(), falsePositive);
		}
	}

	return true;
}
