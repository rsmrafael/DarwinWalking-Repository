/*
 * FieldDetection.cpp
 *
 *  Created on: Sep 3, 2012
 *      Author: jan
 */

#include "FieldLineDetection.h"
#include "../../Debugging/DebugDrawer.h"
#include "../../Utils/Clustering/Ransac/Ransac.h"
#include "../../Utils/Clustering/Ransac/Models/LineModel.h"
#include "../../Config.h"
#include <map>

FieldLineDetection::FieldLineDetection()
:	mNumIterations( 200),
	mMinPoints( 8),
	mMaxError( 2.0),
	mShowDebugDrawings( false)
{
	Config::GetInstance()->registerConfigChangeHandler(this);
	this->configChanged();
}

FieldLineDetection::~FieldLineDetection() {
	Config::GetInstance()->removeConfigChangeHandler(this);
}

bool FieldLineDetection::execute() {
	const YUVImage* image = &getImage();
	int width = image->getWidth();
	int height = image->getHeight();

	list<Point>* greenPoints = const_cast<list<Point>*>(getGreenPoints().getCloud());
	getFieldLines().clearPoints();

	size_t iterations = mNumIterations;

	LineModel *line, *model = new LineModel();
	Ransac ransac( greenPoints, model, iterations, mMaxError);

	map<int, LineModel*> lines;
	Point p1, p2;

	for( int i = 0; i < 3; i++) {
		line = dynamic_cast<LineModel*>(ransac.run(mMinPoints));
		if( line != NULL) {
			//p1 = Point(0, line->getY(0));
			//p2 = Point(width - 1, line->getY(width - 1));

			//p1 = line->calcLeftPoint(greenPoints, mMaxError);
			//p2 = line->calcRightPoint(greenPoints, mMaxError);

			p1 = line->getStartPoint();
			p2 = line->getEndPoint();

			if( mShowDebugDrawings) {
				DRAW_LINE("FieldLine", p1.getX(), p1.getY(),
					p2.getX(), p2.getY(), DebugDrawer::GREEN);
			}
			line->eraseFittedPoints(greenPoints, mMaxError);
			lines.insert(make_pair<int, LineModel*>(p1.getX(), line));
			iterations /= 2;
		} else {
			if( i == 0) {
				// no line found, so use bottom of image (nothing is in field)
				p1 = Point(0, height - 1);
				p2 = Point(width - 1, height - 1);
				getFieldLines().addEdgePoint(p1);
				getFieldLines().addEdgePoint(p2);
				return true;
			}
			break;
		}
	}

	Point p3, p4;
	map<int, LineModel*>::iterator lineIt1, lineIt2;
	for( lineIt1 = lines.begin(); lineIt1 != lines.end(); ++lineIt1) {
		if( lineIt1 == lines.begin()) {
			getFieldLines().addEdgePoint(Point(0, lineIt1->second->getY(0)));
		}
		lineIt2 = lineIt1;
		if( ++lineIt2 == lines.end()) {
			getFieldLines().addEdgePoint(Point(width, lineIt1->second->getY(width)));
			break;
		}

		double dx, dy, b1, b2, m1, m2;
		p1 = lineIt1->second->getStartPoint();
		p2 = lineIt1->second->getEndPoint();
		dy = p2.getY() - p1.getY();
		dx = p2.getX() - p1.getX();
		m1 = dy / dx;
		b1 = p1.getY() - (m1 * p1.getX());

		p3 = lineIt2->second->getStartPoint();
		p4 = lineIt2->second->getEndPoint();
		dy = p4.getY() - p3.getY();
		dx = p4.getX() - p3.getX();
		m2 = dy / dx;
		b2 = p3.getY() - (m2 * p3.getX());

		double x, y;
		if(m1==m2) {
			if(b1 < b2) {
				x = p2.getX();
				y = p2.getY();
			} else {
				x = p4.getX();
				y = p4.getY();
			}
		} else {
			x = (b2 - b1) / (m1 - m2);
			y = m1 * x + b1;
		}
		getFieldLines().addEdgePoint(Point((int)x, (int)y));
	}

	return true;
}

void FieldLineDetection::configChanged() {
	Debugger::INFO("FieldLineDetection", "config changed");

	mShowDebugDrawings	= Config::GetBoolean("Vision", "FieldLine_debugDrawings", true);
	mNumIterations	= Config::GetValue<size_t>("Vision", "FieldLine_numIterations", (size_t)100);//100
	mMinPoints		= Config::GetValue<size_t>("Vision", "FieldLine_minPoints", (size_t)6);//6//8
	mMaxError		= Config::GetDouble("Vision", "FieldLine_maxError", 2.0);
}
