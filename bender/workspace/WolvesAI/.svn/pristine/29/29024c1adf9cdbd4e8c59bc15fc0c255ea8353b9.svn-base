/*
 * HeadMovement.cpp
 *
 *  Created on: 24.04.2014
 *      Author: Oliver Krebs
 */

#include "HeadMovement.h"
#include "../Behavior/BehaviorConstants.h"
#include "../../Communication/MitecomData.h"
#include <cmath>

HeadMovement::HeadMovement() {
	mSearchObjectRow = 0;
	mSearchObjectPan = 0;
	mSearchObjectTilt = 0;
	mSearchObjectPanDir = 0;
	mSearchObjectTiltDir = 0;
	mSearchObjectLoopPoint = -1;
	mSearchObjectUpdateCnt = 0;

	mFoundCounter = 0;
	mNotFoundCounter = 0;
	mLostCounter = 0;

	mIsBallSeenStable = false;
	mLastSearchObjectType = Object::UNKNOWN;
}

HeadMovement::~HeadMovement() {

}

bool HeadMovement::execute() {
	// check if remote behavior is active
	if( getBehaviorStatus().getActualRole() == ROLE_REMOTE) {
		return true;
	}

	Object::ObjectType type = getHeadAction().getSearchObjectType();
	if( type != mLastSearchObjectType) {
		Debugger::DEBUG("HeadMovement", "New search object (%d)", type);
		if( getHeadAction().getResetSearch()) {
			resetSearch();
		} else {
			Vector vec;
			Object obj;
			if( type == Object::BALL) {
				obj = getBallRelative();
				vec = obj.lastVector;
			} else /*if( type == Object::GOAL_POLE_YELLOW)*/ {
				obj = getPolesRelative().getLargestObject();
				if( obj.lastImageSeen) {
					vec = obj.lastVector;
				} else {
					//Debugger::DEBUG("HeadMovement","Reset because Ball in last Image not seen");
					resetSearch();
				}
			}

			RobotConfiguration roboConfig = getRobotConfiguration();
			mSearchObjectPan = (int)vec.getAngle();
			mSearchObjectTilt = (int)atan(roboConfig.cameraHeight / vec.getLength());
		}
		mLastSearchObjectType = type;
		switch( type) {
		case Object::BALL:
			getBallStatus().setObjectStatus(VisionStatus::OBJECT_SEARCHING);
			break;
		case Object::GOAL_POLE_YELLOW:
			getGoalStatus().setObjectStatus(VisionStatus::OBJECT_SEARCHING);
			break;
		case Object::UNKNOWN:
		default:
			break;
		}
	}
	switch( type) {
	case Object::BALL:
		searchBall();
		break;
	case Object::GOAL_POLE_YELLOW:
		searchGoal();
		break;
	case Object::UNKNOWN:
		searchObject(true);
		break;
	default:
		break;
	}
	return true;
}

void HeadMovement::resetSearch() {
	Debugger::DEBUG("HeadMovement", "Reset");
	mSearchObjectLoopPoint = -1;
	mFoundCounter = 0;
	mNotFoundCounter = 0;
	mLostCounter = 0;
}

void HeadMovement::searchBall() {
	if (getBallPredict().lastImageSeen) {
		Debugger::DEBUG("HeadMovement", "Ball found, tracking");
		processTracker(getBallPredict()); //getBallPredict
		mFoundCounter++;
		if (mFoundCounter >= BALL_FOUND_THRESHOLD) {
			mLostCounter = 0;
			mIsBallSeenStable = true;
			Debugger::INFO("HeadMovement", "Ball found stable");
			getBallStatus().setObjectStatus(VisionStatus::OBJECT_FOUND_STABLE);
		} else {
			getBallStatus().setObjectStatus(VisionStatus::OBJECT_SEEN);
		}
	} else if (mFoundCounter == 0) {
		Debugger::DEBUG("HeadMovement", "Ball not found, looking for it");
		if( !searchObject(false)) {
			mSearchObjectLoopPoint = -1;
			searchObject(false);
			getHeadAction().setPanTilt(mSearchObjectPan, mSearchObjectTilt);
			getBallStatus().setObjectStatus(VisionStatus::OBJECT_NOT_FOUND);
		} else {
			Debugger::DEBUG("HeadMovement", "Pan %d, Tilt: %d", mSearchObjectPan, mSearchObjectTilt);
			getHeadAction().setPanTilt(mSearchObjectPan, mSearchObjectTilt);
			getBallStatus().setObjectStatus(VisionStatus::OBJECT_SEARCHING);
		}
	} else {
		mNotFoundCounter++;
		if (mNotFoundCounter >= OBJECT_LOST_THRESHOLD) {
			Debugger::INFO("HeadMovement", "SearchBall: Ball lost!");
			mFoundCounter = 0;
			mNotFoundCounter = 0;
			mLostCounter++;
			if( mLostCounter > MAX_LOST_COUNTER) {
				mLostCounter = 0;
				mSearchObjectLoopPoint = -1;
				searchObject(false);
				getHeadAction().setPanTilt(mSearchObjectPan, mSearchObjectTilt);
				getBallStatus().setObjectStatus(VisionStatus::OBJECT_LOST);
			} else {
				getBallStatus().setObjectStatus(VisionStatus::OBJECT_SEARCHING);
			}
		} else {
			getBallStatus().setObjectStatus(VisionStatus::OBJECT_SEARCHING);
		}
	}
}

void HeadMovement::searchGoal() {
	const Object& goal = getGoalPoles().getLargestObject();
	if (goal.lastImageSeen) {
		Debugger::DEBUG("HeadMovement", "Goal found, tracking");
		processTracker(goal);
		mFoundCounter++;
		if (mFoundCounter >= GOAL_FOUND_THRESHOLD) {
			getGoalStatus().setObjectStatus(VisionStatus::OBJECT_FOUND_STABLE);
		} else {
			getGoalStatus().setObjectStatus(VisionStatus::OBJECT_SEEN);
		}
	} else if (mFoundCounter == 0) {
		Debugger::DEBUG("HeadMovement", "Goal not found, looking for it");
		if( !searchObject(true)) {
			mSearchObjectLoopPoint = -1;
			searchObject(true);
			getHeadAction().setPanTilt(mSearchObjectPan, mSearchObjectTilt);
			getGoalStatus().setObjectStatus(VisionStatus::OBJECT_NOT_FOUND);
		} else {
			Debugger::DEBUG("Striker", "Pan %d, Tilt: %d", mSearchObjectPan, mSearchObjectTilt);
			getHeadAction().setPanTilt(mSearchObjectPan, mSearchObjectTilt);
			getGoalStatus().setObjectStatus(VisionStatus::OBJECT_SEARCHING);
		}
	} else {
		mNotFoundCounter++;
		if (mNotFoundCounter >= OBJECT_LOST_THRESHOLD) {
			Debugger::INFO("HeadMovement", "Circle: Goal lost!");
			mFoundCounter = 0;
			mNotFoundCounter = 0;
			mLostCounter++;
			if( mLostCounter > MAX_LOST_COUNTER) {
				mLostCounter = 0;
				mSearchObjectLoopPoint = -1;
				searchObject(false);
				getHeadAction().setPanTilt(mSearchObjectPan, mSearchObjectTilt);
				getGoalStatus().setObjectStatus(VisionStatus::OBJECT_LOST);
			} else {
				getGoalStatus().setObjectStatus(VisionStatus::OBJECT_SEARCHING);
			}
		} else {
			Debugger::DEBUG("HeadMovement", "Circle: Goal not seen, retrying");
			getGoalStatus().setObjectStatus(VisionStatus::OBJECT_SEARCHING);
		}
	}
}

bool HeadMovement::searchObject(bool topRowOnly) {
	if( mSearchObjectLoopPoint < 0) {
		Debugger::DEBUG("HeadMovement", "searchObject start loop");
		mSearchObjectPan = PAN_SEARCH_MIN[0];
		mSearchObjectPanDir = +1;
		mSearchObjectTilt = TILT_SEARCH_MAX;
		mSearchObjectTiltDir = +1;
		mSearchObjectRow = 0;
		mSearchObjectLoopPoint = 0;
		mSearchObjectUpdateCnt = 0;
	}

	mSearchObjectUpdateCnt++;
	if (mSearchObjectUpdateCnt >= UPDATES_PER_POINT) {
		mSearchObjectUpdateCnt = 0;

		mSearchObjectPan += mSearchObjectPanDir * PAN_SEARCH_STEP;
		if( mSearchObjectPan <= PAN_SEARCH_MIN[mSearchObjectRow]
		    || mSearchObjectPan >= PAN_SEARCH_MAX[mSearchObjectRow]) {
			mSearchObjectPanDir = -mSearchObjectPanDir;
			if (!topRowOnly) {
				bool panMin = false;
				if( mSearchObjectPan <= PAN_SEARCH_MIN[mSearchObjectRow]) {
					panMin = true;
				}
				if( mSearchObjectTilt == TILT_SEARCH_MIN || mSearchObjectTilt == TILT_SEARCH_MAX) {
					mSearchObjectTiltDir = -mSearchObjectTiltDir;
				}
				mSearchObjectTilt += mSearchObjectTiltDir * TILT_SEARCH_STEP;
				mSearchObjectRow = abs(mSearchObjectTilt - TILT_SEARCH_MAX) / TILT_SEARCH_STEP;
				if( mSearchObjectRow > 2 || mSearchObjectRow < 0) {
					Debugger::WARN("HeadMovement", "SearchObject: Row reached invalid value (%d)!", mSearchObjectRow);
					mSearchObjectRow = 2;
				}
				if( panMin) {
					mSearchObjectPan = PAN_SEARCH_MIN[mSearchObjectRow];
				} else {
					mSearchObjectPan = PAN_SEARCH_MAX[mSearchObjectRow];
				}
			} else {
				mSearchObjectRow = 0;
				if( mSearchObjectPan < PAN_SEARCH_MIN[mSearchObjectRow]) {
					mSearchObjectPan = PAN_SEARCH_MIN[mSearchObjectRow];
				} else if( mSearchObjectPan > PAN_SEARCH_MAX[mSearchObjectRow]) {
					mSearchObjectPan = PAN_SEARCH_MAX[mSearchObjectRow];
				}
			}
			mSearchObjectLoopPoint++;
		}

		if (mSearchObjectLoopPoint > MAX_LOOP_POINTS) {
			mSearchObjectLoopPoint = 0;
			return false;
		}

		// Allow camera to set
		/*
		#ifdef WIN32
		Sleep(100);
		#else
		usleep(100 * 1000);
		#endif
		*/
	}
	return true;
}

bool HeadMovement::processTracker(const Object& object) const {
	static int NoObjectCount = 0;

	if (!object.lastImageSeen) { // No object found
		if (NoObjectCount < NO_OBJECT_MAX_COUNT) {
			getHeadAction().PanTiltTracking(false);
			NoObjectCount++;
			return true;
		} else {
			return false;
		}
	} else {
		NoObjectCount = 0;
		int objX = object.lastImageX; // horizontal center
		int objY = object.lastImageTopLeftY + object.lastImageHeight; // bottom
		double offsetX = (double)(objX - (int)(getImage().getWidth() / 2));
		double offsetY = (double)(objY - (int)(getImage().getHeight() / 2));
		offsetY = -offsetY; // Inverse Y
		offsetX *= (2.0*getRobotConfiguration().cameraOpeningHorizontal / (double)getImage().getWidth()); // pixel per angle
		offsetY *= (2.0*getRobotConfiguration().cameraOpeningVertical / (double)getImage().getHeight()); // pixel per angle
//		Debugger::DEBUG("processTracker", "offsetX: %f, offsetY: %f", offsetX, offsetY);
		getHeadAction().PanTiltTracking(offsetX, offsetY, false);

		/*if (offsetX > 30 || offsetX < -30 || offsetY > 30 || offsetY < -30) {
			#ifdef WIN32
			Sleep(100);
			#else
			usleep(100 * 1000);
			#endif
		}*/
		return true;
	}
}
