/*
 * Representation.h
 *
 *  Created on: 07.08.2012
 *      Author: Stefan Krupop
 */

#ifndef REPRESENTATION_H_
#define REPRESENTATION_H_

#include "Printable.h"
#include <string>
#include <list>

using namespace std;

class Module;

class Representation : public Printable {
public:
	virtual ~Representation() {};

	const string& getName() const { return mName; }

	void registerProvidingModule(const Module& module) {
		provided.push_back(&module);
	}

	void unregisterProvidingModule(const Module& module) {
		provided.remove(&module);
	}

	void registerRequiringModule(const Module& module) {
		required.push_back(&module);
	}

	void unregisterRequiringModule(const Module& module) {
		required.remove(&module);
	}

	/**
	 * This method can be overwritten by a particular
	 * representation in order to stream out some specific (visible) data
	 */
	virtual void print(ostream& stream) const {
		// use representation name as fallback
		stream << mName;
	}

	virtual void serialize(ostream& stream) const = 0;
	virtual void deserialize(istream& stream) = 0;

protected:
	Representation(const string &name) : mName(name) {};

	// pointers to the providing and requiring modules
	list<const Module*> provided;
	list<const Module*> used;
	list<const Module*> required;

private:
	string mName;
};

#endif /* REPRESENTATION_H_ */
