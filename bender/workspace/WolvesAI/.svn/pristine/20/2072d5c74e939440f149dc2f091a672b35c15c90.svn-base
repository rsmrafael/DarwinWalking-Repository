// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Line.proto

#ifndef PROTOBUF_Line_2eproto__INCLUDED
#define PROTOBUF_Line_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "Point.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Line_2eproto();
void protobuf_AssignDesc_Line_2eproto();
void protobuf_ShutdownFile_Line_2eproto();

class Line;

// ===================================================================

class Line : public ::google::protobuf::MessageLite {
 public:
  Line();
  virtual ~Line();
  
  Line(const Line& from);
  
  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Line& default_instance();
  
  void Swap(Line* other);
  
  // implements Message ----------------------------------------------
  
  Line* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .protobuf.Point startPoint = 1;
  inline bool has_startpoint() const;
  inline void clear_startpoint();
  static const int kStartPointFieldNumber = 1;
  inline const ::protobuf::Point& startpoint() const;
  inline ::protobuf::Point* mutable_startpoint();
  inline ::protobuf::Point* release_startpoint();
  
  // required .protobuf.Point endPoint = 2;
  inline bool has_endpoint() const;
  inline void clear_endpoint();
  static const int kEndPointFieldNumber = 2;
  inline const ::protobuf::Point& endpoint() const;
  inline ::protobuf::Point* mutable_endpoint();
  inline ::protobuf::Point* release_endpoint();
  
  // @@protoc_insertion_point(class_scope:protobuf.Line)
 private:
  inline void set_has_startpoint();
  inline void clear_has_startpoint();
  inline void set_has_endpoint();
  inline void clear_has_endpoint();
  
  ::protobuf::Point* startpoint_;
  ::protobuf::Point* endpoint_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Line_2eproto();
  friend void protobuf_AssignDesc_Line_2eproto();
  friend void protobuf_ShutdownFile_Line_2eproto();
  
  void InitAsDefaultInstance();
  static Line* default_instance_;
};
// ===================================================================


// ===================================================================

// Line

// required .protobuf.Point startPoint = 1;
inline bool Line::has_startpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Line::set_has_startpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Line::clear_has_startpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Line::clear_startpoint() {
  if (startpoint_ != NULL) startpoint_->::protobuf::Point::Clear();
  clear_has_startpoint();
}
inline const ::protobuf::Point& Line::startpoint() const {
  return startpoint_ != NULL ? *startpoint_ : *default_instance_->startpoint_;
}
inline ::protobuf::Point* Line::mutable_startpoint() {
  set_has_startpoint();
  if (startpoint_ == NULL) startpoint_ = new ::protobuf::Point;
  return startpoint_;
}
inline ::protobuf::Point* Line::release_startpoint() {
  clear_has_startpoint();
  ::protobuf::Point* temp = startpoint_;
  startpoint_ = NULL;
  return temp;
}

// required .protobuf.Point endPoint = 2;
inline bool Line::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Line::set_has_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Line::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Line::clear_endpoint() {
  if (endpoint_ != NULL) endpoint_->::protobuf::Point::Clear();
  clear_has_endpoint();
}
inline const ::protobuf::Point& Line::endpoint() const {
  return endpoint_ != NULL ? *endpoint_ : *default_instance_->endpoint_;
}
inline ::protobuf::Point* Line::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == NULL) endpoint_ = new ::protobuf::Point;
  return endpoint_;
}
inline ::protobuf::Point* Line::release_endpoint() {
  clear_has_endpoint();
  ::protobuf::Point* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Line_2eproto__INCLUDED
