/*
 * VisionVisualisation.cpp
 *
 *  Created on: Sep 3, 2012
 *      Author: jan
 */

#include "VisionVisualisation.h"

#ifdef USE_OPENCV
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#endif

VisionVisualisation::VisionVisualisation() {

#ifdef USE_OPENCV

	cv::Mat dummy(288, 320, CV_8U);

	cv::namedWindow("original", CV_WINDOW_NORMAL);
	cvMoveWindow("original", 100, 0);
	cv::namedWindow("Y-Channel", CV_WINDOW_NORMAL);
	cvMoveWindow("Y-Channel", 450, 0);
	cv::namedWindow("Cb-Channel", CV_WINDOW_NORMAL);
	cvMoveWindow("Cb-Channel", 800, 0);
	cv::namedWindow("Cr-Channel", CV_WINDOW_NORMAL);
	cvMoveWindow("Cr-Channel", 100, 350);
	cv::namedWindow("augmented", CV_WINDOW_NORMAL);
	cvMoveWindow("augmented", 450, 350);

	cv::imshow("original", dummy);
	cv::imshow("Y-Channel", dummy);
	cv::imshow("Cb-Channel", dummy);
	cv::imshow("Cr-Channel", dummy);
	cv::imshow("augmented", dummy);

#endif

}

VisionVisualisation::~VisionVisualisation() {

}

void VisionVisualisation::execute() {

#ifdef USE_OPENCV

	cv::imshow("original", getOpenCVImage().getImage());
	cv::imshow("Y-Channel", getOpenCVImage().getChannelY());
	cv::imshow("Cb-Channel", getOpenCVImage().getChannelCB());
	cv::imshow("Cr-Channel", getOpenCVImage().getChannelCR());

	cv::Mat augmented = cv::Mat(getOpenCVImage().getImage());

	if (getBall().lastImageSeen) {
		int radius =  (getBall().lastImageHeigth+getBall().lastImageWidth)/2/2;
		if (radius < 10){
			radius = 10;
		}
		cv::circle(augmented,
				cv::Point(getBall().lastImageX, getBall().lastImageY),radius,
				cv::Scalar(255, 0, 0), 2, 2, 0);
	}

//	const PointCloud goalPoints = getGoalPoints();
//
//	for (list<Point>::const_iterator it = goalPoints.getCloud()->begin();
//			it != goalPoints.getCloud()->end(); ++it) {
//		cv::circle(augmented, cv::Point((*it).getX(), (*it).getY()), 1,
//				cv::Scalar(255, 140, 140), 2, 2, 0);
//	}

	const PointCloud ballPoints = getBallEdges();

	for (list<Point>::const_iterator it = ballPoints.getCloud()->begin();
			it != ballPoints.getCloud()->end(); ++it) {
		cv::circle(augmented, cv::Point((*it).getX(), (*it).getY()), 1,
				cv::Scalar(255, 255, 140), 2, 2, 0);
	}

//	const vector<Object> goalPoles = getGoalPoles().getObjectLists();
//
//	for (vector<Object>::const_iterator it = goalPoles.begin();
//			it != goalPoles.end(); ++it) {
//		cv::Point topLeft = cv::Point((*it).getBoundingBoxTopLeft().getX(),
//				(*it).getBoundingBoxTopLeft().getY());
//		cv::Point bottomRigth = cv::Point(
//				(*it).getBoundingBoxBottomRigth().getX(),
//				(*it).getBoundingBoxBottomRigth().getY());
//		cv::rectangle(augmented, topLeft, bottomRigth, cv::Scalar(255, 255, 0),
//				2, 2, 0);
//	}

/*	const PointCloud fieldPoints = getGreenPoints();

	for (list<Point>::const_iterator it = fieldPoints.getCloud()->begin();
			it != fieldPoints.getCloud()->end(); ++it) {
		cv::circle(augmented, cv::Point((*it).getX(), (*it).getY()), 1,
				cv::Scalar(0, 255, 0), 2, 2, 0);
	}
*/
//	const vector<Object> balls = getBalls().getObjectLists();
//
//	for (vector<Object>::const_iterator it = balls.begin(); it != balls.end();
//			++it) {
//		cv::Point topLeft = cv::Point((*it).getBoundingBoxTopLeft().getX(),
//				(*it).getBoundingBoxTopLeft().getY());
//		cv::Point bottomRigth = cv::Point(
//				(*it).getBoundingBoxBottomRigth().getX(),
//				(*it).getBoundingBoxBottomRigth().getY());
//		cv::rectangle(augmented, topLeft, bottomRigth, cv::Scalar(255, 255, 0),
//				2, 2, 0);
//	}

//	FieldLines lines = getFieldLines();
//	bool first = true;
//	Point p1, p2;
//	for (list<Point>::const_iterator it = lines.getEdgePoints()->begin();
//			it != lines.getEdgePoints()->end(); ++it) {
//		if (first) {
//			p1 = (*it);
//		}
//		p2 = (*it);
//
//		cv::line(augmented, cv::Point(p1.getX(), p1.getY()),
//				cv::Point(p2.getX(), p2.getY()), cv::Scalar(0, 255, 0), 4, 2,
//				1);
//		p1 = (*it);
//	}

	cv::imshow("augmented", augmented);

	cv::waitKey(1);
#endif

}
