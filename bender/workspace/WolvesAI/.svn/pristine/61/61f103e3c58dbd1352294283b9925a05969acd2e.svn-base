/*
 * GlobalModeling.cpp
 *
 *  Created on: 26.06.2014
 *      Author: Oliver Krebs
 */

#include "GlobalModeling.h"

GlobalModeling::GlobalModeling()
:	mMaxDifference( 2000)
{

}

GlobalModeling::~GlobalModeling()
{

}

bool GlobalModeling::execute()
{
	/*Vector v1, v2;
	std::vector<Object> poles = getPolesRelative().getObjects();
	if( poles.size() >= 2) {
		std::vector<Object>::iterator it;
		it = poles.begin();
		v1 = (*it).lastVector;
		v2 = (*++it).lastVector;
		GoalSide side1 = getGoalSideView().getGoalSide((int)v1.getAngle());
		GoalSide side2 = getGoalSideView().getGoalSide((int)v2.getAngle());
		double a, b, c;
		double alpha, beta, gamma;
		a = v1.getLength();
		b = v2.getLength();
		gamma = fabs(v1.getAngle() - v2.getAngle());
		c = sqrt((a*a + b*b) - (2.0*a*b*cos(gamma)));
		alpha = acos((b*b + c*c - a*a) / (2*b*c));
		beta = acos((a*a + c*c - b*b) / (2*a*c));

		double angle = GOAL_TO_CENTER_ANGLE - alpha;

		if( (int)c < GOAL_WIDTH + mMaxDifference) {
			// poles belong together
			if( side1.getGoalSide() != side2.getGoalSide()) {
				Debugger::DEBUG("GlobalModeling", "Goal poles are near together, but different sides!");
			} else {
				Debugger::DEBUG("GlobalModeling", "Goal poles are near together, side %d", side1.getGoalSide());
			}
		} else {
			// poles dont belong together
			if( side1.getGoalSide() == side2.getGoalSide()) {
				Debugger::DEBUG("GlobalModeling", "Goal poles are a long way away from each other, but same side?!");
			} else {
				Debugger::DEBUG("GlobalModeling", "Goal poles are a long way away from each other");
			}
		}
	}*/
	getBallAbsolute().updateVector( 0.0, 0.0);
	getMyPosition().updateVector(0.0, 0.0);

	getGlobalModel().clearList();
	Object obj(0, 0, 0, 0);
	obj.type = obj.ROBOT;
	obj.lastVector.updateVector(0.0, 3900.0);
	getGlobalModel().addObject(obj);
	Object obj2(0, 0, 0, 0);
	obj2.type = obj.ROBOT_CYAN;
	obj2.lastVector.updateVector(3.1415, 5000.0);
	getGlobalModel().addObject(obj2);
	Object obj3(0, 0, 0, 0);
	obj3.type = obj.ROBOT_MAGENTA;
	obj3.lastVector.updateVector(0.2618, 4638.0);
	getGlobalModel().addObject(obj3);
	Object obj4(0, 0, 0, 0);
	obj4.type = obj.OBSTACLE;
	obj4.lastVector.updateVector(2.4, 750.0);
	getGlobalModel().addObject(obj4);

	getLocalizationDrawings().clear();
	DebugDrawings::DebugDrawing drawing("Test", DebugDrawer::CIRCLE, 0, 0, 10, 0, DebugDrawer::BLUE);
	getLocalizationDrawings().add(drawing);
	return true;
}
