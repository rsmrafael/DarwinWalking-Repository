// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DebugDrawings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

void protobuf_ShutdownFile_DebugDrawings_2eproto() {
  delete DebugDrawings::default_instance_;
  delete DebugDrawings_DebugDrawing::default_instance_;
}

void protobuf_AddDesc_DebugDrawings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  DebugDrawings::default_instance_ = new DebugDrawings();
  DebugDrawings_DebugDrawing::default_instance_ = new DebugDrawings_DebugDrawing();
  DebugDrawings::default_instance_->InitAsDefaultInstance();
  DebugDrawings_DebugDrawing::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DebugDrawings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DebugDrawings_2eproto {
  StaticDescriptorInitializer_DebugDrawings_2eproto() {
    protobuf_AddDesc_DebugDrawings_2eproto();
  }
} static_descriptor_initializer_DebugDrawings_2eproto_;


// ===================================================================

bool DebugDrawings_DebugDrawing_DrawColor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::BLACK;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::DARK_GRAY;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::LIGHT_GRAY;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::WHITE;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::RED;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::ORANGE;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::YELLOW;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::LIME;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::GREEN;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::CYAN;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::BLUE;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::VIOLET;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::PURPLE;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::MAGENTA;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::LIGHT_RED;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::LIGHT_YELLOW;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::LIGHT_GREEN;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::LIGHT_BLUE;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::LIGHT_PURPLE;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::BROWN;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::OLIVE;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::TEAL;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::AZURE;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::DARK_RED;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::DARK_GREEN;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::DARK_BLUE;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::DrawColor_MIN;
const DebugDrawings_DebugDrawing_DrawColor DebugDrawings_DebugDrawing::DrawColor_MAX;
const int DebugDrawings_DebugDrawing::DrawColor_ARRAYSIZE;
#endif  // _MSC_VER
bool DebugDrawings_DebugDrawing_DrawShape_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DebugDrawings_DebugDrawing_DrawShape DebugDrawings_DebugDrawing::POINT;
const DebugDrawings_DebugDrawing_DrawShape DebugDrawings_DebugDrawing::LINE;
const DebugDrawings_DebugDrawing_DrawShape DebugDrawings_DebugDrawing::CIRCLE;
const DebugDrawings_DebugDrawing_DrawShape DebugDrawings_DebugDrawing::BOX;
const DebugDrawings_DebugDrawing_DrawShape DebugDrawings_DebugDrawing::DrawShape_MIN;
const DebugDrawings_DebugDrawing_DrawShape DebugDrawings_DebugDrawing::DrawShape_MAX;
const int DebugDrawings_DebugDrawing::DrawShape_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DebugDrawings_DebugDrawing::kModuleFieldNumber;
const int DebugDrawings_DebugDrawing::kTypeFieldNumber;
const int DebugDrawings_DebugDrawing::kX1FieldNumber;
const int DebugDrawings_DebugDrawing::kY1FieldNumber;
const int DebugDrawings_DebugDrawing::kP1FieldNumber;
const int DebugDrawings_DebugDrawing::kP2FieldNumber;
const int DebugDrawings_DebugDrawing::kPenColorFieldNumber;
#endif  // !_MSC_VER

DebugDrawings_DebugDrawing::DebugDrawings_DebugDrawing()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DebugDrawings_DebugDrawing::InitAsDefaultInstance() {
}

DebugDrawings_DebugDrawing::DebugDrawings_DebugDrawing(const DebugDrawings_DebugDrawing& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DebugDrawings_DebugDrawing::SharedCtor() {
  _cached_size_ = 0;
  module_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  x1_ = 0;
  y1_ = 0;
  p1_ = 0;
  p2_ = 0;
  pencolor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugDrawings_DebugDrawing::~DebugDrawings_DebugDrawing() {
  SharedDtor();
}

void DebugDrawings_DebugDrawing::SharedDtor() {
  if (module_ != &::google::protobuf::internal::kEmptyString) {
    delete module_;
  }
  if (this != default_instance_) {
  }
}

void DebugDrawings_DebugDrawing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DebugDrawings_DebugDrawing& DebugDrawings_DebugDrawing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DebugDrawings_2eproto();  return *default_instance_;
}

DebugDrawings_DebugDrawing* DebugDrawings_DebugDrawing::default_instance_ = NULL;

DebugDrawings_DebugDrawing* DebugDrawings_DebugDrawing::New() const {
  return new DebugDrawings_DebugDrawing;
}

void DebugDrawings_DebugDrawing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_module()) {
      if (module_ != &::google::protobuf::internal::kEmptyString) {
        module_->clear();
      }
    }
    type_ = 0;
    x1_ = 0;
    y1_ = 0;
    p1_ = 0;
    p2_ = 0;
    pencolor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DebugDrawings_DebugDrawing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string module = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .protobuf.DebugDrawings.DebugDrawing.DrawShape type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::DebugDrawings_DebugDrawing_DrawShape_IsValid(value)) {
            set_type(static_cast< ::protobuf::DebugDrawings_DebugDrawing_DrawShape >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x1;
        break;
      }
      
      // required int32 x1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y1;
        break;
      }
      
      // required int32 y1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_p1;
        break;
      }
      
      // optional int32 p1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p1_)));
          set_has_p1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_p2;
        break;
      }
      
      // optional int32 p2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p2_)));
          set_has_p2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_penColor;
        break;
      }
      
      // optional .protobuf.DebugDrawings.DebugDrawing.DrawColor penColor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penColor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::DebugDrawings_DebugDrawing_DrawColor_IsValid(value)) {
            set_pencolor(static_cast< ::protobuf::DebugDrawings_DebugDrawing_DrawColor >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugDrawings_DebugDrawing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->module(), output);
  }
  
  // required .protobuf.DebugDrawings.DebugDrawing.DrawShape type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // required int32 x1 = 3;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x1(), output);
  }
  
  // required int32 y1 = 4;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y1(), output);
  }
  
  // optional int32 p1 = 5;
  if (has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->p1(), output);
  }
  
  // optional int32 p2 = 6;
  if (has_p2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->p2(), output);
  }
  
  // optional .protobuf.DebugDrawings.DebugDrawing.DrawColor penColor = 7;
  if (has_pencolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pencolor(), output);
  }
  
}

int DebugDrawings_DebugDrawing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }
    
    // required .protobuf.DebugDrawings.DebugDrawing.DrawShape type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required int32 x1 = 3;
    if (has_x1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x1());
    }
    
    // required int32 y1 = 4;
    if (has_y1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y1());
    }
    
    // optional int32 p1 = 5;
    if (has_p1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p1());
    }
    
    // optional int32 p2 = 6;
    if (has_p2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p2());
    }
    
    // optional .protobuf.DebugDrawings.DebugDrawing.DrawColor penColor = 7;
    if (has_pencolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pencolor());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugDrawings_DebugDrawing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DebugDrawings_DebugDrawing*>(&from));
}

void DebugDrawings_DebugDrawing::MergeFrom(const DebugDrawings_DebugDrawing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_p1()) {
      set_p1(from.p1());
    }
    if (from.has_p2()) {
      set_p2(from.p2());
    }
    if (from.has_pencolor()) {
      set_pencolor(from.pencolor());
    }
  }
}

void DebugDrawings_DebugDrawing::CopyFrom(const DebugDrawings_DebugDrawing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugDrawings_DebugDrawing::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void DebugDrawings_DebugDrawing::Swap(DebugDrawings_DebugDrawing* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(type_, other->type_);
    std::swap(x1_, other->x1_);
    std::swap(y1_, other->y1_);
    std::swap(p1_, other->p1_);
    std::swap(p2_, other->p2_);
    std::swap(pencolor_, other->pencolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DebugDrawings_DebugDrawing::GetTypeName() const {
  return "protobuf.DebugDrawings.DebugDrawing";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DebugDrawings::kDrawingFieldNumber;
#endif  // !_MSC_VER

DebugDrawings::DebugDrawings()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DebugDrawings::InitAsDefaultInstance() {
}

DebugDrawings::DebugDrawings(const DebugDrawings& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DebugDrawings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugDrawings::~DebugDrawings() {
  SharedDtor();
}

void DebugDrawings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugDrawings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DebugDrawings& DebugDrawings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DebugDrawings_2eproto();  return *default_instance_;
}

DebugDrawings* DebugDrawings::default_instance_ = NULL;

DebugDrawings* DebugDrawings::New() const {
  return new DebugDrawings;
}

void DebugDrawings::Clear() {
  drawing_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DebugDrawings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.DebugDrawings.DebugDrawing drawing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_drawing;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugDrawings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.DebugDrawings.DebugDrawing drawing = 1;
  for (int i = 0; i < this->drawing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->drawing(i), output);
  }
  
}

int DebugDrawings::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.DebugDrawings.DebugDrawing drawing = 1;
  total_size += 1 * this->drawing_size();
  for (int i = 0; i < this->drawing_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawing(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugDrawings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DebugDrawings*>(&from));
}

void DebugDrawings::MergeFrom(const DebugDrawings& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawing_.MergeFrom(from.drawing_);
}

void DebugDrawings::CopyFrom(const DebugDrawings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugDrawings::IsInitialized() const {
  
  for (int i = 0; i < drawing_size(); i++) {
    if (!this->drawing(i).IsInitialized()) return false;
  }
  return true;
}

void DebugDrawings::Swap(DebugDrawings* other) {
  if (other != this) {
    drawing_.Swap(&other->drawing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DebugDrawings::GetTypeName() const {
  return "protobuf.DebugDrawings";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
