#include <iostream>
#include <sstream>
#include <unistd.h>
#include <signal.h>
#include <string>
#include <cstring>
#include <algorithm>
#include <cctype>
#include <sys/time.h>

#include "Body/Body.h"
#include "Network/GameControllerServer.h"
#include "Debugging/Debugger.h"
#include "Debugging/DebugDrawer.h"
#include "Debugging/Services/BlackboardService.h"
#include "Debugging/Services/FileService.h"
#include "Debugging/Services/BodyDataService.h"
#include "Debugging/Services/ImageService.h"
#include "Debugging/Services/BotControlService.h"
#include "LEDs.h"
#include "Config.h"
#include "Game.h"

#include "ModuleManager/ModuleManager.h"

#include "Modules/ImageSources/CaptureV4L1.h"
#include "Modules/ImageSources/CaptureV4L2.h"
#include "Modules/ImageSources/PBFLoader.h"
#include "Modules/ImageSources/CaptureOpenCV.h"
#include "Modules/ImageSources/ConvertOpenCV.h"

#include "Modules/ConfigurationProvider.h"
#include "Modules/BodyController.h"

#include "Modules/Vision/Scanlines.h"
#include "Modules/Vision/FieldLineDetection.h"
#include "Modules/Vision/BallDetection.h"
#include "Modules/Vision/BallDetectionOpenCV.h"
#include "Modules/Vision/GoalDetection.h"
#include "Modules/Vision/ImageWriter.h"
#include "Modules/Vision/MJPEGStreamer.h"
#include "Modules/Vision/VisionAnalyzer.h"
#include "Modules/Vision/RobotDetection.h"

#include "Modules/Visualisation/VisionVisualisation.h"
#include "Modules/Support/HorizonDetection.h"

#include "Modules/Behavior/AttackerBehavior.h"
#include "Modules/Behavior/RemoteBehavior.h"
#include "Modules/Behavior/GoalieBehavior.h"

#include "Modules/Localization/LocalModeling.h"

#define OUR_TEAM_ID			20

using namespace std;

static bool mTerminate;

static void sighandler(int sig) {
	mTerminate = true;
}

int main(int argc, char * const argv[]) {
	signal(SIGINT, &sighandler);

	string PBFPathName = "";
	signed short repeatCount = 0;
	bool repeatList = false;
	bool panTiltFromPBF = true;
	bool noComms = false;
	//lint -e{850} i is modified in the body of the for loop
	for (int i = 1; i < argc; i++) {
		if (strcmp(argv[i], "--pbf") == 0) {
			if (i + 1 < argc) {
				PBFPathName = argv[i + 1];
				i++;
			} else {
				printf("Missing PBF filename!\n");
				return 1;
			}
		} else if (strcmp(argv[i], "--autoadvance") == 0) {
			if (i + 1 < argc) {
				repeatCount = (signed short) atoi(argv[i + 1]);
				i++;
			} else {
				printf("Missing repeat count!\n");
				return 1;
			}
		} else if (strcmp(argv[i], "--repeat") == 0) {
			repeatList = true;
		} else if (strcmp(argv[i], "--noPBFPanTilt") == 0) {
			panTiltFromPBF = false;
		} else if (strcmp(argv[i], "--noComms") == 0) {
			noComms = true;
		} else if (strcmp(argv[i], "--help") == 0) {
			printf("Known command line options:\n");
			printf("--help                      Prints this message\n");
			printf(
					"--pbf <file>                Load images and color calibration from file or whole directory\n");
			printf(
					"--autoadvance <repeatcount> Auto-advances to next PBF after <repeatcount> captures\n");
			printf(
					"--repeat                    Repeat PBF list after all images where used\n");
			printf(
					"--noPBFPanTilt              Do not use pan/tilt position set in PBF\n");
			printf(
					"--noComms                   Do not try to open body communications port\n");
			return 0;
		}
	}

	// Force Config to initialize
	Config::GetInstance();
	// Force Debugger to initialize
	Debugger::GetInstance();

	Body* mBody;
	LEDs* mLEDs;
	GameControllerServer* mGameController;
	Game* mGame;
	mGame = new Game();

	Body::BodyType bodyType = Body::Regular;
#ifdef DEBUG_X86
	mBody = new Body("/dev/ttyUSB0", bodyType, noComms);
#else
	mBody = new Body("/dev/ttySS0", bodyType, noComms);
#endif

	// Add services to debugger
	FileService* fileService = new FileService();
	Debugger::GetInstance()->addPacketListener(fileService);
	BlackboardService* blackboardService = new BlackboardService();
	Debugger::GetInstance()->addPacketListener(blackboardService);
	RemoteBehavior* remoteBehavior = new RemoteBehavior();
	BodyDataService* bodyDataService = new BodyDataService(mBody,
			remoteBehavior);
	Debugger::GetInstance()->addPacketListener(bodyDataService);
	ImageService* imageService = new ImageService();
	Debugger::GetInstance()->addPacketListener(imageService);
	BotControlService* controlService = new BotControlService(mGame);
	Debugger::GetInstance()->addPacketListener(controlService);

	mGame->setBotAllowedToMove(true);
	mGame->setGameState(Game::PLAYING);

	mGameController = new GameControllerServer(mGame, OUR_TEAM_ID);
	mLEDs = new LEDs();

	srand((unsigned int) time(NULL));

	Debugger::GetInstance()->announceOwnIP();

	// Force Module manager to initialize
	ModuleManager::GetInstance();

	ModuleManager::GetInstance()->registerModule(
			new ConfigurationProvider(mBody));
	if (PBFPathName != "") {
		ModuleManager::GetInstance()->registerModule(new PBFLoader(PBFPathName, repeatList, repeatCount, panTiltFromPBF));
		ModuleManager::GetInstance()->registerModule(new VisionAnalyzer());

#ifdef USE_OPENCV
		ModuleManager::GetInstance()->registerModule(new ConvertOpenCV());
#endif
	} else {
#ifdef USE_OPENCV
		if (Config::GetBoolean("Modules", "useOpenCVCapture", false)) {
			ModuleManager::GetInstance()->registerModule(new CaptureOpenCV());
		} else {
			ModuleManager::GetInstance()->registerModule(
					new CaptureV4L2("/dev/video0"));
			ModuleManager::GetInstance()->registerModule(
					new CaptureV4L1("/dev/video0"));
		}
#else
		ModuleManager::GetInstance()->registerModule(new CaptureV4L2("/dev/video0"));
		ModuleManager::GetInstance()->registerModule(new CaptureV4L1("/dev/video0"));
#endif
	}
	ModuleManager::GetInstance()->registerModule(new Scanlines());
	ModuleManager::GetInstance()->registerModule(new BallDetection());
	//ModuleManager::GetInstance()->registerModule(new BallDetectionOpenCV());
	ModuleManager::GetInstance()->registerModule(new FieldLineDetection());
	if (Config::GetBoolean("Modules", "useVisionVisualisation", false)) {
		ModuleManager::GetInstance()->registerModule(new ConvertOpenCV());
		ModuleManager::GetInstance()->registerModule(new VisionVisualisation(),
				"", true);
	}
	ModuleManager::GetInstance()->registerModule(remoteBehavior, "Behavior");

	if(Config::GetBoolean("AI","isGoalie", false)){
		ModuleManager::GetInstance()->registerModule(new GoalieBehavior(),
						"Behavior");
	} else {
		ModuleManager::GetInstance()->registerModule(new AttackerBehavior(),
				"Behavior");
	}



	ModuleManager::GetInstance()->registerModule(new BodyController(mBody));
	ModuleManager::GetInstance()->registerModule(new GoalDetection());
	ModuleManager::GetInstance()->registerModule(new HorizonDetection());
	//ModuleManager::GetInstance()->registerModule(new RobotDetection());

	ModuleManager::GetInstance()->registerModule(new LocalModeling());

	ModuleManager::GetInstance()->registerModule(new ImageWriter);

	ModuleManager::GetInstance()->registerModule(new MJPEGStreamer);

	timeval lastLoopTime;
	gettimeofday(&lastLoopTime, 0);
	double minFPS = 9999, maxFPS = 0, meanFPS = 0;
	unsigned int FPScount = 0;
	mTerminate = false;
	while (!mTerminate) {
		mLEDs->toggle(0);
		if (mGame->isAllowedToMove()) {
			mBody->setParalysis(false);
		} else {
			Debugger::WARN("WolvesKI2",
					"Robot is currently not allowed to move!");
			mBody->setParalysis(true);
		}

		if (!ModuleManager::GetInstance()->execute()) {
			mTerminate = true;
		}

		blackboardService->sendPartialBlackboard();

		DebugDrawer::newCycle();

		timeval endTime;
		gettimeofday(&endTime, 0);

		long seconds = endTime.tv_sec - lastLoopTime.tv_sec;
		long nseconds = endTime.tv_usec - lastLoopTime.tv_usec;
		double FPS = 1.0 / (seconds + nseconds / 1000000.0);
		if (FPS > maxFPS)
			maxFPS = FPS;
		if (FPS < minFPS)
			minFPS = FPS;
		FPScount++;
		meanFPS = meanFPS - (meanFPS - FPS) / FPScount;
		lastLoopTime = endTime;

		if (FPScount % 20 == 0)
			Debugger::INFO("WolvesKI2",
					"FPS (min/mean/max/curr): %.2f/%.2f/%.2f/%.2f", minFPS,
					meanFPS, maxFPS, FPS);
		if (FPScount > 20 * 30) {
			minFPS = 9999;
			maxFPS = 0;
			meanFPS = 0;
			FPScount = 0;
		}
	}

	Debugger::addMetric("fps", "min", minFPS);
	Debugger::addMetric("fps", "max", maxFPS);
	Debugger::addMetric("fps", "mean", meanFPS);

	Debugger::INFO("WolvesKI2", "Terminating program...");
	Config::GetInstance()->setDisableChangeListeners(true);
	mBody->Stop();
	mGame->save();
	delete mGameController;
	delete mGame;
	delete mBody;
	delete mLEDs;

	delete fileService;
	delete blackboardService;
	delete bodyDataService;
	delete imageService;
	delete controlService;
	ModuleManager::GetInstance()->shutdown();
	Config::GetInstance()->shutdown();
	Debugger::GetInstance()->shutdown();
	DebugDrawer::GetInstance()->shutdown();

	return 0;
}
