/*
 * BodyStatus.cpp
 *
 *  Created on: 11.12.2012
 *      Author: Stefan Krupop
 */

#include "BodyStatus.h"
#include "ServoStatus.h"
#include "../Messages/Representations.pb.h"
#include "../Messages/OstreamOutputStream.h"
#include "../Messages/IstreamInputStream.h"
#include <math.h>

BodyStatus::BodyStatus() {
	mPan = 0;
	mTilt = 0;

	mVoltage = 0.0;

	for (unsigned char i = 0; i < 20; ++i) {
		setServoStatus(i, 0.0, 0.0, 0.0);
	}
}

BodyStatus::~BodyStatus() {
	mServoStatus.clear();
}

void BodyStatus::setPanTilt(signed char PanDeg, signed char TiltDeg) {
	mPan = PanDeg;
	mTilt = TiltDeg;
}

void BodyStatus::setVoltage(double voltage) {
	mVoltage = voltage;
}

void BodyStatus::setServoStatus(unsigned char id, double maxPositionError,
		double temperature, double voltage) {
	ServoStatus servo;
	map<int, ServoStatus>::iterator it = mServoStatus.find(id);
	if (it == mServoStatus.end()) {
		servo = ServoStatus(id);
		mServoStatus.insert(pair<int, ServoStatus>(id, servo));
	} else {
		servo = (*it).second;
	}
	servo.setStatus(maxPositionError, temperature, voltage);
	//lint -e{429} 'newSet' lost the custody
}

void Serializer<BodyStatus>::serialize(const BodyStatus& representation, ostream& stream) {
	protobuf::BodyStatus status;

	status.set_voltage(representation.getVoltage());
	status.set_pan(((double) representation.getPan() / 180) * M_PI);
	status.set_tilt(((double) representation.getTilt() / 180) * M_PI);


	const map<int, ServoStatus> lst = representation.getServos();
	for (map<int, ServoStatus>::const_iterator it = lst.begin(); it != lst.end(); ++it) {
		protobuf::ServoStatus* servoStat = status.add_servos();
		it->second.writeProtoBuf(servoStat);
	}

	OstreamOutputStream buf(&stream);
	status.SerializeToZeroCopyStream(&buf);
}

void Serializer<BodyStatus>::deserialize(istream& stream, BodyStatus& representation) {
	protobuf::BodyStatus status;

	IstreamInputStream buf(&stream);
	status.ParseFromZeroCopyStream(&buf);

	representation.setVoltage(0.0);
}
