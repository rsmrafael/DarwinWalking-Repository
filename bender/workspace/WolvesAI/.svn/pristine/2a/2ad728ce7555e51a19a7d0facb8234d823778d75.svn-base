// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Histogramm.proto

#ifndef PROTOBUF_Histogramm_2eproto__INCLUDED
#define PROTOBUF_Histogramm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Histogramm_2eproto();
void protobuf_AssignDesc_Histogramm_2eproto();
void protobuf_ShutdownFile_Histogramm_2eproto();

class Histogramm;

// ===================================================================

class Histogramm : public ::google::protobuf::MessageLite {
 public:
  Histogramm();
  virtual ~Histogramm();
  
  Histogramm(const Histogramm& from);
  
  inline Histogramm& operator=(const Histogramm& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Histogramm& default_instance();
  
  void Swap(Histogramm* other);
  
  // implements Message ----------------------------------------------
  
  Histogramm* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Histogramm& from);
  void MergeFrom(const Histogramm& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();
  
  // required int32 minValue = 2;
  inline bool has_minvalue() const;
  inline void clear_minvalue();
  static const int kMinValueFieldNumber = 2;
  inline ::google::protobuf::int32 minvalue() const;
  inline void set_minvalue(::google::protobuf::int32 value);
  
  // required int32 maxValue = 3;
  inline bool has_maxvalue() const;
  inline void clear_maxvalue();
  static const int kMaxValueFieldNumber = 3;
  inline ::google::protobuf::int32 maxvalue() const;
  inline void set_maxvalue(::google::protobuf::int32 value);
  
  // required int32 stepSize = 4;
  inline bool has_stepsize() const;
  inline void clear_stepsize();
  static const int kStepSizeFieldNumber = 4;
  inline ::google::protobuf::int32 stepsize() const;
  inline void set_stepsize(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.Histogramm)
 private:
  inline void set_has_minvalue();
  inline void clear_has_minvalue();
  inline void set_has_maxvalue();
  inline void clear_has_maxvalue();
  inline void set_has_stepsize();
  inline void clear_has_stepsize();
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;
  ::google::protobuf::int32 minvalue_;
  ::google::protobuf::int32 maxvalue_;
  ::google::protobuf::int32 stepsize_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Histogramm_2eproto();
  friend void protobuf_AssignDesc_Histogramm_2eproto();
  friend void protobuf_ShutdownFile_Histogramm_2eproto();
  
  void InitAsDefaultInstance();
  static Histogramm* default_instance_;
};
// ===================================================================


// ===================================================================

// Histogramm

// repeated int32 value = 1;
inline int Histogramm::value_size() const {
  return value_.size();
}
inline void Histogramm::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 Histogramm::value(int index) const {
  return value_.Get(index);
}
inline void Histogramm::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
}
inline void Histogramm::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Histogramm::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Histogramm::mutable_value() {
  return &value_;
}

// required int32 minValue = 2;
inline bool Histogramm::has_minvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Histogramm::set_has_minvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Histogramm::clear_has_minvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Histogramm::clear_minvalue() {
  minvalue_ = 0;
  clear_has_minvalue();
}
inline ::google::protobuf::int32 Histogramm::minvalue() const {
  return minvalue_;
}
inline void Histogramm::set_minvalue(::google::protobuf::int32 value) {
  set_has_minvalue();
  minvalue_ = value;
}

// required int32 maxValue = 3;
inline bool Histogramm::has_maxvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Histogramm::set_has_maxvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Histogramm::clear_has_maxvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Histogramm::clear_maxvalue() {
  maxvalue_ = 0;
  clear_has_maxvalue();
}
inline ::google::protobuf::int32 Histogramm::maxvalue() const {
  return maxvalue_;
}
inline void Histogramm::set_maxvalue(::google::protobuf::int32 value) {
  set_has_maxvalue();
  maxvalue_ = value;
}

// required int32 stepSize = 4;
inline bool Histogramm::has_stepsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Histogramm::set_has_stepsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Histogramm::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Histogramm::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
inline ::google::protobuf::int32 Histogramm::stepsize() const {
  return stepsize_;
}
inline void Histogramm::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Histogramm_2eproto__INCLUDED
