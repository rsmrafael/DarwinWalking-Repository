// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HistogramServiceCommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

void protobuf_ShutdownFile_HistogramServiceCommand_2eproto() {
  delete HistogramServiceCommand::default_instance_;
}

void protobuf_AddDesc_HistogramServiceCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  HistogramServiceCommand::default_instance_ = new HistogramServiceCommand();
  HistogramServiceCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HistogramServiceCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HistogramServiceCommand_2eproto {
  StaticDescriptorInitializer_HistogramServiceCommand_2eproto() {
    protobuf_AddDesc_HistogramServiceCommand_2eproto();
  }
} static_descriptor_initializer_HistogramServiceCommand_2eproto_;


// ===================================================================

bool HistogramServiceCommand_ServiceAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HistogramServiceCommand_ServiceAction HistogramServiceCommand::SAVE_OPPONENT;
const HistogramServiceCommand_ServiceAction HistogramServiceCommand::SAVE_OWN;
const HistogramServiceCommand_ServiceAction HistogramServiceCommand::DELETE_ALL;
const HistogramServiceCommand_ServiceAction HistogramServiceCommand::ServiceAction_MIN;
const HistogramServiceCommand_ServiceAction HistogramServiceCommand::ServiceAction_MAX;
const int HistogramServiceCommand::ServiceAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int HistogramServiceCommand::kDesiredActionFieldNumber;
#endif  // !_MSC_VER

HistogramServiceCommand::HistogramServiceCommand()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void HistogramServiceCommand::InitAsDefaultInstance() {
}

HistogramServiceCommand::HistogramServiceCommand(const HistogramServiceCommand& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void HistogramServiceCommand::SharedCtor() {
  _cached_size_ = 0;
  desiredaction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistogramServiceCommand::~HistogramServiceCommand() {
  SharedDtor();
}

void HistogramServiceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistogramServiceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HistogramServiceCommand& HistogramServiceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HistogramServiceCommand_2eproto();  return *default_instance_;
}

HistogramServiceCommand* HistogramServiceCommand::default_instance_ = NULL;

HistogramServiceCommand* HistogramServiceCommand::New() const {
  return new HistogramServiceCommand;
}

void HistogramServiceCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desiredaction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool HistogramServiceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.HistogramServiceCommand.ServiceAction desiredAction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::HistogramServiceCommand_ServiceAction_IsValid(value)) {
            set_desiredaction(static_cast< ::protobuf::HistogramServiceCommand_ServiceAction >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistogramServiceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.HistogramServiceCommand.ServiceAction desiredAction = 1;
  if (has_desiredaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->desiredaction(), output);
  }
  
}

int HistogramServiceCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.HistogramServiceCommand.ServiceAction desiredAction = 1;
    if (has_desiredaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->desiredaction());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistogramServiceCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HistogramServiceCommand*>(&from));
}

void HistogramServiceCommand::MergeFrom(const HistogramServiceCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desiredaction()) {
      set_desiredaction(from.desiredaction());
    }
  }
}

void HistogramServiceCommand::CopyFrom(const HistogramServiceCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramServiceCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HistogramServiceCommand::Swap(HistogramServiceCommand* other) {
  if (other != this) {
    std::swap(desiredaction_, other->desiredaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HistogramServiceCommand::GetTypeName() const {
  return "protobuf.HistogramServiceCommand";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
