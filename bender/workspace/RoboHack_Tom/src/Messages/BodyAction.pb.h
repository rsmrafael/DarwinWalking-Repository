// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BodyAction.proto

#ifndef PROTOBUF_BodyAction_2eproto__INCLUDED
#define PROTOBUF_BodyAction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "Point3D.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BodyAction_2eproto();
void protobuf_AssignDesc_BodyAction_2eproto();
void protobuf_ShutdownFile_BodyAction_2eproto();

class BodyAction;

enum BodyAction_StaticMotion {
  BodyAction_StaticMotion_Stop = 0,
  BodyAction_StaticMotion_KickLeft = 6,
  BodyAction_StaticMotion_KickRight = 7,
  BodyAction_StaticMotion_CancelKick = 8,
  BodyAction_StaticMotion_GoaliMoveLeft = 11,
  BodyAction_StaticMotion_GoaliMoveRight = 12,
  BodyAction_StaticMotion_MoveHi = 14,
  BodyAction_StaticMotion_YeahGoal = 15,
  BodyAction_StaticMotion_RaiseLeftHand = 32,
  BodyAction_StaticMotion_RaiseRightHand = 33,
  BodyAction_StaticMotion_RaiseBothHands = 34,
  BodyAction_StaticMotion_KickToTarget = 50,
  BodyAction_StaticMotion_KickBall = 51,
  BodyAction_StaticMotion_KickAdvanced = 52
};
bool BodyAction_StaticMotion_IsValid(int value);
const BodyAction_StaticMotion BodyAction_StaticMotion_StaticMotion_MIN = BodyAction_StaticMotion_Stop;
const BodyAction_StaticMotion BodyAction_StaticMotion_StaticMotion_MAX = BodyAction_StaticMotion_KickAdvanced;
const int BodyAction_StaticMotion_StaticMotion_ARRAYSIZE = BodyAction_StaticMotion_StaticMotion_MAX + 1;

// ===================================================================

class BodyAction : public ::google::protobuf::MessageLite {
 public:
  BodyAction();
  virtual ~BodyAction();
  
  BodyAction(const BodyAction& from);
  
  inline BodyAction& operator=(const BodyAction& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BodyAction& default_instance();
  
  void Swap(BodyAction* other);
  
  // implements Message ----------------------------------------------
  
  BodyAction* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BodyAction& from);
  void MergeFrom(const BodyAction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef BodyAction_StaticMotion StaticMotion;
  static const StaticMotion Stop = BodyAction_StaticMotion_Stop;
  static const StaticMotion KickLeft = BodyAction_StaticMotion_KickLeft;
  static const StaticMotion KickRight = BodyAction_StaticMotion_KickRight;
  static const StaticMotion CancelKick = BodyAction_StaticMotion_CancelKick;
  static const StaticMotion GoaliMoveLeft = BodyAction_StaticMotion_GoaliMoveLeft;
  static const StaticMotion GoaliMoveRight = BodyAction_StaticMotion_GoaliMoveRight;
  static const StaticMotion MoveHi = BodyAction_StaticMotion_MoveHi;
  static const StaticMotion YeahGoal = BodyAction_StaticMotion_YeahGoal;
  static const StaticMotion RaiseLeftHand = BodyAction_StaticMotion_RaiseLeftHand;
  static const StaticMotion RaiseRightHand = BodyAction_StaticMotion_RaiseRightHand;
  static const StaticMotion RaiseBothHands = BodyAction_StaticMotion_RaiseBothHands;
  static const StaticMotion KickToTarget = BodyAction_StaticMotion_KickToTarget;
  static const StaticMotion KickBall = BodyAction_StaticMotion_KickBall;
  static const StaticMotion KickAdvanced = BodyAction_StaticMotion_KickAdvanced;
  static inline bool StaticMotion_IsValid(int value) {
    return BodyAction_StaticMotion_IsValid(value);
  }
  static const StaticMotion StaticMotion_MIN =
    BodyAction_StaticMotion_StaticMotion_MIN;
  static const StaticMotion StaticMotion_MAX =
    BodyAction_StaticMotion_StaticMotion_MAX;
  static const int StaticMotion_ARRAYSIZE =
    BodyAction_StaticMotion_StaticMotion_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // required bool WalkerCommand = 1;
  inline bool has_walkercommand() const;
  inline void clear_walkercommand();
  static const int kWalkerCommandFieldNumber = 1;
  inline bool walkercommand() const;
  inline void set_walkercommand(bool value);
  
  // optional sint32 WalkerX = 2;
  inline bool has_walkerx() const;
  inline void clear_walkerx();
  static const int kWalkerXFieldNumber = 2;
  inline ::google::protobuf::int32 walkerx() const;
  inline void set_walkerx(::google::protobuf::int32 value);
  
  // optional sint32 WalkerY = 3;
  inline bool has_walkery() const;
  inline void clear_walkery();
  static const int kWalkerYFieldNumber = 3;
  inline ::google::protobuf::int32 walkery() const;
  inline void set_walkery(::google::protobuf::int32 value);
  
  // optional sint32 WalkerR = 4;
  inline bool has_walkerr() const;
  inline void clear_walkerr();
  static const int kWalkerRFieldNumber = 4;
  inline ::google::protobuf::int32 walkerr() const;
  inline void set_walkerr(::google::protobuf::int32 value);
  
  // optional bool WalkerTurningAim = 5;
  inline bool has_walkerturningaim() const;
  inline void clear_walkerturningaim();
  static const int kWalkerTurningAimFieldNumber = 5;
  inline bool walkerturningaim() const;
  inline void set_walkerturningaim(bool value);
  
  // optional .protobuf.BodyAction.StaticMotion Motion = 6;
  inline bool has_motion() const;
  inline void clear_motion();
  static const int kMotionFieldNumber = 6;
  inline ::protobuf::BodyAction_StaticMotion motion() const;
  inline void set_motion(::protobuf::BodyAction_StaticMotion value);
  
  // optional .protobuf.Point3D Ball = 7;
  inline bool has_ball() const;
  inline void clear_ball();
  static const int kBallFieldNumber = 7;
  inline const ::protobuf::Point3D& ball() const;
  inline ::protobuf::Point3D* mutable_ball();
  inline ::protobuf::Point3D* release_ball();
  
  // optional .protobuf.Point3D Target = 8;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 8;
  inline const ::protobuf::Point3D& target() const;
  inline ::protobuf::Point3D* mutable_target();
  inline ::protobuf::Point3D* release_target();
  
  // @@protoc_insertion_point(class_scope:protobuf.BodyAction)
 private:
  inline void set_has_walkercommand();
  inline void clear_has_walkercommand();
  inline void set_has_walkerx();
  inline void clear_has_walkerx();
  inline void set_has_walkery();
  inline void clear_has_walkery();
  inline void set_has_walkerr();
  inline void clear_has_walkerr();
  inline void set_has_walkerturningaim();
  inline void clear_has_walkerturningaim();
  inline void set_has_motion();
  inline void clear_has_motion();
  inline void set_has_ball();
  inline void clear_has_ball();
  inline void set_has_target();
  inline void clear_has_target();
  
  ::google::protobuf::int32 walkerx_;
  ::google::protobuf::int32 walkery_;
  bool walkercommand_;
  bool walkerturningaim_;
  ::google::protobuf::int32 walkerr_;
  ::protobuf::Point3D* ball_;
  ::protobuf::Point3D* target_;
  int motion_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_BodyAction_2eproto();
  friend void protobuf_AssignDesc_BodyAction_2eproto();
  friend void protobuf_ShutdownFile_BodyAction_2eproto();
  
  void InitAsDefaultInstance();
  static BodyAction* default_instance_;
};
// ===================================================================


// ===================================================================

// BodyAction

// required bool WalkerCommand = 1;
inline bool BodyAction::has_walkercommand() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyAction::set_has_walkercommand() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyAction::clear_has_walkercommand() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyAction::clear_walkercommand() {
  walkercommand_ = false;
  clear_has_walkercommand();
}
inline bool BodyAction::walkercommand() const {
  return walkercommand_;
}
inline void BodyAction::set_walkercommand(bool value) {
  set_has_walkercommand();
  walkercommand_ = value;
}

// optional sint32 WalkerX = 2;
inline bool BodyAction::has_walkerx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BodyAction::set_has_walkerx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BodyAction::clear_has_walkerx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BodyAction::clear_walkerx() {
  walkerx_ = 0;
  clear_has_walkerx();
}
inline ::google::protobuf::int32 BodyAction::walkerx() const {
  return walkerx_;
}
inline void BodyAction::set_walkerx(::google::protobuf::int32 value) {
  set_has_walkerx();
  walkerx_ = value;
}

// optional sint32 WalkerY = 3;
inline bool BodyAction::has_walkery() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BodyAction::set_has_walkery() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BodyAction::clear_has_walkery() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BodyAction::clear_walkery() {
  walkery_ = 0;
  clear_has_walkery();
}
inline ::google::protobuf::int32 BodyAction::walkery() const {
  return walkery_;
}
inline void BodyAction::set_walkery(::google::protobuf::int32 value) {
  set_has_walkery();
  walkery_ = value;
}

// optional sint32 WalkerR = 4;
inline bool BodyAction::has_walkerr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BodyAction::set_has_walkerr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BodyAction::clear_has_walkerr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BodyAction::clear_walkerr() {
  walkerr_ = 0;
  clear_has_walkerr();
}
inline ::google::protobuf::int32 BodyAction::walkerr() const {
  return walkerr_;
}
inline void BodyAction::set_walkerr(::google::protobuf::int32 value) {
  set_has_walkerr();
  walkerr_ = value;
}

// optional bool WalkerTurningAim = 5;
inline bool BodyAction::has_walkerturningaim() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BodyAction::set_has_walkerturningaim() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BodyAction::clear_has_walkerturningaim() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BodyAction::clear_walkerturningaim() {
  walkerturningaim_ = false;
  clear_has_walkerturningaim();
}
inline bool BodyAction::walkerturningaim() const {
  return walkerturningaim_;
}
inline void BodyAction::set_walkerturningaim(bool value) {
  set_has_walkerturningaim();
  walkerturningaim_ = value;
}

// optional .protobuf.BodyAction.StaticMotion Motion = 6;
inline bool BodyAction::has_motion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BodyAction::set_has_motion() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BodyAction::clear_has_motion() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BodyAction::clear_motion() {
  motion_ = 0;
  clear_has_motion();
}
inline ::protobuf::BodyAction_StaticMotion BodyAction::motion() const {
  return static_cast< ::protobuf::BodyAction_StaticMotion >(motion_);
}
inline void BodyAction::set_motion(::protobuf::BodyAction_StaticMotion value) {
  GOOGLE_DCHECK(::protobuf::BodyAction_StaticMotion_IsValid(value));
  set_has_motion();
  motion_ = value;
}

// optional .protobuf.Point3D Ball = 7;
inline bool BodyAction::has_ball() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BodyAction::set_has_ball() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BodyAction::clear_has_ball() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BodyAction::clear_ball() {
  if (ball_ != NULL) ball_->::protobuf::Point3D::Clear();
  clear_has_ball();
}
inline const ::protobuf::Point3D& BodyAction::ball() const {
  return ball_ != NULL ? *ball_ : *default_instance_->ball_;
}
inline ::protobuf::Point3D* BodyAction::mutable_ball() {
  set_has_ball();
  if (ball_ == NULL) ball_ = new ::protobuf::Point3D;
  return ball_;
}
inline ::protobuf::Point3D* BodyAction::release_ball() {
  clear_has_ball();
  ::protobuf::Point3D* temp = ball_;
  ball_ = NULL;
  return temp;
}

// optional .protobuf.Point3D Target = 8;
inline bool BodyAction::has_target() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BodyAction::set_has_target() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BodyAction::clear_has_target() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BodyAction::clear_target() {
  if (target_ != NULL) target_->::protobuf::Point3D::Clear();
  clear_has_target();
}
inline const ::protobuf::Point3D& BodyAction::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::protobuf::Point3D* BodyAction::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::protobuf::Point3D;
  return target_;
}
inline ::protobuf::Point3D* BodyAction::release_target() {
  clear_has_target();
  ::protobuf::Point3D* temp = target_;
  target_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BodyAction_2eproto__INCLUDED
