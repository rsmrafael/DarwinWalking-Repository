// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Blackboard.proto

#ifndef PROTOBUF_Blackboard_2eproto__INCLUDED
#define PROTOBUF_Blackboard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Blackboard_2eproto();
void protobuf_AssignDesc_Blackboard_2eproto();
void protobuf_ShutdownFile_Blackboard_2eproto();

class Blackboard;
class Blackboard_Representation;

// ===================================================================

class Blackboard_Representation : public ::google::protobuf::MessageLite {
 public:
  Blackboard_Representation();
  virtual ~Blackboard_Representation();
  
  Blackboard_Representation(const Blackboard_Representation& from);
  
  inline Blackboard_Representation& operator=(const Blackboard_Representation& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Blackboard_Representation& default_instance();
  
  void Swap(Blackboard_Representation* other);
  
  // implements Message ----------------------------------------------
  
  Blackboard_Representation* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Blackboard_Representation& from);
  void MergeFrom(const Blackboard_Representation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:protobuf.Blackboard.Representation)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::std::string* name_;
  ::std::string* type_;
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Blackboard_2eproto();
  friend void protobuf_AssignDesc_Blackboard_2eproto();
  friend void protobuf_ShutdownFile_Blackboard_2eproto();
  
  void InitAsDefaultInstance();
  static Blackboard_Representation* default_instance_;
};
// -------------------------------------------------------------------

class Blackboard : public ::google::protobuf::MessageLite {
 public:
  Blackboard();
  virtual ~Blackboard();
  
  Blackboard(const Blackboard& from);
  
  inline Blackboard& operator=(const Blackboard& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Blackboard& default_instance();
  
  void Swap(Blackboard* other);
  
  // implements Message ----------------------------------------------
  
  Blackboard* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Blackboard& from);
  void MergeFrom(const Blackboard& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef Blackboard_Representation Representation;
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.Blackboard.Representation representations = 1;
  inline int representations_size() const;
  inline void clear_representations();
  static const int kRepresentationsFieldNumber = 1;
  inline const ::protobuf::Blackboard_Representation& representations(int index) const;
  inline ::protobuf::Blackboard_Representation* mutable_representations(int index);
  inline ::protobuf::Blackboard_Representation* add_representations();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Blackboard_Representation >&
      representations() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::Blackboard_Representation >*
      mutable_representations();
  
  // @@protoc_insertion_point(class_scope:protobuf.Blackboard)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::Blackboard_Representation > representations_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Blackboard_2eproto();
  friend void protobuf_AssignDesc_Blackboard_2eproto();
  friend void protobuf_ShutdownFile_Blackboard_2eproto();
  
  void InitAsDefaultInstance();
  static Blackboard* default_instance_;
};
// ===================================================================


// ===================================================================

// Blackboard_Representation

// required string name = 1;
inline bool Blackboard_Representation::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Blackboard_Representation::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Blackboard_Representation::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Blackboard_Representation::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Blackboard_Representation::name() const {
  return *name_;
}
inline void Blackboard_Representation::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Blackboard_Representation::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Blackboard_Representation::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Blackboard_Representation::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Blackboard_Representation::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string type = 2;
inline bool Blackboard_Representation::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Blackboard_Representation::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Blackboard_Representation::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Blackboard_Representation::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Blackboard_Representation::type() const {
  return *type_;
}
inline void Blackboard_Representation::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Blackboard_Representation::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Blackboard_Representation::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Blackboard_Representation::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Blackboard_Representation::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes data = 3;
inline bool Blackboard_Representation::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Blackboard_Representation::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Blackboard_Representation::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Blackboard_Representation::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Blackboard_Representation::data() const {
  return *data_;
}
inline void Blackboard_Representation::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Blackboard_Representation::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Blackboard_Representation::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Blackboard_Representation::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Blackboard_Representation::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Blackboard

// repeated .protobuf.Blackboard.Representation representations = 1;
inline int Blackboard::representations_size() const {
  return representations_.size();
}
inline void Blackboard::clear_representations() {
  representations_.Clear();
}
inline const ::protobuf::Blackboard_Representation& Blackboard::representations(int index) const {
  return representations_.Get(index);
}
inline ::protobuf::Blackboard_Representation* Blackboard::mutable_representations(int index) {
  return representations_.Mutable(index);
}
inline ::protobuf::Blackboard_Representation* Blackboard::add_representations() {
  return representations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Blackboard_Representation >&
Blackboard::representations() const {
  return representations_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::Blackboard_Representation >*
Blackboard::mutable_representations() {
  return &representations_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Blackboard_2eproto__INCLUDED
