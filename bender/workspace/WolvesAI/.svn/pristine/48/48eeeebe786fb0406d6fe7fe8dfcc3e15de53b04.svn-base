// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BodyStatus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

void protobuf_ShutdownFile_BodyStatus_2eproto() {
  delete BodyStatus::default_instance_;
}

void protobuf_AddDesc_BodyStatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::protobuf_AddDesc_ServoStatus_2eproto();
  BodyStatus::default_instance_ = new BodyStatus();
  BodyStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BodyStatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BodyStatus_2eproto {
  StaticDescriptorInitializer_BodyStatus_2eproto() {
    protobuf_AddDesc_BodyStatus_2eproto();
  }
} static_descriptor_initializer_BodyStatus_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BodyStatus::kPanFieldNumber;
const int BodyStatus::kTiltFieldNumber;
const int BodyStatus::kVoltageFieldNumber;
const int BodyStatus::kServosFieldNumber;
#endif  // !_MSC_VER

BodyStatus::BodyStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BodyStatus::InitAsDefaultInstance() {
}

BodyStatus::BodyStatus(const BodyStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BodyStatus::SharedCtor() {
  _cached_size_ = 0;
  pan_ = 0;
  tilt_ = 0;
  voltage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyStatus::~BodyStatus() {
  SharedDtor();
}

void BodyStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BodyStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BodyStatus& BodyStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BodyStatus_2eproto();  return *default_instance_;
}

BodyStatus* BodyStatus::default_instance_ = NULL;

BodyStatus* BodyStatus::New() const {
  return new BodyStatus;
}

void BodyStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pan_ = 0;
    tilt_ = 0;
    voltage_ = 0;
  }
  servos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BodyStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double pan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pan_)));
          set_has_pan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_tilt;
        break;
      }
      
      // optional double tilt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tilt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tilt_)));
          set_has_tilt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_voltage;
        break;
      }
      
      // required double voltage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voltage_)));
          set_has_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_servos;
        break;
      }
      
      // repeated .protobuf.ServoStatus servos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_servos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BodyStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double pan = 1;
  if (has_pan()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pan(), output);
  }
  
  // optional double tilt = 2;
  if (has_tilt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tilt(), output);
  }
  
  // required double voltage = 3;
  if (has_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->voltage(), output);
  }
  
  // repeated .protobuf.ServoStatus servos = 4;
  for (int i = 0; i < this->servos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->servos(i), output);
  }
  
}

int BodyStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double pan = 1;
    if (has_pan()) {
      total_size += 1 + 8;
    }
    
    // optional double tilt = 2;
    if (has_tilt()) {
      total_size += 1 + 8;
    }
    
    // required double voltage = 3;
    if (has_voltage()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .protobuf.ServoStatus servos = 4;
  total_size += 1 * this->servos_size();
  for (int i = 0; i < this->servos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servos(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BodyStatus*>(&from));
}

void BodyStatus::MergeFrom(const BodyStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  servos_.MergeFrom(from.servos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pan()) {
      set_pan(from.pan());
    }
    if (from.has_tilt()) {
      set_tilt(from.tilt());
    }
    if (from.has_voltage()) {
      set_voltage(from.voltage());
    }
  }
}

void BodyStatus::CopyFrom(const BodyStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < servos_size(); i++) {
    if (!this->servos(i).IsInitialized()) return false;
  }
  return true;
}

void BodyStatus::Swap(BodyStatus* other) {
  if (other != this) {
    std::swap(pan_, other->pan_);
    std::swap(tilt_, other->tilt_);
    std::swap(voltage_, other->voltage_);
    servos_.Swap(&other->servos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BodyStatus::GetTypeName() const {
  return "protobuf.BodyStatus";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
