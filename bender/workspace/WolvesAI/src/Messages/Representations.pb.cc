// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Representations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

void protobuf_ShutdownFile_Representations_2eproto() {
  delete YUVImage::default_instance_;
  delete CameraSettings::default_instance_;
}

void protobuf_AddDesc_Representations_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  YUVImage::default_instance_ = new YUVImage();
  CameraSettings::default_instance_ = new CameraSettings();
  YUVImage::default_instance_->InitAsDefaultInstance();
  CameraSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Representations_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Representations_2eproto {
  StaticDescriptorInitializer_Representations_2eproto() {
    protobuf_AddDesc_Representations_2eproto();
  }
} static_descriptor_initializer_Representations_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int YUVImage::kDataFieldNumber;
const int YUVImage::kWidthFieldNumber;
const int YUVImage::kHeightFieldNumber;
#endif  // !_MSC_VER

YUVImage::YUVImage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void YUVImage::InitAsDefaultInstance() {
}

YUVImage::YUVImage(const YUVImage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void YUVImage::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_ = 320;
  height_ = 240;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YUVImage::~YUVImage() {
  SharedDtor();
}

void YUVImage::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void YUVImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YUVImage& YUVImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

YUVImage* YUVImage::default_instance_ = NULL;

YUVImage* YUVImage::New() const {
  return new YUVImage;
}

void YUVImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    width_ = 320;
    height_ = 240;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool YUVImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // optional int32 width = 2 [default = 320];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // optional int32 height = 3 [default = 240];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YUVImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  // optional int32 width = 2 [default = 320];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }
  
  // optional int32 height = 3 [default = 240];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }
  
}

int YUVImage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional int32 width = 2 [default = 320];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // optional int32 height = 3 [default = 240];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YUVImage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const YUVImage*>(&from));
}

void YUVImage::MergeFrom(const YUVImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
}

void YUVImage::CopyFrom(const YUVImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YUVImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void YUVImage::Swap(YUVImage* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string YUVImage::GetTypeName() const {
  return "protobuf.YUVImage";
}


// ===================================================================

#ifndef _MSC_VER
const int CameraSettings::kWidthFieldNumber;
const int CameraSettings::kHeightFieldNumber;
const int CameraSettings::kFrameIntervalNumeratorFieldNumber;
const int CameraSettings::kFrameIntervalDenominatorFieldNumber;
const int CameraSettings::kBrightnessFieldNumber;
const int CameraSettings::kContrastFieldNumber;
const int CameraSettings::kSaturationFieldNumber;
const int CameraSettings::kAutohueFieldNumber;
const int CameraSettings::kHueFieldNumber;
const int CameraSettings::kAutowhitebalanceFieldNumber;
const int CameraSettings::kRedbalanceFieldNumber;
const int CameraSettings::kBluebalanceFieldNumber;
const int CameraSettings::kGammaFieldNumber;
const int CameraSettings::kExposureFieldNumber;
const int CameraSettings::kAutogainFieldNumber;
const int CameraSettings::kGainFieldNumber;
const int CameraSettings::kSharpnessFieldNumber;
const int CameraSettings::kPowerlinefreqFieldNumber;
const int CameraSettings::kWhitebalancetempFieldNumber;
const int CameraSettings::kBacklightcompensationFieldNumber;
const int CameraSettings::kAutoexposureFieldNumber;
#endif  // !_MSC_VER

CameraSettings::CameraSettings()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CameraSettings::InitAsDefaultInstance() {
}

CameraSettings::CameraSettings(const CameraSettings& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CameraSettings::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  frameintervalnumerator_ = 0;
  frameintervaldenominator_ = 0;
  brightness_ = 0;
  contrast_ = 0;
  saturation_ = 0;
  autohue_ = 0;
  hue_ = 0;
  autowhitebalance_ = 0;
  redbalance_ = 0;
  bluebalance_ = 0;
  gamma_ = 0;
  exposure_ = 0;
  autogain_ = 0;
  gain_ = 0;
  sharpness_ = 0;
  powerlinefreq_ = 0;
  whitebalancetemp_ = 0;
  backlightcompensation_ = 0;
  autoexposure_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraSettings::~CameraSettings() {
  SharedDtor();
}

void CameraSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CameraSettings& CameraSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Representations_2eproto();  return *default_instance_;
}

CameraSettings* CameraSettings::default_instance_ = NULL;

CameraSettings* CameraSettings::New() const {
  return new CameraSettings;
}

void CameraSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
    frameintervalnumerator_ = 0;
    frameintervaldenominator_ = 0;
    brightness_ = 0;
    contrast_ = 0;
    saturation_ = 0;
    autohue_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hue_ = 0;
    autowhitebalance_ = 0;
    redbalance_ = 0;
    bluebalance_ = 0;
    gamma_ = 0;
    exposure_ = 0;
    autogain_ = 0;
    gain_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sharpness_ = 0;
    powerlinefreq_ = 0;
    whitebalancetemp_ = 0;
    backlightcompensation_ = 0;
    autoexposure_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CameraSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }
      
      // required int32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frameIntervalNumerator;
        break;
      }
      
      // optional int32 frameIntervalNumerator = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameIntervalNumerator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameintervalnumerator_)));
          set_has_frameintervalnumerator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_frameIntervalDenominator;
        break;
      }
      
      // optional int32 frameIntervalDenominator = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameIntervalDenominator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameintervaldenominator_)));
          set_has_frameintervaldenominator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_brightness;
        break;
      }
      
      // optional double brightness = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_brightness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brightness_)));
          set_has_brightness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_contrast;
        break;
      }
      
      // optional double contrast = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_contrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contrast_)));
          set_has_contrast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_saturation;
        break;
      }
      
      // optional double saturation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_saturation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &saturation_)));
          set_has_saturation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_autohue;
        break;
      }
      
      // optional double autohue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_autohue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &autohue_)));
          set_has_autohue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_hue;
        break;
      }
      
      // optional double hue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hue_)));
          set_has_hue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_autowhitebalance;
        break;
      }
      
      // optional double autowhitebalance = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_autowhitebalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &autowhitebalance_)));
          set_has_autowhitebalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_redbalance;
        break;
      }
      
      // optional double redbalance = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_redbalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &redbalance_)));
          set_has_redbalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_bluebalance;
        break;
      }
      
      // optional double bluebalance = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bluebalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bluebalance_)));
          set_has_bluebalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_gamma;
        break;
      }
      
      // optional double gamma = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_exposure;
        break;
      }
      
      // optional double exposure = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_exposure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exposure_)));
          set_has_exposure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_autogain;
        break;
      }
      
      // optional double autogain = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_autogain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &autogain_)));
          set_has_autogain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_gain;
        break;
      }
      
      // optional double gain = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_sharpness;
        break;
      }
      
      // optional double sharpness = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sharpness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sharpness_)));
          set_has_sharpness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_powerlinefreq;
        break;
      }
      
      // optional double powerlinefreq = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_powerlinefreq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &powerlinefreq_)));
          set_has_powerlinefreq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_whitebalancetemp;
        break;
      }
      
      // optional double whitebalancetemp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_whitebalancetemp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &whitebalancetemp_)));
          set_has_whitebalancetemp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_backlightcompensation;
        break;
      }
      
      // optional double backlightcompensation = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_backlightcompensation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backlightcompensation_)));
          set_has_backlightcompensation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_autoexposure;
        break;
      }
      
      // optional double autoexposure = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_autoexposure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &autoexposure_)));
          set_has_autoexposure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }
  
  // required int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }
  
  // optional int32 frameIntervalNumerator = 3;
  if (has_frameintervalnumerator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frameintervalnumerator(), output);
  }
  
  // optional int32 frameIntervalDenominator = 4;
  if (has_frameintervaldenominator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frameintervaldenominator(), output);
  }
  
  // optional double brightness = 5;
  if (has_brightness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->brightness(), output);
  }
  
  // optional double contrast = 6;
  if (has_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->contrast(), output);
  }
  
  // optional double saturation = 7;
  if (has_saturation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->saturation(), output);
  }
  
  // optional double autohue = 8;
  if (has_autohue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->autohue(), output);
  }
  
  // optional double hue = 9;
  if (has_hue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->hue(), output);
  }
  
  // optional double autowhitebalance = 10;
  if (has_autowhitebalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->autowhitebalance(), output);
  }
  
  // optional double redbalance = 11;
  if (has_redbalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->redbalance(), output);
  }
  
  // optional double bluebalance = 12;
  if (has_bluebalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->bluebalance(), output);
  }
  
  // optional double gamma = 13;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->gamma(), output);
  }
  
  // optional double exposure = 14;
  if (has_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->exposure(), output);
  }
  
  // optional double autogain = 15;
  if (has_autogain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->autogain(), output);
  }
  
  // optional double gain = 16;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->gain(), output);
  }
  
  // optional double sharpness = 17;
  if (has_sharpness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->sharpness(), output);
  }
  
  // optional double powerlinefreq = 18;
  if (has_powerlinefreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->powerlinefreq(), output);
  }
  
  // optional double whitebalancetemp = 19;
  if (has_whitebalancetemp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->whitebalancetemp(), output);
  }
  
  // optional double backlightcompensation = 20;
  if (has_backlightcompensation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->backlightcompensation(), output);
  }
  
  // optional double autoexposure = 21;
  if (has_autoexposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->autoexposure(), output);
  }
  
}

int CameraSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // optional int32 frameIntervalNumerator = 3;
    if (has_frameintervalnumerator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameintervalnumerator());
    }
    
    // optional int32 frameIntervalDenominator = 4;
    if (has_frameintervaldenominator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameintervaldenominator());
    }
    
    // optional double brightness = 5;
    if (has_brightness()) {
      total_size += 1 + 8;
    }
    
    // optional double contrast = 6;
    if (has_contrast()) {
      total_size += 1 + 8;
    }
    
    // optional double saturation = 7;
    if (has_saturation()) {
      total_size += 1 + 8;
    }
    
    // optional double autohue = 8;
    if (has_autohue()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double hue = 9;
    if (has_hue()) {
      total_size += 1 + 8;
    }
    
    // optional double autowhitebalance = 10;
    if (has_autowhitebalance()) {
      total_size += 1 + 8;
    }
    
    // optional double redbalance = 11;
    if (has_redbalance()) {
      total_size += 1 + 8;
    }
    
    // optional double bluebalance = 12;
    if (has_bluebalance()) {
      total_size += 1 + 8;
    }
    
    // optional double gamma = 13;
    if (has_gamma()) {
      total_size += 1 + 8;
    }
    
    // optional double exposure = 14;
    if (has_exposure()) {
      total_size += 1 + 8;
    }
    
    // optional double autogain = 15;
    if (has_autogain()) {
      total_size += 1 + 8;
    }
    
    // optional double gain = 16;
    if (has_gain()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double sharpness = 17;
    if (has_sharpness()) {
      total_size += 2 + 8;
    }
    
    // optional double powerlinefreq = 18;
    if (has_powerlinefreq()) {
      total_size += 2 + 8;
    }
    
    // optional double whitebalancetemp = 19;
    if (has_whitebalancetemp()) {
      total_size += 2 + 8;
    }
    
    // optional double backlightcompensation = 20;
    if (has_backlightcompensation()) {
      total_size += 2 + 8;
    }
    
    // optional double autoexposure = 21;
    if (has_autoexposure()) {
      total_size += 2 + 8;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraSettings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CameraSettings*>(&from));
}

void CameraSettings::MergeFrom(const CameraSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_frameintervalnumerator()) {
      set_frameintervalnumerator(from.frameintervalnumerator());
    }
    if (from.has_frameintervaldenominator()) {
      set_frameintervaldenominator(from.frameintervaldenominator());
    }
    if (from.has_brightness()) {
      set_brightness(from.brightness());
    }
    if (from.has_contrast()) {
      set_contrast(from.contrast());
    }
    if (from.has_saturation()) {
      set_saturation(from.saturation());
    }
    if (from.has_autohue()) {
      set_autohue(from.autohue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hue()) {
      set_hue(from.hue());
    }
    if (from.has_autowhitebalance()) {
      set_autowhitebalance(from.autowhitebalance());
    }
    if (from.has_redbalance()) {
      set_redbalance(from.redbalance());
    }
    if (from.has_bluebalance()) {
      set_bluebalance(from.bluebalance());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_exposure()) {
      set_exposure(from.exposure());
    }
    if (from.has_autogain()) {
      set_autogain(from.autogain());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sharpness()) {
      set_sharpness(from.sharpness());
    }
    if (from.has_powerlinefreq()) {
      set_powerlinefreq(from.powerlinefreq());
    }
    if (from.has_whitebalancetemp()) {
      set_whitebalancetemp(from.whitebalancetemp());
    }
    if (from.has_backlightcompensation()) {
      set_backlightcompensation(from.backlightcompensation());
    }
    if (from.has_autoexposure()) {
      set_autoexposure(from.autoexposure());
    }
  }
}

void CameraSettings::CopyFrom(const CameraSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CameraSettings::Swap(CameraSettings* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(frameintervalnumerator_, other->frameintervalnumerator_);
    std::swap(frameintervaldenominator_, other->frameintervaldenominator_);
    std::swap(brightness_, other->brightness_);
    std::swap(contrast_, other->contrast_);
    std::swap(saturation_, other->saturation_);
    std::swap(autohue_, other->autohue_);
    std::swap(hue_, other->hue_);
    std::swap(autowhitebalance_, other->autowhitebalance_);
    std::swap(redbalance_, other->redbalance_);
    std::swap(bluebalance_, other->bluebalance_);
    std::swap(gamma_, other->gamma_);
    std::swap(exposure_, other->exposure_);
    std::swap(autogain_, other->autogain_);
    std::swap(gain_, other->gain_);
    std::swap(sharpness_, other->sharpness_);
    std::swap(powerlinefreq_, other->powerlinefreq_);
    std::swap(whitebalancetemp_, other->whitebalancetemp_);
    std::swap(backlightcompensation_, other->backlightcompensation_);
    std::swap(autoexposure_, other->autoexposure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CameraSettings::GetTypeName() const {
  return "protobuf.CameraSettings";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
