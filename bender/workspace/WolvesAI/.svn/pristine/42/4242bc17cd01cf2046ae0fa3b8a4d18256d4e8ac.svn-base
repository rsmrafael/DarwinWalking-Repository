/*
 * MovementPredictor.cpp
 *
 *  Created on: May 22, 2013
 *      Author: CHO
 */


#include "MovementPredictor.h"
#include "../../Debugging/Debugger.h"

MovementPredictor::MovementPredictor() {
	lastBall.type = Object::BALL;
	lastBall.updateObject(0,0,0,0);
	lastBall.lastImageSeen = false;
	currentPan = 0;
	currentTilt = 0;
	lastPan = 0;
	lastTilt = 0;

	ballPredictX = 0;
	ballPredictY = 0;
	ballPredictSize = 0;
}

MovementPredictor::~MovementPredictor() {

}

bool MovementPredictor::execute() {

	currentPan = getBodyStatus().getPan();
	currentTilt = getBodyStatus().getTilt();

	predictMovement( &getBall(), &lastBall, &getBallPredict());

	if( getBallPredict().lastImageSeen) {
		DRAW_CIRCLE("Ball", getBallPredict().lastImageTopLeftX, getBallPredict().lastImageTopLeftY,
			getBallPredict().lastImageWidth,
					DebugDrawer::BLACK);
	}

	/*DRAW_CIRCLE("BallDetection", ballPredictX, ballPredictY,
				ballPredictSize, DebugDrawer::BLUE);

	Debugger::INFO("MovementPredictor", "BallPredict: %d, %d; %d",
			ballPredictX, ballPredictY, ballPredictSize);
*/
	lastPan = currentPan;
	lastTilt = currentTilt;
	return true;
}

void MovementPredictor::predictMovement(const Object *currentObj, Object *lastObj, Object *predictObj) {
	int x = currentObj->lastImageTopLeftX;
	int y = currentObj->lastImageTopLeftY;
	int w = currentObj->lastImageWidth;
	int h = currentObj->lastImageHeight;
	Vector vec = currentObj->lastVector;

	if(currentObj->lastImageSeen) {
		if( lastObj->lastImageSeen) {
			// TODO use pan / tilt for prediction
			x += x - lastObj->lastImageTopLeftX;
			y += y - lastObj->lastImageTopLeftY;
			w += w - lastObj->lastImageWidth;
			h += h - lastObj->lastImageHeight;
			double angle = 2.0*vec.getAngle() - lastObj->lastVector.getAngle();
			double length = 2.0*vec.getLength() - lastObj->lastVector.getLength();

			predictObj->updateObject(x, y, w, h);
			predictObj->lastVector.updateVector(angle, length);

			// Debugging
			if( x != 0 || y != 0) {
				ballPredictX = x;
				ballPredictY = y;
				ballPredictSize = w;
			}
		} else {
			predictObj->updateObject(x, y, w, h);
			predictObj->lastVector = vec;
			//predictObj->lastImageSeen = false;
		}
		lastObj->updateObject(x, y, w, h);
	} else {
		lastObj->notSeen();
		predictObj->notSeen();
	}
}

void MovementPredictor::configChanged() {

}
