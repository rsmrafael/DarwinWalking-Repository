// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBufFrame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

void protobuf_ShutdownFile_ProtoBufFrame_2eproto() {
  delete ImageData::default_instance_;
  delete Vector::default_instance_;
  delete BoundingBox::default_instance_;
  delete ProtoBufFrame::default_instance_;
  delete ProtoBufFrame_Object::default_instance_;
  delete ProtoBufFrame_DataBlob::default_instance_;
  delete ProtoBufFrame_RobotData::default_instance_;
  delete ProtoBufFrame_RobotData_PositionOrientation::default_instance_;
  delete ProtoBufFrame_Camera::default_instance_;
  delete ProtoBufFrame_Camera_CameraType::default_instance_;
  delete ProtoBufFrame_Camera_CameraSettings::default_instance_;
}

void protobuf_AddDesc_ProtoBufFrame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ImageData::default_instance_ = new ImageData();
  Vector::default_instance_ = new Vector();
  BoundingBox::default_instance_ = new BoundingBox();
  ProtoBufFrame::default_instance_ = new ProtoBufFrame();
  ProtoBufFrame_Object::default_instance_ = new ProtoBufFrame_Object();
  ProtoBufFrame_DataBlob::default_instance_ = new ProtoBufFrame_DataBlob();
  ProtoBufFrame_RobotData::default_instance_ = new ProtoBufFrame_RobotData();
  ProtoBufFrame_RobotData_PositionOrientation::default_instance_ = new ProtoBufFrame_RobotData_PositionOrientation();
  ProtoBufFrame_Camera::default_instance_ = new ProtoBufFrame_Camera();
  ProtoBufFrame_Camera_CameraType::default_instance_ = new ProtoBufFrame_Camera_CameraType();
  ProtoBufFrame_Camera_CameraSettings::default_instance_ = new ProtoBufFrame_Camera_CameraSettings();
  ImageData::default_instance_->InitAsDefaultInstance();
  Vector::default_instance_->InitAsDefaultInstance();
  BoundingBox::default_instance_->InitAsDefaultInstance();
  ProtoBufFrame::default_instance_->InitAsDefaultInstance();
  ProtoBufFrame_Object::default_instance_->InitAsDefaultInstance();
  ProtoBufFrame_DataBlob::default_instance_->InitAsDefaultInstance();
  ProtoBufFrame_RobotData::default_instance_->InitAsDefaultInstance();
  ProtoBufFrame_RobotData_PositionOrientation::default_instance_->InitAsDefaultInstance();
  ProtoBufFrame_Camera::default_instance_->InitAsDefaultInstance();
  ProtoBufFrame_Camera_CameraType::default_instance_->InitAsDefaultInstance();
  ProtoBufFrame_Camera_CameraSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBufFrame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBufFrame_2eproto {
  StaticDescriptorInitializer_ProtoBufFrame_2eproto() {
    protobuf_AddDesc_ProtoBufFrame_2eproto();
  }
} static_descriptor_initializer_ProtoBufFrame_2eproto_;

bool ImageFormat_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ObjectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

bool CameraLocation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ImageData::kFormatFieldNumber;
const int ImageData::kDataFieldNumber;
const int ImageData::kCompressedFieldNumber;
const int ImageData::kWidthFieldNumber;
const int ImageData::kHeightFieldNumber;
#endif  // !_MSC_VER

ImageData::ImageData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ImageData::InitAsDefaultInstance() {
}

ImageData::ImageData(const ImageData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ImageData::SharedCtor() {
  _cached_size_ = 0;
  format_ = 1;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  compressed_ = false;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageData::~ImageData() {
  SharedDtor();
}

void ImageData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ImageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageData& ImageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufFrame_2eproto();  return *default_instance_;
}

ImageData* ImageData::default_instance_ = NULL;

ImageData* ImageData::New() const {
  return new ImageData;
}

void ImageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    format_ = 1;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    compressed_ = false;
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ImageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.ImageFormat format = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protobuf::ImageFormat_IsValid(value)) {
            set_format(static_cast< protobuf::ImageFormat >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_compressed;
        break;
      }
      
      // required bool compressed = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compressed_)));
          set_has_compressed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }
      
      // required int32 width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }
      
      // required int32 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.ImageFormat format = 1;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  // required bool compressed = 3 [default = false];
  if (has_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->compressed(), output);
  }
  
  // required int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }
  
  // required int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }
  
}

int ImageData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.ImageFormat format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // required bool compressed = 3 [default = false];
    if (has_compressed()) {
      total_size += 1 + 1;
    }
    
    // required int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageData*>(&from));
}

void ImageData::MergeFrom(const ImageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_compressed()) {
      set_compressed(from.compressed());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
}

void ImageData::CopyFrom(const ImageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ImageData::Swap(ImageData* other) {
  if (other != this) {
    std::swap(format_, other->format_);
    std::swap(data_, other->data_);
    std::swap(compressed_, other->compressed_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ImageData::GetTypeName() const {
  return "protobuf.ImageData";
}


// ===================================================================

#ifndef _MSC_VER
const int Vector::kXFieldNumber;
const int Vector::kYFieldNumber;
const int Vector::kZFieldNumber;
#endif  // !_MSC_VER

Vector::Vector()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
  SharedDtor();
}

void Vector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Vector& Vector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufFrame_2eproto();  return *default_instance_;
}

Vector* Vector::default_instance_ = NULL;

Vector* Vector::New() const {
  return new Vector;
}

void Vector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }
      
      // required int32 z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  // required int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }
  
}

int Vector::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // required int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Vector*>(&from));
}

void Vector::MergeFrom(const Vector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
}

void Vector::CopyFrom(const Vector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Vector::Swap(Vector* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Vector::GetTypeName() const {
  return "protobuf.Vector";
}


// ===================================================================

#ifndef _MSC_VER
const int BoundingBox::kX1FieldNumber;
const int BoundingBox::kY1FieldNumber;
const int BoundingBox::kX2FieldNumber;
const int BoundingBox::kY2FieldNumber;
#endif  // !_MSC_VER

BoundingBox::BoundingBox()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BoundingBox::InitAsDefaultInstance() {
}

BoundingBox::BoundingBox(const BoundingBox& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BoundingBox::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  y1_ = 0;
  x2_ = 0;
  y2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundingBox::~BoundingBox() {
  SharedDtor();
}

void BoundingBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BoundingBox& BoundingBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufFrame_2eproto();  return *default_instance_;
}

BoundingBox* BoundingBox::default_instance_ = NULL;

BoundingBox* BoundingBox::New() const {
  return new BoundingBox;
}

void BoundingBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x1_ = 0;
    y1_ = 0;
    x2_ = 0;
    y2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y1;
        break;
      }
      
      // required int32 y1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x2;
        break;
      }
      
      // required int32 x2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y2;
        break;
      }
      
      // required int32 y2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x1 = 1;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x1(), output);
  }
  
  // required int32 y1 = 2;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y1(), output);
  }
  
  // required int32 x2 = 3;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x2(), output);
  }
  
  // required int32 y2 = 4;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y2(), output);
  }
  
}

int BoundingBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x1 = 1;
    if (has_x1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x1());
    }
    
    // required int32 y1 = 2;
    if (has_y1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y1());
    }
    
    // required int32 x2 = 3;
    if (has_x2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x2());
    }
    
    // required int32 y2 = 4;
    if (has_y2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y2());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BoundingBox*>(&from));
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
  }
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void BoundingBox::Swap(BoundingBox* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(y1_, other->y1_);
    std::swap(x2_, other->x2_);
    std::swap(y2_, other->y2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BoundingBox::GetTypeName() const {
  return "protobuf.BoundingBox";
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBufFrame_Object::kTypeFieldNumber;
const int ProtoBufFrame_Object::kBoxFieldNumber;
#endif  // !_MSC_VER

ProtoBufFrame_Object::ProtoBufFrame_Object()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProtoBufFrame_Object::InitAsDefaultInstance() {
  box_ = const_cast< ::protobuf::BoundingBox*>(&::protobuf::BoundingBox::default_instance());
}

ProtoBufFrame_Object::ProtoBufFrame_Object(const ProtoBufFrame_Object& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBufFrame_Object::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  box_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBufFrame_Object::~ProtoBufFrame_Object() {
  SharedDtor();
}

void ProtoBufFrame_Object::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
  }
}

void ProtoBufFrame_Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoBufFrame_Object& ProtoBufFrame_Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufFrame_2eproto();  return *default_instance_;
}

ProtoBufFrame_Object* ProtoBufFrame_Object::default_instance_ = NULL;

ProtoBufFrame_Object* ProtoBufFrame_Object::New() const {
  return new ProtoBufFrame_Object;
}

void ProtoBufFrame_Object::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_box()) {
      if (box_ != NULL) box_->::protobuf::BoundingBox::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProtoBufFrame_Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.ObjectType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protobuf::ObjectType_IsValid(value)) {
            set_type(static_cast< protobuf::ObjectType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_box;
        break;
      }
      
      // required .protobuf.BoundingBox box = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBufFrame_Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.ObjectType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required .protobuf.BoundingBox box = 2;
  if (has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->box(), output);
  }
  
}

int ProtoBufFrame_Object::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.ObjectType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required .protobuf.BoundingBox box = 2;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBufFrame_Object::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoBufFrame_Object*>(&from));
}

void ProtoBufFrame_Object::MergeFrom(const ProtoBufFrame_Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_box()) {
      mutable_box()->::protobuf::BoundingBox::MergeFrom(from.box());
    }
  }
}

void ProtoBufFrame_Object::CopyFrom(const ProtoBufFrame_Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBufFrame_Object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_box()) {
    if (!this->box().IsInitialized()) return false;
  }
  return true;
}

void ProtoBufFrame_Object::Swap(ProtoBufFrame_Object* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(box_, other->box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProtoBufFrame_Object::GetTypeName() const {
  return "protobuf.ProtoBufFrame.Object";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoBufFrame_DataBlob::kLengthFieldNumber;
const int ProtoBufFrame_DataBlob::kDataFieldNumber;
#endif  // !_MSC_VER

ProtoBufFrame_DataBlob::ProtoBufFrame_DataBlob()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProtoBufFrame_DataBlob::InitAsDefaultInstance() {
}

ProtoBufFrame_DataBlob::ProtoBufFrame_DataBlob(const ProtoBufFrame_DataBlob& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBufFrame_DataBlob::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBufFrame_DataBlob::~ProtoBufFrame_DataBlob() {
  SharedDtor();
}

void ProtoBufFrame_DataBlob::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ProtoBufFrame_DataBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoBufFrame_DataBlob& ProtoBufFrame_DataBlob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufFrame_2eproto();  return *default_instance_;
}

ProtoBufFrame_DataBlob* ProtoBufFrame_DataBlob::default_instance_ = NULL;

ProtoBufFrame_DataBlob* ProtoBufFrame_DataBlob::New() const {
  return new ProtoBufFrame_DataBlob;
}

void ProtoBufFrame_DataBlob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProtoBufFrame_DataBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBufFrame_DataBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->length(), output);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
}

int ProtoBufFrame_DataBlob::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBufFrame_DataBlob::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoBufFrame_DataBlob*>(&from));
}

void ProtoBufFrame_DataBlob::MergeFrom(const ProtoBufFrame_DataBlob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void ProtoBufFrame_DataBlob::CopyFrom(const ProtoBufFrame_DataBlob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBufFrame_DataBlob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProtoBufFrame_DataBlob::Swap(ProtoBufFrame_DataBlob* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProtoBufFrame_DataBlob::GetTypeName() const {
  return "protobuf.ProtoBufFrame.DataBlob";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoBufFrame_RobotData_PositionOrientation::kXFieldNumber;
const int ProtoBufFrame_RobotData_PositionOrientation::kYFieldNumber;
const int ProtoBufFrame_RobotData_PositionOrientation::kRFieldNumber;
#endif  // !_MSC_VER

ProtoBufFrame_RobotData_PositionOrientation::ProtoBufFrame_RobotData_PositionOrientation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProtoBufFrame_RobotData_PositionOrientation::InitAsDefaultInstance() {
}

ProtoBufFrame_RobotData_PositionOrientation::ProtoBufFrame_RobotData_PositionOrientation(const ProtoBufFrame_RobotData_PositionOrientation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBufFrame_RobotData_PositionOrientation::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  r_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBufFrame_RobotData_PositionOrientation::~ProtoBufFrame_RobotData_PositionOrientation() {
  SharedDtor();
}

void ProtoBufFrame_RobotData_PositionOrientation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBufFrame_RobotData_PositionOrientation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoBufFrame_RobotData_PositionOrientation& ProtoBufFrame_RobotData_PositionOrientation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufFrame_2eproto();  return *default_instance_;
}

ProtoBufFrame_RobotData_PositionOrientation* ProtoBufFrame_RobotData_PositionOrientation::default_instance_ = NULL;

ProtoBufFrame_RobotData_PositionOrientation* ProtoBufFrame_RobotData_PositionOrientation::New() const {
  return new ProtoBufFrame_RobotData_PositionOrientation;
}

void ProtoBufFrame_RobotData_PositionOrientation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    r_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProtoBufFrame_RobotData_PositionOrientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_r;
        break;
      }
      
      // required double r = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBufFrame_RobotData_PositionOrientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  // required double r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->r(), output);
  }
  
}

int ProtoBufFrame_RobotData_PositionOrientation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // required double r = 3;
    if (has_r()) {
      total_size += 1 + 8;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBufFrame_RobotData_PositionOrientation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoBufFrame_RobotData_PositionOrientation*>(&from));
}

void ProtoBufFrame_RobotData_PositionOrientation::MergeFrom(const ProtoBufFrame_RobotData_PositionOrientation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
  }
}

void ProtoBufFrame_RobotData_PositionOrientation::CopyFrom(const ProtoBufFrame_RobotData_PositionOrientation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBufFrame_RobotData_PositionOrientation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ProtoBufFrame_RobotData_PositionOrientation::Swap(ProtoBufFrame_RobotData_PositionOrientation* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(r_, other->r_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProtoBufFrame_RobotData_PositionOrientation::GetTypeName() const {
  return "protobuf.ProtoBufFrame.RobotData.PositionOrientation";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoBufFrame_RobotData::kRobotIDFieldNumber;
const int ProtoBufFrame_RobotData::kRobotNameFieldNumber;
const int ProtoBufFrame_RobotData::kGroundTruthFieldNumber;
#endif  // !_MSC_VER

ProtoBufFrame_RobotData::ProtoBufFrame_RobotData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProtoBufFrame_RobotData::InitAsDefaultInstance() {
  ground_truth_ = const_cast< ::protobuf::ProtoBufFrame_RobotData_PositionOrientation*>(&::protobuf::ProtoBufFrame_RobotData_PositionOrientation::default_instance());
}

ProtoBufFrame_RobotData::ProtoBufFrame_RobotData(const ProtoBufFrame_RobotData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBufFrame_RobotData::SharedCtor() {
  _cached_size_ = 0;
  robotid_ = 0;
  robotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ground_truth_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBufFrame_RobotData::~ProtoBufFrame_RobotData() {
  SharedDtor();
}

void ProtoBufFrame_RobotData::SharedDtor() {
  if (robotname_ != &::google::protobuf::internal::kEmptyString) {
    delete robotname_;
  }
  if (this != default_instance_) {
    delete ground_truth_;
  }
}

void ProtoBufFrame_RobotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoBufFrame_RobotData& ProtoBufFrame_RobotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufFrame_2eproto();  return *default_instance_;
}

ProtoBufFrame_RobotData* ProtoBufFrame_RobotData::default_instance_ = NULL;

ProtoBufFrame_RobotData* ProtoBufFrame_RobotData::New() const {
  return new ProtoBufFrame_RobotData;
}

void ProtoBufFrame_RobotData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    robotid_ = 0;
    if (has_robotname()) {
      if (robotname_ != &::google::protobuf::internal::kEmptyString) {
        robotname_->clear();
      }
    }
    if (has_ground_truth()) {
      if (ground_truth_ != NULL) ground_truth_->::protobuf::ProtoBufFrame_RobotData_PositionOrientation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProtoBufFrame_RobotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 robotID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotid_)));
          set_has_robotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_robotName;
        break;
      }
      
      // optional string robotName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robotName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robotname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ground_truth;
        break;
      }
      
      // optional .protobuf.ProtoBufFrame.RobotData.PositionOrientation ground_truth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ground_truth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ground_truth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBufFrame_RobotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 robotID = 1;
  if (has_robotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->robotid(), output);
  }
  
  // optional string robotName = 2;
  if (has_robotname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->robotname(), output);
  }
  
  // optional .protobuf.ProtoBufFrame.RobotData.PositionOrientation ground_truth = 3;
  if (has_ground_truth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->ground_truth(), output);
  }
  
}

int ProtoBufFrame_RobotData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 robotID = 1;
    if (has_robotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotid());
    }
    
    // optional string robotName = 2;
    if (has_robotname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robotname());
    }
    
    // optional .protobuf.ProtoBufFrame.RobotData.PositionOrientation ground_truth = 3;
    if (has_ground_truth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ground_truth());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBufFrame_RobotData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoBufFrame_RobotData*>(&from));
}

void ProtoBufFrame_RobotData::MergeFrom(const ProtoBufFrame_RobotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robotid()) {
      set_robotid(from.robotid());
    }
    if (from.has_robotname()) {
      set_robotname(from.robotname());
    }
    if (from.has_ground_truth()) {
      mutable_ground_truth()->::protobuf::ProtoBufFrame_RobotData_PositionOrientation::MergeFrom(from.ground_truth());
    }
  }
}

void ProtoBufFrame_RobotData::CopyFrom(const ProtoBufFrame_RobotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBufFrame_RobotData::IsInitialized() const {
  
  if (has_ground_truth()) {
    if (!this->ground_truth().IsInitialized()) return false;
  }
  return true;
}

void ProtoBufFrame_RobotData::Swap(ProtoBufFrame_RobotData* other) {
  if (other != this) {
    std::swap(robotid_, other->robotid_);
    std::swap(robotname_, other->robotname_);
    std::swap(ground_truth_, other->ground_truth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProtoBufFrame_RobotData::GetTypeName() const {
  return "protobuf.ProtoBufFrame.RobotData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoBufFrame_Camera_CameraType::kLocationFieldNumber;
const int ProtoBufFrame_Camera_CameraType::kNameFieldNumber;
const int ProtoBufFrame_Camera_CameraType::kSensorSizeWidthFieldNumber;
const int ProtoBufFrame_Camera_CameraType::kSensorSizeHeightFieldNumber;
const int ProtoBufFrame_Camera_CameraType::kLensNameFieldNumber;
const int ProtoBufFrame_Camera_CameraType::kFocalLengthFieldNumber;
#endif  // !_MSC_VER

ProtoBufFrame_Camera_CameraType::ProtoBufFrame_Camera_CameraType()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProtoBufFrame_Camera_CameraType::InitAsDefaultInstance() {
}

ProtoBufFrame_Camera_CameraType::ProtoBufFrame_Camera_CameraType(const ProtoBufFrame_Camera_CameraType& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBufFrame_Camera_CameraType::SharedCtor() {
  _cached_size_ = 0;
  location_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sensor_size_width_ = 0;
  sensor_size_height_ = 0;
  lens_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  focal_length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBufFrame_Camera_CameraType::~ProtoBufFrame_Camera_CameraType() {
  SharedDtor();
}

void ProtoBufFrame_Camera_CameraType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (lens_name_ != &::google::protobuf::internal::kEmptyString) {
    delete lens_name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoBufFrame_Camera_CameraType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoBufFrame_Camera_CameraType& ProtoBufFrame_Camera_CameraType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufFrame_2eproto();  return *default_instance_;
}

ProtoBufFrame_Camera_CameraType* ProtoBufFrame_Camera_CameraType::default_instance_ = NULL;

ProtoBufFrame_Camera_CameraType* ProtoBufFrame_Camera_CameraType::New() const {
  return new ProtoBufFrame_Camera_CameraType;
}

void ProtoBufFrame_Camera_CameraType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    location_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sensor_size_width_ = 0;
    sensor_size_height_ = 0;
    if (has_lens_name()) {
      if (lens_name_ != &::google::protobuf::internal::kEmptyString) {
        lens_name_->clear();
      }
    }
    focal_length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProtoBufFrame_Camera_CameraType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.CameraLocation location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protobuf::CameraLocation_IsValid(value)) {
            set_location(static_cast< protobuf::CameraLocation >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_sensor_size_width;
        break;
      }
      
      // optional double sensor_size_width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sensor_size_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sensor_size_width_)));
          set_has_sensor_size_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_sensor_size_height;
        break;
      }
      
      // optional double sensor_size_height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sensor_size_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sensor_size_height_)));
          set_has_sensor_size_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lens_name;
        break;
      }
      
      // optional string lens_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lens_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lens_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_focal_length;
        break;
      }
      
      // optional double focal_length = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_focal_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focal_length_)));
          set_has_focal_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBufFrame_Camera_CameraType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.CameraLocation location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->location(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional double sensor_size_width = 3;
  if (has_sensor_size_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sensor_size_width(), output);
  }
  
  // optional double sensor_size_height = 4;
  if (has_sensor_size_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sensor_size_height(), output);
  }
  
  // optional string lens_name = 5;
  if (has_lens_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lens_name(), output);
  }
  
  // optional double focal_length = 6;
  if (has_focal_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->focal_length(), output);
  }
  
}

int ProtoBufFrame_Camera_CameraType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.CameraLocation location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->location());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional double sensor_size_width = 3;
    if (has_sensor_size_width()) {
      total_size += 1 + 8;
    }
    
    // optional double sensor_size_height = 4;
    if (has_sensor_size_height()) {
      total_size += 1 + 8;
    }
    
    // optional string lens_name = 5;
    if (has_lens_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lens_name());
    }
    
    // optional double focal_length = 6;
    if (has_focal_length()) {
      total_size += 1 + 8;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBufFrame_Camera_CameraType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoBufFrame_Camera_CameraType*>(&from));
}

void ProtoBufFrame_Camera_CameraType::MergeFrom(const ProtoBufFrame_Camera_CameraType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sensor_size_width()) {
      set_sensor_size_width(from.sensor_size_width());
    }
    if (from.has_sensor_size_height()) {
      set_sensor_size_height(from.sensor_size_height());
    }
    if (from.has_lens_name()) {
      set_lens_name(from.lens_name());
    }
    if (from.has_focal_length()) {
      set_focal_length(from.focal_length());
    }
  }
}

void ProtoBufFrame_Camera_CameraType::CopyFrom(const ProtoBufFrame_Camera_CameraType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBufFrame_Camera_CameraType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoBufFrame_Camera_CameraType::Swap(ProtoBufFrame_Camera_CameraType* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(name_, other->name_);
    std::swap(sensor_size_width_, other->sensor_size_width_);
    std::swap(sensor_size_height_, other->sensor_size_height_);
    std::swap(lens_name_, other->lens_name_);
    std::swap(focal_length_, other->focal_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProtoBufFrame_Camera_CameraType::GetTypeName() const {
  return "protobuf.ProtoBufFrame.Camera.CameraType";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoBufFrame_Camera_CameraSettings::kGainFieldNumber;
const int ProtoBufFrame_Camera_CameraSettings::kBrightnessFieldNumber;
const int ProtoBufFrame_Camera_CameraSettings::kShutterFieldNumber;
const int ProtoBufFrame_Camera_CameraSettings::kWhiteBalanceFieldNumber;
const int ProtoBufFrame_Camera_CameraSettings::kSaturationFieldNumber;
const int ProtoBufFrame_Camera_CameraSettings::kContrastFieldNumber;
const int ProtoBufFrame_Camera_CameraSettings::kSharpnessFieldNumber;
const int ProtoBufFrame_Camera_CameraSettings::kHueFieldNumber;
const int ProtoBufFrame_Camera_CameraSettings::kGammaFieldNumber;
#endif  // !_MSC_VER

ProtoBufFrame_Camera_CameraSettings::ProtoBufFrame_Camera_CameraSettings()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProtoBufFrame_Camera_CameraSettings::InitAsDefaultInstance() {
}

ProtoBufFrame_Camera_CameraSettings::ProtoBufFrame_Camera_CameraSettings(const ProtoBufFrame_Camera_CameraSettings& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBufFrame_Camera_CameraSettings::SharedCtor() {
  _cached_size_ = 0;
  gain_ = 0;
  brightness_ = 0;
  shutter_ = 0;
  white_balance_ = 0;
  saturation_ = 0;
  contrast_ = 0;
  sharpness_ = 0;
  hue_ = 0;
  gamma_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBufFrame_Camera_CameraSettings::~ProtoBufFrame_Camera_CameraSettings() {
  SharedDtor();
}

void ProtoBufFrame_Camera_CameraSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBufFrame_Camera_CameraSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoBufFrame_Camera_CameraSettings& ProtoBufFrame_Camera_CameraSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufFrame_2eproto();  return *default_instance_;
}

ProtoBufFrame_Camera_CameraSettings* ProtoBufFrame_Camera_CameraSettings::default_instance_ = NULL;

ProtoBufFrame_Camera_CameraSettings* ProtoBufFrame_Camera_CameraSettings::New() const {
  return new ProtoBufFrame_Camera_CameraSettings;
}

void ProtoBufFrame_Camera_CameraSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gain_ = 0;
    brightness_ = 0;
    shutter_ = 0;
    white_balance_ = 0;
    saturation_ = 0;
    contrast_ = 0;
    sharpness_ = 0;
    hue_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gamma_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProtoBufFrame_Camera_CameraSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double gain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_brightness;
        break;
      }
      
      // optional double brightness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_brightness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brightness_)));
          set_has_brightness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_shutter;
        break;
      }
      
      // optional double shutter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_shutter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shutter_)));
          set_has_shutter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_white_balance;
        break;
      }
      
      // optional double white_balance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_white_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &white_balance_)));
          set_has_white_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_saturation;
        break;
      }
      
      // optional double saturation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_saturation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &saturation_)));
          set_has_saturation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_contrast;
        break;
      }
      
      // optional double contrast = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_contrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contrast_)));
          set_has_contrast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_sharpness;
        break;
      }
      
      // optional double sharpness = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sharpness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sharpness_)));
          set_has_sharpness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_hue;
        break;
      }
      
      // optional double hue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hue_)));
          set_has_hue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_gamma;
        break;
      }
      
      // optional double gamma = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBufFrame_Camera_CameraSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double gain = 1;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->gain(), output);
  }
  
  // optional double brightness = 2;
  if (has_brightness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->brightness(), output);
  }
  
  // optional double shutter = 3;
  if (has_shutter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->shutter(), output);
  }
  
  // optional double white_balance = 4;
  if (has_white_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->white_balance(), output);
  }
  
  // optional double saturation = 5;
  if (has_saturation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->saturation(), output);
  }
  
  // optional double contrast = 6;
  if (has_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->contrast(), output);
  }
  
  // optional double sharpness = 7;
  if (has_sharpness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sharpness(), output);
  }
  
  // optional double hue = 8;
  if (has_hue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->hue(), output);
  }
  
  // optional double gamma = 9;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->gamma(), output);
  }
  
}

int ProtoBufFrame_Camera_CameraSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double gain = 1;
    if (has_gain()) {
      total_size += 1 + 8;
    }
    
    // optional double brightness = 2;
    if (has_brightness()) {
      total_size += 1 + 8;
    }
    
    // optional double shutter = 3;
    if (has_shutter()) {
      total_size += 1 + 8;
    }
    
    // optional double white_balance = 4;
    if (has_white_balance()) {
      total_size += 1 + 8;
    }
    
    // optional double saturation = 5;
    if (has_saturation()) {
      total_size += 1 + 8;
    }
    
    // optional double contrast = 6;
    if (has_contrast()) {
      total_size += 1 + 8;
    }
    
    // optional double sharpness = 7;
    if (has_sharpness()) {
      total_size += 1 + 8;
    }
    
    // optional double hue = 8;
    if (has_hue()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double gamma = 9;
    if (has_gamma()) {
      total_size += 1 + 8;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBufFrame_Camera_CameraSettings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoBufFrame_Camera_CameraSettings*>(&from));
}

void ProtoBufFrame_Camera_CameraSettings::MergeFrom(const ProtoBufFrame_Camera_CameraSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_brightness()) {
      set_brightness(from.brightness());
    }
    if (from.has_shutter()) {
      set_shutter(from.shutter());
    }
    if (from.has_white_balance()) {
      set_white_balance(from.white_balance());
    }
    if (from.has_saturation()) {
      set_saturation(from.saturation());
    }
    if (from.has_contrast()) {
      set_contrast(from.contrast());
    }
    if (from.has_sharpness()) {
      set_sharpness(from.sharpness());
    }
    if (from.has_hue()) {
      set_hue(from.hue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
  }
}

void ProtoBufFrame_Camera_CameraSettings::CopyFrom(const ProtoBufFrame_Camera_CameraSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBufFrame_Camera_CameraSettings::IsInitialized() const {
  
  return true;
}

void ProtoBufFrame_Camera_CameraSettings::Swap(ProtoBufFrame_Camera_CameraSettings* other) {
  if (other != this) {
    std::swap(gain_, other->gain_);
    std::swap(brightness_, other->brightness_);
    std::swap(shutter_, other->shutter_);
    std::swap(white_balance_, other->white_balance_);
    std::swap(saturation_, other->saturation_);
    std::swap(contrast_, other->contrast_);
    std::swap(sharpness_, other->sharpness_);
    std::swap(hue_, other->hue_);
    std::swap(gamma_, other->gamma_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProtoBufFrame_Camera_CameraSettings::GetTypeName() const {
  return "protobuf.ProtoBufFrame.Camera.CameraSettings";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoBufFrame_Camera::kTypeFieldNumber;
const int ProtoBufFrame_Camera::kImageDataFieldNumber;
const int ProtoBufFrame_Camera::kObjectsFieldNumber;
const int ProtoBufFrame_Camera::kSettingsFieldNumber;
const int ProtoBufFrame_Camera::kTeamDataFieldNumber;
const int ProtoBufFrame_Camera::kCameraPositionFieldNumber;
const int ProtoBufFrame_Camera::kOpticalAxisFieldNumber;
#endif  // !_MSC_VER

ProtoBufFrame_Camera::ProtoBufFrame_Camera()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProtoBufFrame_Camera::InitAsDefaultInstance() {
  type_ = const_cast< ::protobuf::ProtoBufFrame_Camera_CameraType*>(&::protobuf::ProtoBufFrame_Camera_CameraType::default_instance());
  image_data_ = const_cast< ::protobuf::ImageData*>(&::protobuf::ImageData::default_instance());
  settings_ = const_cast< ::protobuf::ProtoBufFrame_Camera_CameraSettings*>(&::protobuf::ProtoBufFrame_Camera_CameraSettings::default_instance());
  team_data_ = const_cast< ::protobuf::ProtoBufFrame_DataBlob*>(&::protobuf::ProtoBufFrame_DataBlob::default_instance());
  camera_position_ = const_cast< ::protobuf::Vector*>(&::protobuf::Vector::default_instance());
  optical_axis_ = const_cast< ::protobuf::Vector*>(&::protobuf::Vector::default_instance());
}

ProtoBufFrame_Camera::ProtoBufFrame_Camera(const ProtoBufFrame_Camera& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBufFrame_Camera::SharedCtor() {
  _cached_size_ = 0;
  type_ = NULL;
  image_data_ = NULL;
  settings_ = NULL;
  team_data_ = NULL;
  camera_position_ = NULL;
  optical_axis_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBufFrame_Camera::~ProtoBufFrame_Camera() {
  SharedDtor();
}

void ProtoBufFrame_Camera::SharedDtor() {
  if (this != default_instance_) {
    delete type_;
    delete image_data_;
    delete settings_;
    delete team_data_;
    delete camera_position_;
    delete optical_axis_;
  }
}

void ProtoBufFrame_Camera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoBufFrame_Camera& ProtoBufFrame_Camera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufFrame_2eproto();  return *default_instance_;
}

ProtoBufFrame_Camera* ProtoBufFrame_Camera::default_instance_ = NULL;

ProtoBufFrame_Camera* ProtoBufFrame_Camera::New() const {
  return new ProtoBufFrame_Camera;
}

void ProtoBufFrame_Camera::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != NULL) type_->::protobuf::ProtoBufFrame_Camera_CameraType::Clear();
    }
    if (has_image_data()) {
      if (image_data_ != NULL) image_data_->::protobuf::ImageData::Clear();
    }
    if (has_settings()) {
      if (settings_ != NULL) settings_->::protobuf::ProtoBufFrame_Camera_CameraSettings::Clear();
    }
    if (has_team_data()) {
      if (team_data_ != NULL) team_data_->::protobuf::ProtoBufFrame_DataBlob::Clear();
    }
    if (has_camera_position()) {
      if (camera_position_ != NULL) camera_position_->::protobuf::Vector::Clear();
    }
    if (has_optical_axis()) {
      if (optical_axis_ != NULL) optical_axis_->::protobuf::Vector::Clear();
    }
  }
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProtoBufFrame_Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.ProtoBufFrame.Camera.CameraType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image_data;
        break;
      }
      
      // required .protobuf.ImageData image_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_objects;
        break;
      }
      
      // repeated .protobuf.ProtoBufFrame.Object objects = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_objects;
        if (input->ExpectTag(34)) goto parse_settings;
        break;
      }
      
      // optional .protobuf.ProtoBufFrame.Camera.CameraSettings settings = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_team_data;
        break;
      }
      
      // optional .protobuf.ProtoBufFrame.DataBlob team_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_camera_position;
        break;
      }
      
      // optional .protobuf.Vector camera_position = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_optical_axis;
        break;
      }
      
      // optional .protobuf.Vector optical_axis = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optical_axis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optical_axis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBufFrame_Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.ProtoBufFrame.Camera.CameraType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->type(), output);
  }
  
  // required .protobuf.ImageData image_data = 2;
  if (has_image_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->image_data(), output);
  }
  
  // repeated .protobuf.ProtoBufFrame.Object objects = 3;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->objects(i), output);
  }
  
  // optional .protobuf.ProtoBufFrame.Camera.CameraSettings settings = 4;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->settings(), output);
  }
  
  // optional .protobuf.ProtoBufFrame.DataBlob team_data = 5;
  if (has_team_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->team_data(), output);
  }
  
  // optional .protobuf.Vector camera_position = 6;
  if (has_camera_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->camera_position(), output);
  }
  
  // optional .protobuf.Vector optical_axis = 7;
  if (has_optical_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->optical_axis(), output);
  }
  
}

int ProtoBufFrame_Camera::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.ProtoBufFrame.Camera.CameraType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }
    
    // required .protobuf.ImageData image_data = 2;
    if (has_image_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_data());
    }
    
    // optional .protobuf.ProtoBufFrame.Camera.CameraSettings settings = 4;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }
    
    // optional .protobuf.ProtoBufFrame.DataBlob team_data = 5;
    if (has_team_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_data());
    }
    
    // optional .protobuf.Vector camera_position = 6;
    if (has_camera_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_position());
    }
    
    // optional .protobuf.Vector optical_axis = 7;
    if (has_optical_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optical_axis());
    }
    
  }
  // repeated .protobuf.ProtoBufFrame.Object objects = 3;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBufFrame_Camera::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoBufFrame_Camera*>(&from));
}

void ProtoBufFrame_Camera::MergeFrom(const ProtoBufFrame_Camera& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      mutable_type()->::protobuf::ProtoBufFrame_Camera_CameraType::MergeFrom(from.type());
    }
    if (from.has_image_data()) {
      mutable_image_data()->::protobuf::ImageData::MergeFrom(from.image_data());
    }
    if (from.has_settings()) {
      mutable_settings()->::protobuf::ProtoBufFrame_Camera_CameraSettings::MergeFrom(from.settings());
    }
    if (from.has_team_data()) {
      mutable_team_data()->::protobuf::ProtoBufFrame_DataBlob::MergeFrom(from.team_data());
    }
    if (from.has_camera_position()) {
      mutable_camera_position()->::protobuf::Vector::MergeFrom(from.camera_position());
    }
    if (from.has_optical_axis()) {
      mutable_optical_axis()->::protobuf::Vector::MergeFrom(from.optical_axis());
    }
  }
}

void ProtoBufFrame_Camera::CopyFrom(const ProtoBufFrame_Camera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBufFrame_Camera::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_type()) {
    if (!this->type().IsInitialized()) return false;
  }
  if (has_image_data()) {
    if (!this->image_data().IsInitialized()) return false;
  }
  for (int i = 0; i < objects_size(); i++) {
    if (!this->objects(i).IsInitialized()) return false;
  }
  if (has_team_data()) {
    if (!this->team_data().IsInitialized()) return false;
  }
  if (has_camera_position()) {
    if (!this->camera_position().IsInitialized()) return false;
  }
  if (has_optical_axis()) {
    if (!this->optical_axis().IsInitialized()) return false;
  }
  return true;
}

void ProtoBufFrame_Camera::Swap(ProtoBufFrame_Camera* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(image_data_, other->image_data_);
    objects_.Swap(&other->objects_);
    std::swap(settings_, other->settings_);
    std::swap(team_data_, other->team_data_);
    std::swap(camera_position_, other->camera_position_);
    std::swap(optical_axis_, other->optical_axis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProtoBufFrame_Camera::GetTypeName() const {
  return "protobuf.ProtoBufFrame.Camera";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProtoBufFrame::kTimeFieldNumber;
const int ProtoBufFrame::kSequenceIdFieldNumber;
const int ProtoBufFrame::kCommentFieldNumber;
const int ProtoBufFrame::kCaptureLocationFieldNumber;
const int ProtoBufFrame::kRobotDataFieldNumber;
const int ProtoBufFrame::kCameraFieldNumber;
const int ProtoBufFrame::kMergedObjectsFieldNumber;
const int ProtoBufFrame::kTeamDataFieldNumber;
#endif  // !_MSC_VER

ProtoBufFrame::ProtoBufFrame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProtoBufFrame::InitAsDefaultInstance() {
  robot_data_ = const_cast< ::protobuf::ProtoBufFrame_RobotData*>(&::protobuf::ProtoBufFrame_RobotData::default_instance());
  team_data_ = const_cast< ::protobuf::ProtoBufFrame_DataBlob*>(&::protobuf::ProtoBufFrame_DataBlob::default_instance());
}

ProtoBufFrame::ProtoBufFrame(const ProtoBufFrame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBufFrame::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  sequence_id_ = 0;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capture_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  robot_data_ = NULL;
  team_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBufFrame::~ProtoBufFrame() {
  SharedDtor();
}

void ProtoBufFrame::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (capture_location_ != &::google::protobuf::internal::kEmptyString) {
    delete capture_location_;
  }
  if (this != default_instance_) {
    delete robot_data_;
    delete team_data_;
  }
}

void ProtoBufFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProtoBufFrame& ProtoBufFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBufFrame_2eproto();  return *default_instance_;
}

ProtoBufFrame* ProtoBufFrame::default_instance_ = NULL;

ProtoBufFrame* ProtoBufFrame::New() const {
  return new ProtoBufFrame;
}

void ProtoBufFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    sequence_id_ = 0;
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_capture_location()) {
      if (capture_location_ != &::google::protobuf::internal::kEmptyString) {
        capture_location_->clear();
      }
    }
    if (has_robot_data()) {
      if (robot_data_ != NULL) robot_data_->::protobuf::ProtoBufFrame_RobotData::Clear();
    }
    if (has_team_data()) {
      if (team_data_ != NULL) team_data_->::protobuf::ProtoBufFrame_DataBlob::Clear();
    }
  }
  camera_.Clear();
  merged_objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProtoBufFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence_id;
        break;
      }
      
      // optional int32 sequence_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_comment;
        break;
      }
      
      // optional string comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_capture_location;
        break;
      }
      
      // optional string capture_location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capture_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capture_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_robot_data;
        break;
      }
      
      // optional .protobuf.ProtoBufFrame.RobotData robot_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_camera;
        break;
      }
      
      // repeated .protobuf.ProtoBufFrame.Camera camera = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_camera;
        if (input->ExpectTag(58)) goto parse_merged_objects;
        break;
      }
      
      // repeated .protobuf.ProtoBufFrame.Object merged_objects = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merged_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_merged_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_merged_objects;
        if (input->ExpectTag(66)) goto parse_team_data;
        break;
      }
      
      // optional .protobuf.ProtoBufFrame.DataBlob team_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBufFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }
  
  // optional int32 sequence_id = 2;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence_id(), output);
  }
  
  // optional string comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment(), output);
  }
  
  // optional string capture_location = 4;
  if (has_capture_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->capture_location(), output);
  }
  
  // optional .protobuf.ProtoBufFrame.RobotData robot_data = 5;
  if (has_robot_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->robot_data(), output);
  }
  
  // repeated .protobuf.ProtoBufFrame.Camera camera = 6;
  for (int i = 0; i < this->camera_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->camera(i), output);
  }
  
  // repeated .protobuf.ProtoBufFrame.Object merged_objects = 7;
  for (int i = 0; i < this->merged_objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->merged_objects(i), output);
  }
  
  // optional .protobuf.ProtoBufFrame.DataBlob team_data = 8;
  if (has_team_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->team_data(), output);
  }
  
}

int ProtoBufFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 sequence_id = 2;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_id());
    }
    
    // optional string comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
    // optional string capture_location = 4;
    if (has_capture_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capture_location());
    }
    
    // optional .protobuf.ProtoBufFrame.RobotData robot_data = 5;
    if (has_robot_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robot_data());
    }
    
    // optional .protobuf.ProtoBufFrame.DataBlob team_data = 8;
    if (has_team_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_data());
    }
    
  }
  // repeated .protobuf.ProtoBufFrame.Camera camera = 6;
  total_size += 1 * this->camera_size();
  for (int i = 0; i < this->camera_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera(i));
  }
  
  // repeated .protobuf.ProtoBufFrame.Object merged_objects = 7;
  total_size += 1 * this->merged_objects_size();
  for (int i = 0; i < this->merged_objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->merged_objects(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBufFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProtoBufFrame*>(&from));
}

void ProtoBufFrame::MergeFrom(const ProtoBufFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  camera_.MergeFrom(from.camera_);
  merged_objects_.MergeFrom(from.merged_objects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_capture_location()) {
      set_capture_location(from.capture_location());
    }
    if (from.has_robot_data()) {
      mutable_robot_data()->::protobuf::ProtoBufFrame_RobotData::MergeFrom(from.robot_data());
    }
    if (from.has_team_data()) {
      mutable_team_data()->::protobuf::ProtoBufFrame_DataBlob::MergeFrom(from.team_data());
    }
  }
}

void ProtoBufFrame::CopyFrom(const ProtoBufFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBufFrame::IsInitialized() const {
  
  if (has_robot_data()) {
    if (!this->robot_data().IsInitialized()) return false;
  }
  for (int i = 0; i < camera_size(); i++) {
    if (!this->camera(i).IsInitialized()) return false;
  }
  for (int i = 0; i < merged_objects_size(); i++) {
    if (!this->merged_objects(i).IsInitialized()) return false;
  }
  if (has_team_data()) {
    if (!this->team_data().IsInitialized()) return false;
  }
  return true;
}

void ProtoBufFrame::Swap(ProtoBufFrame* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(sequence_id_, other->sequence_id_);
    std::swap(comment_, other->comment_);
    std::swap(capture_location_, other->capture_location_);
    std::swap(robot_data_, other->robot_data_);
    camera_.Swap(&other->camera_);
    merged_objects_.Swap(&other->merged_objects_);
    std::swap(team_data_, other->team_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProtoBufFrame::GetTypeName() const {
  return "protobuf.ProtoBufFrame";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
