/*
 * GoalSideHistogramPredictor.cpp
 *
 *  Created on: 01.07.2014
 *      Author: cpupower
 */

#include "GoalSideHistogramPredictor.h"
#include "../../Config.h"

GoalSideHistogramPredictor::GoalSideHistogramPredictor() {
	mNeighbours = 5;
	Config::GetInstance()->registerConfigChangeHandler(this);
	this->configChanged();
}

GoalSideHistogramPredictor::~GoalSideHistogramPredictor() {
}

bool GoalSideHistogramPredictor::execute() {
	Histogram currentHistogram = getBackgroundYUV();
	const std::vector<Histogram> ownSideHistograms =
			getOwnGoalHistograms().getConst();
	const std::vector<Histogram> oppSideHistograms =
			getOpponentGoalHistograms().getConst();

	if (ownSideHistograms.size() + oppSideHistograms.size() < mNeighbours) {
		Debugger::INFO("GoalSideHistogramPredictor",
				"Not enough training samples for nearest neighbour k."
				" Skipping prediction");
		getGoalSideHistogram().setProbability(0.5);
		return true;
	}

	std::vector<Histogram> bothSidesHistograms;
	bothSidesHistograms.reserve(
			ownSideHistograms.size() + oppSideHistograms.size());
	bothSidesHistograms.insert(bothSidesHistograms.end(),
			ownSideHistograms.begin(), ownSideHistograms.end());
	bothSidesHistograms.insert(bothSidesHistograms.end(),
			oppSideHistograms.begin(), oppSideHistograms.end());
	GoalSideHistogramPredictor::IntersectionPriorityQueue intersections;
	intersections = getSortedHistogramIntersections(currentHistogram,
			bothSidesHistograms);

	size_t nearestOwnSideCount = 0;
	for (size_t i = 0; i < mNeighbours; ++i) {
		GoalSideHistogramPredictor::IntersectionPair bestIntersection =
				intersections.top();
		if (bestIntersection.first < ownSideHistograms.size()) {
			nearestOwnSideCount++;
		}
		intersections.pop();
	}

	bool classifiedAsOwnSide = nearestOwnSideCount > mNeighbours / 2;
	double prob = 1.0 - ((double)nearestOwnSideCount / mNeighbours);
	getGoalSideHistogram().setProbability(prob);

	std::string classifiedAs;
	if (classifiedAsOwnSide) {
		classifiedAs = "OwnSide";
	} else {
		classifiedAs = "OpponentSide";
	}
	Debugger::DEBUG("GoalSideHistogramPredictor", "Classified side as %s (%.3f)",
			classifiedAs.c_str(), prob);

	return true;
}

int GoalSideHistogramPredictor::histogramIntersection(Histogram histogramA,
		Histogram histogramB) {
	if (histogramA.getMinBucketLabel() != histogramB.getMinBucketLabel()
			|| histogramA.getMaxBucketLabel() != histogramB.getMaxBucketLabel()
			|| histogramA.getBucketStepSize()
					!= histogramB.getBucketStepSize()) {
		Debugger::ERR("GoalSideHistogram",
				"Cannot calculate histogram intersection! "
						"The histogram parameters are different!");
		return 0;
	}
	std::map<int, int> histMapA = histogramA.getHistData();
	std::map<int, int> histMapB = histogramA.getHistData();

	int intersection = 0;
	for (std::map<int, int>::const_iterator itMapA = histMapA.begin();
			itMapA != histMapA.end(); ++itMapA) {
		intersection += min((*itMapA).second, histMapB[(*itMapA).first]);
	}
	return intersection;
}

GoalSideHistogramPredictor::IntersectionPriorityQueue GoalSideHistogramPredictor::getSortedHistogramIntersections(
		Histogram histogram, std::vector<Histogram> histograms) {
	GoalSideHistogramPredictor::IntersectionPriorityQueue intersections;
	for (size_t i = 0; i < histograms.size(); ++i) {
		int intersection = histogramIntersection(histogram, histograms[i]);
		intersections.push(make_pair(i, intersection));
	}
	return intersections;
}

void GoalSideHistogramPredictor::configChanged()
{
	double accuracy = Config::GetDouble("GoalSideHistogram", "Accuracy", 0.5);
	mNeighbours = Config::GetValue<size_t>("GoalSideHistogram", "Neighbours", 5, "Number k of nearest neighbours, use odd value to allow decision by majority");
	getGoalSideHistogram().setAccuracy(accuracy);
}
