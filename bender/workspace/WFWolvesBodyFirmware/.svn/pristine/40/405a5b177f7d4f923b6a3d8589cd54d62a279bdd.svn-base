#ifndef DEBUG_X86

#include "dbgu.h"
#include "include/Board.h"
#include <stdarg.h>

#define DBGU_INTERRUPT_LEVEL		7

CharReceivedCallback dbgu_CharReceivedCallbackFnct = 0;
TxReadyCallback dbgu_TxBufferEmptyCallbackFnct = 0;

// Prototypes
void DBGUIRQHandler(void);

/*-----------------------------------------------------------------------------
 * Function Name       : configure_dbgu
 * Object              : Configure DBGU
 *-----------------------------------------------------------------------------*/
void DBGU_Init(void) {
    /* Reset and disable receiver */
    AT91C_BASE_DBGU->DBGU_CR = AT91C_US_RSTRX | AT91C_US_RSTTX;

    /* Disable interrupts */
    AT91C_BASE_DBGU->DBGU_IDR = 0xFFFFFFFF;

    /* Configure PIOs for DBGU */
    AT91C_BASE_PIOA->PIO_ASR = AT91C_PA27_DRXD | AT91C_PA28_DTXD;
    AT91C_BASE_PIOA->PIO_BSR = 0;
    AT91C_BASE_PIOA->PIO_PDR = AT91C_PA27_DRXD | AT91C_PA28_DTXD;

    /* === Configure serial link === */
    /* Define the baud rate divisor register [BRGR = MCK / (115200 * 16)] */
    AT91C_BASE_DBGU->DBGU_BRGR = 26;
    /* Define the USART mode */
    AT91C_BASE_DBGU->DBGU_MR = AT91C_US_PAR_NONE | AT91C_US_CHMODE_NORMAL;

    /* Disable the RX and TX PDC transfer requests */
    AT91C_BASE_DBGU->DBGU_PTCR = AT91C_PDC_RXTDIS;
    AT91C_BASE_DBGU->DBGU_PTCR = AT91C_PDC_TXTDIS;

    /* Enable transmitter */
    AT91C_BASE_DBGU->DBGU_CR = AT91C_US_TXEN;

    /* Enable receiver */
    AT91C_BASE_DBGU->DBGU_CR = AT91C_US_RXEN;

	// Disable the interrupt on the interrupt controller
	AT91C_BASE_AIC->AIC_IDCR = 1 << AT91C_ID_SYS;
	// Save the interrupt handler routine pointer
	AT91C_BASE_AIC->AIC_SVR[AT91C_ID_SYS] = (unsigned int)DBGUIRQHandler;
	// Store the Source Mode Register
	AT91C_BASE_AIC->AIC_SMR[AT91C_ID_SYS] = AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | DBGU_INTERRUPT_LEVEL;
	// Clear the interrupt on the interrupt controller
	AT91C_BASE_AIC->AIC_ICCR = 1 << AT91C_ID_SYS;
}

/*----------------------------------------------------------------------------
 * Function Name       : dbgu_char_available
 * Object              : This function is used to determine if a char is waiting on the
 *                       DBGU channel (Very low level debugging)
 *----------------------------------------------------------------------------*/
unsigned char dbgu_char_available(void) {
	return (AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_RXRDY) > 0;
}

/*----------------------------------------------------------------------------
 * Function Name       : dbgu_get_char
 * Object              : This function is used to get a char through the
 *                       DBGU channel (Very low level debugging)
 *----------------------------------------------------------------------------*/
unsigned char dbgu_get_char(void) {
	while (!(AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_RXRDY));
    return AT91C_BASE_DBGU->DBGU_RHR;
}

/*----------------------------------------------------------------------------
 * Function Name       : dbgu_print_ascii
 * Object              : This function is used to send a string through the
 *                       DBGU channel (Very low level debugging)
 *----------------------------------------------------------------------------*/
void dbgu_print_ascii(const char *buffer) {
    while (*buffer != '\0') {
        while (!(AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_TXRDY));
        AT91C_BASE_DBGU->DBGU_THR = (*buffer++ & 0x1FF);
    }
}

/*----------------------------------------------------------------------------
 * Function Name       : dbgu_print_char
 * Object              : This function is used to send a char through the
 *                       DBGU channel (Very low level debugging)
 *----------------------------------------------------------------------------*/
void dbgu_print_char(const unsigned char ch) {
	while (!(AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_TXRDY));
    AT91C_BASE_DBGU->DBGU_THR = (ch & 0x1FF);
}

/*----------------------------------------------------------------------------
 * Function Name       : dbgu_print_char_in_hex
 * Object              : This function is used to print a 8-bit value in hexa
 *----------------------------------------------------------------------------*/
void dbgu_print_char_in_hex(unsigned char value) {
    unsigned char c1, c2;
    c1 = (value & 0x0F); // LSB
    c2 = (value & 0xF0) >> 4; //MSB
    dbgu_print_ascii("0x"); // print the hex notation first
    dbgu_print_4bit_in_hex(c2); // print LSB
    dbgu_print_4bit_in_hex(c1); // print MSB
}

/*----------------------------------------------------------------------------
 * Function Name       : dbgu_print_4bit_in_hex
 * Object              : This function is used to print a 8-bit value in hexa
 *----------------------------------------------------------------------------*/
void dbgu_print_4bit_in_hex(unsigned char value) {
    unsigned char c;
    c = (value & 0x0F); // LSB
    while (!(AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_TXRDY));
    AT91C_BASE_DBGU->DBGU_THR = (c > 9 ?  0x137+c : 0x130+c);
}

/*----------------------------------------------------------------------------
 * Function Name       : dbgu_print_digit
 * Object              : This function is used to print a 32-bit value in hexa
 *----------------------------------------------------------------------------*/
void dbgu_print_digit(unsigned char value) {
    char c = 0;

    while (!(AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_TXRDY));
    c = (value & 0xF);
	AT91C_BASE_DBGU->DBGU_THR = (('0' + c) & 0x1FF);
}

/*----------------------------------------------------------------------------
 * Function Name       : dbgu_print_hex8
 * Object              : This function is used to print a 32-bit value in hexa
 *----------------------------------------------------------------------------*/
void dbgu_print_hex8(unsigned long value) {
    char c = 0;
    char shift = sizeof(unsigned long) * 8;

    dbgu_print_ascii("0x");
    do {
        shift -= 4;
        while (!(AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_TXRDY));
        c = ((value >> shift) & 0xF);
        if (c > 9)
	  AT91C_BASE_DBGU->DBGU_THR = (('A' + (c - 10)) & 0x1FF);
        else
	  AT91C_BASE_DBGU->DBGU_THR = (('0' + c) & 0x1FF);
    } while (shift != 0);
}

void dbgu_print_int(int zahl) {
	if (zahl <= 0) {
		dbgu_print_char('-');
		zahl = zahl * -1;
	}

	int mod = 10, durch = 1;
	long int temp;
	//Variablen der Längenerkenung
	int laenge = 0;

	//Ermittlung der anzahl der Stellen in der Variabl Bsp: 123 -> 3 Stellen
	do {
		laenge++;
		durch = durch * 10;
	} while (zahl / durch > 0);
	durch = 1; //Reset der "durch" Variable

	//Ausgabe der einzelnen Stellenwerte, von links nach rechts (Für USART oder der Gleichen)
	int i, j, modtemp, durchtemp;
	for (i = laenge; i > 0; i--) {
		modtemp = mod;
		durchtemp = durch;
		for (j = 1; j < i; j++) //Berechnen des Modulu und des Dividenden
		{
			modtemp *= 10;
			durchtemp *= 10;
		}
		temp = (zahl % modtemp) / durchtemp;
		dbgu_print_char(temp + 48); //Ausgabe
	}
}

void dbl2stri(char *outbfr, double dbl, unsigned dec_digits) {
   char *output = outbfr;

	//*******************************************
	//  extract negative info
	//*******************************************
	int negative = (dbl < 0.0) ? 1 : 0;
	if (negative) {
		*output++ = '-';
		dbl *= -1.0;
	}

	//**************************************************************************
	//  construct fractional multiplier for specified number of digits.
	//  Note that we draw one digit more than requested in order
	//  to handle last-digit rounding.
	//**************************************************************************
	unsigned int mult = 10;
	unsigned int idx;
	for (idx = 0; idx < dec_digits; idx++)
		mult *= 10;

	int wholeNum = (int) dbl;
	int decimalNum = (int) ((dbl - wholeNum) * mult);
	//  round off low digit
	decimalNum += 5;
	decimalNum /= 10;

	//*******************************************
	//  convert integer portion
	//*******************************************
	char tbfr[40];
	idx = 0;
	while (wholeNum != 0) {
		tbfr[idx++] = '0' + (wholeNum % 10);
		wholeNum /= 10;
	}
	if (idx == 0) {
		*output++ = '0';
	} else {
		while (idx > 0) {
			*output++ = tbfr[idx - 1];
			idx--;
		}
	}
	if (dec_digits > 0) {
		*output++ = '.';

		//*******************************************
		//  convert fractional portion
		//*******************************************
		idx = 0;
		while (decimalNum != 0) {
			tbfr[idx++] = '0' + (decimalNum % 10);
			decimalNum /= 10;
		}
		//  pad the decimal portion with 0s as necessary;
		//  We wouldn't want to report 3.093 as 3.93, would we??
		while (idx < dec_digits) {
			tbfr[idx++] = '0';
		}
		// printf("decimal=%s\n", tbfr) ;
		if (idx == 0) {
			*output++ = '0';
		} else {
			while (idx > 0) {
				*output++ = tbfr[idx - 1];
				idx--;
			}
		}
	}
	*output = 0;
}

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(const char *string, int width, int pad) {
	register int pc = 0, padchar = ' ';

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
			dbgu_print_char(padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
		dbgu_print_char(*string);
		++pc;
	}
	for ( ; width > 0; --width) {
		dbgu_print_char(padchar);
		++pc;
	}

	return pc;
}

// the following should be enough for 32 bit int
#define PRINT_BUF_LEN 12

static int printi(int i, int b, int sg, int width, int pad, int letbase) {
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints(print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			dbgu_print_char('-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
		}
	}

	return pc + prints(s, width, pad);
}

int dbgu_printf(const char *format, ...) {
    va_list args;

    va_start(args, format);

	int post_decimal;
	int width, pad;
	unsigned dec_width = 0;
	int pc = 0;
	char scr[2];
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0')
				break;
			if (*format == '%')
				goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			post_decimal = 0;
			if (*format == '.' || (*format >= '0' && *format <= '9')) {
				while (1) {
					if (*format == '.') {
						post_decimal = 1;
						dec_width = 0;
						format++;
					} else if ((*format >= '0' && *format <= '9')) {
						if (post_decimal) {
							dec_width *= 10;
							dec_width += *format - '0';
						} else {
							width *= 10;
							width += *format - '0';
						}
						format++;
					} else {
						break;
					}
				}
			}
			if (*format == 'l')
				++format;
			switch (*format) {
			case 's': {
				char *s = (char *)va_arg( args, int );
				// printf("[%s] w=%u\n", s, width) ;
				pc += prints(s ? s : "(null)", width, pad);
			}
				break;
			case 'd':
				pc += printi(va_arg( args, int ), 10, 1, width, pad, 'a');
				break;
			case 'x':
				pc += printi(va_arg( args, int ), 16, 0, width, pad, 'a');
				break;
			case 'X':
				pc += printi(va_arg( args, int ), 16, 0, width, pad, 'A');
				break;
			case 'u':
				pc += printi(va_arg( args, int ), 10, 0, width, pad, 'a');
				break;
			case 'c':
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints(scr, width, pad);
				break;
			case 'f': {
				double dbl = va_arg(args, double);
				char bfr[81];
				dbl2stri(bfr, dbl, dec_width);
				pc += prints(bfr, width, pad);
			}
				break;
			default:
				dbgu_print_char('%');
				dbgu_print_char(*format);
				break;
			}
		} else {
			out: dbgu_print_char(*format);
			++pc;
		}
	}
	return pc;
}

void DBGUIRQHandler(void) {
	unsigned int status;

	// get Usart status register
	status = AT91C_BASE_DBGU->DBGU_CSR;
	if ((status & AT91C_US_RXRDY)  && (AT91C_BASE_DBGU->DBGU_IMR & AT91C_US_RXRDY)) {
		if (dbgu_CharReceivedCallbackFnct != 0) {
			char ch = AT91C_BASE_DBGU->DBGU_RHR;
			dbgu_CharReceivedCallbackFnct(ch);
		}
	}
	if ((status & AT91C_US_TXRDY) && (AT91C_BASE_DBGU->DBGU_IMR & AT91C_US_TXRDY)) {
		if (dbgu_TxBufferEmptyCallbackFnct != 0) {
			unsigned char ret = dbgu_TxBufferEmptyCallbackFnct();
			if (ret == 0) {
				AT91C_BASE_DBGU->DBGU_IDR = AT91C_US_TXRDY; // Disable interrupt
			}
		}
	}
	// Reset the status bit
	AT91C_BASE_DBGU->DBGU_CR = AT91C_US_RSTSTA;
}

CharReceivedCallback dbgu_AssignCharReceivedCallback(CharReceivedCallback callback) {
	 CharReceivedCallback temp;

	 temp = dbgu_CharReceivedCallbackFnct;
	 dbgu_CharReceivedCallbackFnct = callback;
	 if (callback == 0) {
			AT91C_BASE_DBGU->DBGU_IDR = AT91C_US_RXRDY;
			if (dbgu_TxBufferEmptyCallbackFnct == 0) {
				AT91C_BASE_AIC->AIC_IDCR = 1 << AT91C_ID_SYS;
			}
	 } else {
			AT91C_BASE_DBGU->DBGU_IER = AT91C_US_RXRDY;
			AT91C_BASE_AIC->AIC_IECR = 1 << AT91C_ID_SYS;
	 }
	 return temp;
}

TxReadyCallback dbgu_AssignTxReadyCallback(TxReadyCallback callback) {
	 TxReadyCallback temp;

	 temp = dbgu_TxBufferEmptyCallbackFnct;
	 dbgu_TxBufferEmptyCallbackFnct = callback;
	 if (callback == 0) {
			AT91C_BASE_DBGU->DBGU_IDR = AT91C_US_TXRDY;
			if (dbgu_CharReceivedCallbackFnct == 0) { // Only disable interrupt when no other callbacks are set
				AT91C_BASE_AIC->AIC_IDCR = 1 << AT91C_ID_SYS;
			}
	 } else {
			AT91C_BASE_DBGU->DBGU_IER = AT91C_US_TXRDY;
			AT91C_BASE_AIC->AIC_IECR = 1 << AT91C_ID_SYS;
	 }
	 return temp;
}

void dbgu_enable_TxReadyCallback() {
	if (dbgu_TxBufferEmptyCallbackFnct != 0) {
		AT91C_BASE_DBGU->DBGU_IER = AT91C_US_TXRDY;
	}
}

#endif
