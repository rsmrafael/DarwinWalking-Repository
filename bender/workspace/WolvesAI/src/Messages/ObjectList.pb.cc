// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ObjectList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

void protobuf_ShutdownFile_ObjectList_2eproto() {
  delete ObjectList::default_instance_;
}

void protobuf_AddDesc_ObjectList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::protobuf_AddDesc_Object_2eproto();
  ObjectList::default_instance_ = new ObjectList();
  ObjectList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ObjectList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ObjectList_2eproto {
  StaticDescriptorInitializer_ObjectList_2eproto() {
    protobuf_AddDesc_ObjectList_2eproto();
  }
} static_descriptor_initializer_ObjectList_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ObjectList::kObjectFieldNumber;
#endif  // !_MSC_VER

ObjectList::ObjectList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ObjectList::InitAsDefaultInstance() {
}

ObjectList::ObjectList(const ObjectList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectList::~ObjectList() {
  SharedDtor();
}

void ObjectList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ObjectList& ObjectList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ObjectList_2eproto();  return *default_instance_;
}

ObjectList* ObjectList::default_instance_ = NULL;

ObjectList* ObjectList::New() const {
  return new ObjectList;
}

void ObjectList::Clear() {
  object_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ObjectList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.Object object = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_object;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.Object object = 1;
  for (int i = 0; i < this->object_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->object(i), output);
  }
  
}

int ObjectList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.Object object = 1;
  total_size += 1 * this->object_size();
  for (int i = 0; i < this->object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ObjectList*>(&from));
}

void ObjectList::MergeFrom(const ObjectList& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_.MergeFrom(from.object_);
}

void ObjectList::CopyFrom(const ObjectList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectList::IsInitialized() const {
  
  for (int i = 0; i < object_size(); i++) {
    if (!this->object(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectList::Swap(ObjectList* other) {
  if (other != this) {
    object_.Swap(&other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ObjectList::GetTypeName() const {
  return "protobuf.ObjectList";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
