# On command line:
#
# make = Make software.
#
# make clean = Clean out built project files.
#

# To make "Debug" the default configuration if invoked with just "make":
#ifeq ($(CFG),)
#CFG=Debug
#endif

# Toolchain prefix (i.e arm-elf -> arm-elf-gcc.exe)
ifneq ($(CFG),Debug_x86)
ifneq ($(CFG),Debug_x86_Windows)
TCHAIN = arm-elf-
endif
endif

# Uncomment below for receiving debug msgs
MY_CFLAGS=-DWITH_DBGU_MSGS
# MY_CFLAGS=

#FLASH_TOOL = UVISION
FLASH_TOOL =OPENOCD

#USE_THUMB_MODE = YES
USE_THUMB_MODE = NO

# MCU name, submodel and board
MCU      = arm7tdmi
SUBMDL   = AT91SAM7X256
BOARD    = OLIMEX_SAM7_EX256

## Create ROM-Image (final)
RUN_MODE=ROM_RUN
## Create RAM-Image (debugging)
#RUN_MODE=RAM_RUN

## Exception-Vector placement only supported for "ROM_RUN"
## (placement settings ignored when using "RAM_RUN")
## - Exception vectors in ROM:
VECTOR_LOCATION=VECTORS_IN_ROM
## - Exception vectors in RAM:
#VECTOR_LOCATION=VECTORS_IN_RAM


# Target file name (without extension).
TARGET = main

# List C source files here. (C dependencies are automatically generated.)
# use file-extension c for "c-only"-files
SRC  = $(TARGET).c
SRC += adc/adc.c
SRC += dbgu/dbgu.c
SRC += dbgu/dbgu_x86.c
SRC += uart/uart.c
SRC += uart/uart_win32.c
SRC += uart/network.c
SRC += kalman/kalman.c
SRC += imu/imu.c
SRC += movements/scenes.c
SRC += tc/tc.c
SRC += parser/parser.c
SRC += ui/ui.c
SRC += servo/servo.c
SRC += servo/servo_wck.c
SRC += servo/servo_dynamixel.c
SRC += servo_pwm/servo_pwm.c
SRC += include/Syscalls.c
SRC += include/Cstartup_SAM7.c
SRC += rbc/rbc.c
SRC += tests/imu.c
SRC += tests/walktuner.c
SRC += config/config.c
SRC += shell/shell.c
SRC += shell/shell_commands.c
SRC += kinematics/inverse.c
SRC += kinematics/inverse_calc.c
SRC += movements/kinematic_scenes.c
SRC += controller/controller.c
SRC += walker/walker.c
SRC += i2c/i2c.c
SRC += eeprom/eeprom.c
SRC += tests/motioneditor.c
SRC += bootloader/bootloader.c
SRC += usb/usb.c
SRC += usb/cdc_enumerate.c

# List C source files here which must be compiled in ARM-Mode.
# use file-extension c for "c-only"-files
SRCARM = 

# List C++ source files here.
# use file-extension cpp for C++-files (use extension .cpp)
CPPSRC = 

# List C++ source files here which must be compiled in ARM-Mode.
# use file-extension cpp for C++-files (use extension .cpp)
#CPPSRCARM = $(TARGET).cpp
CPPSRCARM = 

# List Assembler source files here.
# Make them always end in a capital .S.  Files ending in a lowercase .s
# will not be considered source files but generated files (assembler
# output from the compiler), and will be deleted upon "make clean"!
# Even though the DOS/Win* filesystem matches both .s and .S the same,
# it will preserve the spelling of the filenames, and gcc itself does
# care about how the name is spelled on its command-line.
ASRC = 

# List Assembler source files here which must be assembled in ARM-Mode..
ifneq ($(CFG),Debug_x86)
ifneq ($(CFG),Debug_x86_Windows)
ASRCARM = include/Cstartup.S
endif
endif

## Output format. (can be ihex or binary or both)
## (binary i.e. for openocd and SAM-BA, hex i.e. for lpc21isp and uVision)
#FORMAT = ihex
#FORMAT = binary
FORMAT = both

# Optimization level, can be [0, 1, 2, 3, s]. 
# 0 = turn off optimization. s = optimize for size.
# (Note: 3 is not always the best optimization level. See avr-libc FAQ.)
OPT = s
#OPT = 0

# Debugging format.
# Native formats for AVR-GCC's -g are stabs [default], or dwarf-2.
# AVR (extended) COFF requires stabs, plus an avr-objcopy run.
#DEBUG = stabs
DEBUG = dwarf-2

# List any extra directories to look for include files here.
#     Each directory must be seperated by a space.
EXTRAINCDIRS = 

# List any extra directories to look for library files here.
#     Each directory must be seperated by a space.
EXTRA_LIBDIRS = 

# Path to Linker-Scripts
LINKERSCRIPTPATH = ./include

## Using the Atmel AT91_lib produces warning with
## the default warning-levels. 
## yes - disable these warnings; no - keep default settings
AT91LIBNOWARN = yes

# Compiler flag to set the C Standard level.
# c89   - "ANSI" C
# gnu89 - c89 plus GCC extensions
# c99   - ISO C99 standard (not yet fully implemented)
# gnu99 - c99 plus GCC extensions
CSTANDARD =-std=gnu99

# Place -D or -U options for C here
CDEFS =  -D$(RUN_MODE) $(MY_CFLAGS)
ifeq ($(CFG),Debug_x86)
CDEFS += -DDEBUG_X86
endif
ifeq ($(CFG),Debug_x86_Windows)
CDEFS += -DDEBUG_X86
CDEFS += -DWIN32
endif

CDEFS += -DDYNAMIXEL

# Place -I options here
CINCS =

# Place -D or -U options for ASM here
ADEFS =  -D$(RUN_MODE) -D__ASSEMBLY__

ifdef VECTOR_LOCATION
CDEFS += -D$(VECTOR_LOCATION)
ADEFS += -D$(VECTOR_LOCATION)
endif

CDEFS += -D__WinARM__ -D__WINARMSUBMDL_$(SUBMDL)__ -D__WINARMBOARD_$(BOARD)__
ADEFS += -D__WinARM__ -D__WINARMSUBMDL_$(SUBMDL)__ -D__WINARMBOARD_$(BOARD)__

# Compiler flags.

ifeq ($(USE_THUMB_MODE),YES)
THUMB    = -mthumb
THUMB_IW = -mthumb-interwork
else 
THUMB    = 
THUMB_IW = 
endif

#  -g*:          generate debugging information
#  -O*:          optimization level
#  -f...:        tuning, see GCC manual and avr-libc documentation
#  -Wall...:     warning level
#  -Wa,...:      tell GCC to pass this to the assembler.
#    -adhlns...: create assembler listing
#
# Flags for C and C++ (arm-elf-gcc/arm-elf-g++)
CFLAGS = -g$(DEBUG)
CFLAGS += $(CDEFS) $(CINCS)
CFLAGS += -O$(OPT)
CFLAGS += -Wall -Wcast-align -Wimplicit 
CFLAGS += -Wpointer-arith -Wswitch
CFLAGS += -ffunction-sections -fdata-sections
CFLAGS += -Wredundant-decls -Wreturn-type -Wshadow -Wunused
CFLAGS += -Wa,-adhlns=$(subst $(suffix $@),.lst,$@) 
CFLAGS += $(patsubst %,-I%,$(EXTRAINCDIRS))

# flags only for C
CONLYFLAGS += -Wnested-externs 
CONLYFLAGS += $(CSTANDARD)

ifneq ($(AT91LIBNOWARN),yes)
#AT91-lib warnings with:
CFLAGS += -Wcast-qual
CONLYFLAGS += -Wmissing-prototypes 
CONLYFLAGS += -Wstrict-prototypes
CONLYFLAGS += -Wmissing-declarations
endif
CONLYFLAGS += -fgnu89-inline

# flags only for C++ (arm-elf-g++)
# CPPFLAGS = -fno-rtti -fno-exceptions
CPPFLAGS = 

# Assembler flags.
#  -Wa,...:    tell GCC to pass this to the assembler.
#  -ahlns:     create listing
#  -g$(DEBUG): have the assembler create line number information
ASFLAGS = $(ADEFS) -Wa,-adhlns=$(@:.o=.lst),-g$(DEBUG)
ASFLAGS += $(patsubst %,-I%,$(EXTRAINCDIRS))


#Additional libraries.

# Extra libraries
#    Each library-name must be seperated by a space.
#    To add libxyz.a, libabc.a and libefsl.a: 
#    EXTRA_LIBS = xyz abc efsl
#EXTRA_LIBS = efsl
#EXTRA_LIBS = STR71Xlibstd
#EXTRA_LIBS =
ifeq ($(CFG),Debug_x86)
EXTRA_LIBS += m
endif
ifeq ($(CFG),Debug_x86_Windows)
EXTRA_LIBS += ws2_32
endif

#Support for newlibc-lpc (file: libnewlibc-lpc.a)
#NEWLIBLPC = -lnewlib-lpc

MATH_LIB = -lm

# CPLUSPLUS_LIB = -lstdc++

ifneq ($(CFG),Debug_x86)
ifneq ($(CFG),Debug_x86_Windows)
CFLAGS += -mcpu=$(MCU) $(THUMB_IW)
ASFLAGS += -mcpu=$(MCU) $(THUMB_IW)
endif
endif

# Linker flags.
#  -Wl,...:     tell GCC to pass this to linker.
#    -Map:      create map file
#    --cref:    add cross reference to  map file
LDFLAGS =
ifneq ($(CFG),Debug_x86)
ifneq ($(CFG),Debug_x86_Windows) 
LDFLAGS += -nostartfiles -Wl,-Map=$(CFG)/$(TARGET).map,--cref,--gc-sections
LDFLAGS += -lc 
LDFLAGS += $(NEWLIBLPC) $(MATH_LIB)
LDFLAGS += -lgcc -lstdc++ 
LDFLAGS += $(CPLUSPLUS_LIB)
endif
endif
LDFLAGS += $(patsubst %,-L%,$(EXTRA_LIBDIRS))
LDFLAGS += $(patsubst %,-l%,$(EXTRA_LIBS))

# Set Linker-Script Depending On Selected Memory and Controller
ifneq ($(CFG),Debug_x86)
ifneq ($(CFG),Debug_x86_Windows) 
ifeq ($(RUN_MODE),RAM_RUN)
LDFLAGS +=-T$(LINKERSCRIPTPATH)/$(SUBMDL)-RAM.ld
else 
LDFLAGS +=-T$(LINKERSCRIPTPATH)/$(SUBMDL)-ROM.ld
endif
endif
endif

# ---------------------------------------------------------------------------
# Flash-Programming support using lpc21isp by Martin Maurer 
# only for Philips LPC and Analog ADuC ARMs
#
# Settings and variables:
#LPC21ISP = lpc21isp
LPC21ISP = lpc21isp
LPC21ISP_PORT = com1
LPC21ISP_BAUD = 38400
LPC21ISP_XTAL = 12000
# other options:
# * verbose output: -debug
# * enter bootloader via RS232 DTR/RTS (only if hardware supports this
#   feature - see Philips AppNote): -control
LPC21ISP_OPTIONS = -control
#LPC21ISP_OPTIONS += -debug
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Flash-Programming support using OpenOCD 
OOCD_EXE = C:/programme/openocd/bin/openocd-ftd2xx.exe
# Set if OpenOCD verbose logging is needed
#OOCD_DBG = -d 3
OOCD_CFG_DBG = sam7_dbg.cfg
OOCD_CFG_FLASH = sam7_flash.cfg
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Flash-Programming support using Keil uVision 
UV_EXE = C:/Keil/uv3/Uv3.exe
# ---------------------------------------------------------------------------


# Define directories, if needed.
## DIRARM = c:/WinARM/
## DIRARMBIN = $(DIRAVR)/bin/
## DIRAVRUTILS = $(DIRAVR)/utils/bin/

# Define programs and commands.
SHELL = sh
CC = $(TCHAIN)gcc
CPP = $(TCHAIN)g++
AR = $(TCHAIN)ar
OBJCOPY = $(TCHAIN)objcopy
OBJDUMP = $(TCHAIN)objdump
SIZE = $(TCHAIN)size
NM = $(TCHAIN)nm
REMOVE = rm -f
REMOVEDIR = rm -f -r
COPY = cp

# Define Messages
# English
MSG_ERRORS_NONE = Errors: none
MSG_BEGIN = "-------- begin (mode: $(RUN_MODE)) --------"
MSG_END = --------  end  --------
MSG_SIZE_BEFORE = Size before: 
MSG_SIZE_AFTER = Size after:
MSG_FLASH = Creating load file for Flash:
MSG_EXTENDED_LISTING = Creating Extended Listing:
MSG_SYMBOL_TABLE = Creating Symbol Table:
MSG_LINKING = Linking:
MSG_COMPILING = Compiling C:
MSG_COMPILING_ARM = "Compiling C (ARM-only):"
MSG_COMPILINGCPP = Compiling C++:
MSG_COMPILINGCPP_ARM = "Compiling C++ (ARM-only):"
MSG_ASSEMBLING = Assembling:
MSG_ASSEMBLING_ARM = "Assembling (ARM-only):"
MSG_CLEANING = Cleaning project:
MSG_FORMATERROR = Can not handle output-format
MSG_LPC21_RESETREMINDER = You may have to bring the target in bootloader-mode now.

# Define all object files.
COBJ      = $(addprefix $(CFG)/,$(SRC:.c=.o))
AOBJ      = $(addprefix $(CFG)/,$(ASRC:.S=.o))
COBJARM   = $(addprefix $(CFG)/,$(SRCARM:.c=.o))
AOBJARM   = $(addprefix $(CFG)/,$(ASRCARM:.S=.o))
CPPOBJ    = $(addprefix $(CFG)/,$(CPPSRC:.cpp=.o))
CPPOBJARM = $(addprefix $(CFG)/,$(CPPSRCARM:.cpp=.o))

# Define all listing files.
LST = $(AOBJ:.o=.lst) $(AOBJARM:.o=.lst) $(COBJ:.o=.lst) $(COBJARM:.o=.lst)
LST += $(CPPOBJ:.o=.lst) $(CPPOBJARM:.o=.lst)

# Compiler flags to generate dependency files.
### GENDEPFLAGS = -Wp,-M,-MP,-MT,$(*F).o,-MF,$@.d
GENDEPFLAGS = -MD -MP -MF $@.d

# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS  = -I. $(CFLAGS) $(GENDEPFLAGS)
ALL_ASFLAGS = -I. -x assembler-with-cpp $(ASFLAGS)

# Default target.
all: inform begin gccversion sizebefore build sizeafter finished end

inform:
ifneq ($(CFG),Debug)
ifneq ($(CFG),Debug_x86)
ifneq ($(CFG),Debug_x86_Windows)
	@echo "Invalid configuration "$(CFG)" specified."
	@echo "You must specify a configuration when running make, e.g."
	@echo  "make CFG=Debug"
	@echo  
	@echo  "Possible choices for configuration are 'Debug', 'Debug_x86' and 'Debug_x86_Windows'"
	@exit 1
endif
endif
endif
	@echo "Selected configuration: "$(CFG)
	@echo "------------------------"

ifneq ($(CFG),Debug_x86_Windows)
ifeq ($(FORMAT),ihex)
build: elf hex sym # lss
hex: $(CFG)/$(TARGET).hex
IMGEXT=hex
else 
ifeq ($(FORMAT),binary)
build: elf bin sym # lss
bin: $(CFG)/$(TARGET).bin
IMGEXT=bin
else 
ifeq ($(FORMAT),both)
build: elf hex bin sym # lss
hex: $(CFG)/$(TARGET).hex
bin: $(CFG)/$(TARGET).bin
else 
$(error "$(MSG_FORMATERROR) $(FORMAT)")
endif
endif
endif
endif
ifeq ($(CFG),Debug_x86_Windows)
build: elf exe sym # lss
exe: $(CFG)/$(TARGET).exe
endif

elf: $(CFG)/$(TARGET).elf
lss: $(CFG)/$(TARGET).lss 
sym: $(CFG)/$(TARGET).sym

# Eye candy.
begin: | inform
	@echo
	@echo $(MSG_BEGIN)
	@mkdir -p "$(CFG)"

finished: | inform
	@echo $(MSG_ERRORS_NONE)

end: | inform
	@echo $(MSG_END)
	@echo


# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) $(CFG)/$(TARGET).hex
ELFSIZE = $(SIZE) -A $(CFG)/$(TARGET).elf
sizebefore:
	@if [ -f $(CFG)/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(ELFSIZE); echo; fi

sizeafter:
	@if [ -f $(CFG)/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_AFTER); $(ELFSIZE); echo; fi


# Display compiler version information.
gccversion : | inform
	@$(CC) --version

# Program the device.
ifeq ($(FLASH_TOOL),UVISION)
# Program the device with Keil's uVision (needs configured uVision-Workspace). 
program: inform $(CFG)/$(TARGET).hex
	@echo
	@echo "Programming with uVision"
	$(UV_EXE) -f uvisionflash.Uv2 # -ouvisionflash.txt
else
ifeq ($(FLASH_TOOL),OPENOCD)
# Program the device with Dominic Rath's OPENOCD in "batch-mode", needs cfg and "reset-script".
program: inform $(CFG)/$(TARGET).bin
	@echo
	@echo "Programming with OpenOCD"
#	openocd_flash_go.cmd
	$(OOCD_EXE) $(OOCD_DBG) -f $(OOCD_CFG_FLASH)
else
# Program the device.  - lpc21isp will not work for SAM7
program: inform $(CFG)/$(TARGET).hex
	@echo
	@echo $(MSG_LPC21_RESETREMINDER)
	$(LPC21ISP) $(LPC21ISP_OPTIONS) $(LPC21ISP_FLASHFILE) $(LPC21ISP_PORT) $(LPC21ISP_BAUD) $(LPC21ISP_XTAL)
endif
endif


# Create final output file (.hex) from ELF output file.
%.hex: %.elf | inform
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O ihex $< $@
	
# Create final output file (.bin) from ELF output file.
%.bin: %.elf | inform
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O binary $< $@

	# Create final output file (.bin) from ELF output file.
%.exe: %.elf | inform
	@echo
	@echo $(MSG_FLASH) $@
	$(COPY) $< $@


# Create extended listing file from ELF output file.
# testing: option -C
%.lss: %.elf
	@echo
	@echo $(MSG_EXTENDED_LISTING) $@
	$(OBJDUMP) -h -S -C $< > $@


# Create a symbol table from ELF output file.
%.sym: %.elf
	@echo
	@echo $(MSG_SYMBOL_TABLE) $@
	$(NM) -n $< > $@


# Link: create ELF output file from object files.
.SECONDARY : $(CFG)/$(TARGET).elf
.PRECIOUS : $(AOBJARM) $(AOBJ) $(COBJARM) $(COBJ) $(CPPOBJ) $(CPPOBJARM)
%.elf:  $(AOBJARM) $(AOBJ) $(COBJARM) $(COBJ) $(CPPOBJ) $(CPPOBJARM)
	@echo
	@echo $(MSG_LINKING) $@
	$(CC) $(THUMB) $(ALL_CFLAGS) $(AOBJARM) $(AOBJ) $(COBJARM) $(COBJ) $(CPPOBJ) $(CPPOBJARM) --output $@ $(LDFLAGS)
#	$(CPP) $(THUMB) $(ALL_CFLAGS) $(AOBJARM) $(AOBJ) $(COBJARM) $(COBJ) $(CPPOBJ) $(CPPOBJARM) --output $@ $(LDFLAGS)

# Compile: create object files from C source files. ARM/Thumb
$(COBJ) : $(CFG)/%.o: %.c
	@echo
	@echo $(MSG_COMPILING) $<
	@test -d "$(CFG)" || mkdir -pm 775 "$(CFG)"
	@test -d $(@D) || mkdir -pm 775 $(@D)
	$(CC) -c $(THUMB) $(ALL_CFLAGS) $(CONLYFLAGS) $< -o $@ 

# Compile: create object files from C source files. ARM-only
$(COBJARM) : $(CFG)/%.o : %.c
	@echo
	@echo $(MSG_COMPILING_ARM) $<
	@test -d "$(CFG)" || mkdir -pm 775 "$(CFG)"
	@test -d $(@D) || mkdir -pm 775 $(@D)
	$(CC) -c $(ALL_CFLAGS) $(CONLYFLAGS) $< -o $@ 

# Compile: create object files from C++ source files. ARM/Thumb
$(CPPOBJ) : $(CFG)/%.o: %.cpp
	@echo
	@echo $(MSG_COMPILINGCPP) $<
	@test -d "$(CFG)" || mkdir -pm 775 "$(CFG)"
	@test -d $(@D) || mkdir -pm 775 $(@D)
	$(CPP) -c $(THUMB) $(ALL_CFLAGS) $(CPPFLAGS) $< -o $@ 

# Compile: create object files from C++ source files. ARM-only
$(CPPOBJARM) : $(CFG)/%.o : %.cpp
	@echo
	@echo $(MSG_COMPILINGCPP_ARM) $<
	@test -d "$(CFG)" || mkdir -pm 775 "$(CFG)"
	@test -d $(@D) || mkdir -pm 775 $(@D)
	$(CPP) -c $(ALL_CFLAGS) $(CPPFLAGS) $< -o $@ 


# Compile: create assembler files from C source files. ARM/Thumb
## does not work - TODO - hints welcome
##$(COBJ) : %.s : %.c
##	$(CC) $(THUMB) -S $(ALL_CFLAGS) $< -o $@


# Assemble: create object files from assembler source files. ARM/Thumb
$(AOBJ) :  $(CFG)/%.o: %.S
	@echo
	@echo $(MSG_ASSEMBLING) $<
	@test -d "$(CFG)" || mkdir -pm 775 "$(CFG)"
	@test -d $(@D) || mkdir -pm 775 $(@D)
	$(CC) -c $(THUMB) $(ALL_ASFLAGS) $< -o $@


# Assemble: create object files from assembler source files. ARM-only
$(AOBJARM) : $(CFG)/%.o : %.S
	@echo
	@echo $(MSG_ASSEMBLING_ARM) $<
	@test -d "$(CFG)" || mkdir -pm 775 "$(CFG)"
	@test -d $(@D) || mkdir -pm 775 $(@D)
	$(CC) -c $(ALL_ASFLAGS) $< -o $@


# Target: clean project.
clean: inform begin clean_list finished end


clean_list : | inform
	@echo
	@echo $(MSG_CLEANING)
	$(REMOVE) $(CFG)/$(TARGET).hex
	$(REMOVE) $(CFG)/$(TARGET).bin
	$(REMOVE) $(CFG)/$(TARGET).obj
	$(REMOVE) $(CFG)/$(TARGET).elf
	$(REMOVE) $(CFG)/$(TARGET).map
	$(REMOVE) $(CFG)/$(TARGET).obj
	$(REMOVE) $(CFG)/$(TARGET).a90
	$(REMOVE) $(CFG)/$(TARGET).sym
	$(REMOVE) $(CFG)/$(TARGET).lnk
	$(REMOVE) $(CFG)/$(TARGET).lss
	$(REMOVE) $(COBJ)
	$(REMOVE) $(CPPOBJ)
	$(REMOVE) $(AOBJ)
	$(REMOVE) $(COBJARM)
	$(REMOVE) $(CPPOBJARM)
	$(REMOVE) $(AOBJARM)
	$(REMOVE) $(LST)
	$(REMOVE) $(COBJ:.o=.s)
	$(REMOVE) $(COBJ:.o=.o.d)
	$(REMOVE) $(COBJARM:.o=.s)
	$(REMOVE) $(COBJARM:.o=.o.d)
	$(REMOVE) $(CPPOBJ:.o=.s) 
	$(REMOVE) $(CPPOBJ:.o=.o.d)
	$(REMOVE) $(CPPOBJARM:.o=.s) 
	$(REMOVE) $(CPPOBJARM:.o=.o.d)
	$(REMOVEDIR) $(CFG)/* | exit 0

# Debug the device with Dominic Rath's OPENOCD
debug: inform $(CFG)/$(TARGET).bin
	@echo
	@echo "Debugging with OpenOCD"
	$(OOCD_EXE) $(OOCD_DBG) -f $(OOCD_CFG_DBG)

# Include the dependency files.
ifneq ($(MAKECMDGOALS),clean)
-include $(shell mkdir "$(CFG)" 2>/dev/null) $(shell find $(CFG) -name *.o.d -print)
endif


# Listing of phony targets.
.PHONY : all begin finish end sizebefore sizeafter gccversion \
build elf hex bin lss sym clean clean_list program debug

