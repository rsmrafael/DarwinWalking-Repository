// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServoStatus.proto

#ifndef PROTOBUF_ServoStatus_2eproto__INCLUDED
#define PROTOBUF_ServoStatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServoStatus_2eproto();
void protobuf_AssignDesc_ServoStatus_2eproto();
void protobuf_ShutdownFile_ServoStatus_2eproto();

class ServoStatus;

// ===================================================================

class ServoStatus : public ::google::protobuf::MessageLite {
 public:
  ServoStatus();
  virtual ~ServoStatus();
  
  ServoStatus(const ServoStatus& from);
  
  inline ServoStatus& operator=(const ServoStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const ServoStatus& default_instance();
  
  void Swap(ServoStatus* other);
  
  // implements Message ----------------------------------------------
  
  ServoStatus* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServoStatus& from);
  void MergeFrom(const ServoStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional double positionError = 2;
  inline bool has_positionerror() const;
  inline void clear_positionerror();
  static const int kPositionErrorFieldNumber = 2;
  inline double positionerror() const;
  inline void set_positionerror(double value);
  
  // optional double temperatur = 3;
  inline bool has_temperatur() const;
  inline void clear_temperatur();
  static const int kTemperaturFieldNumber = 3;
  inline double temperatur() const;
  inline void set_temperatur(double value);
  
  // optional double voltage = 4;
  inline bool has_voltage() const;
  inline void clear_voltage();
  static const int kVoltageFieldNumber = 4;
  inline double voltage() const;
  inline void set_voltage(double value);
  
  // @@protoc_insertion_point(class_scope:protobuf.ServoStatus)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_positionerror();
  inline void clear_has_positionerror();
  inline void set_has_temperatur();
  inline void clear_has_temperatur();
  inline void set_has_voltage();
  inline void clear_has_voltage();
  
  double positionerror_;
  double temperatur_;
  double voltage_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ServoStatus_2eproto();
  friend void protobuf_AssignDesc_ServoStatus_2eproto();
  friend void protobuf_ShutdownFile_ServoStatus_2eproto();
  
  void InitAsDefaultInstance();
  static ServoStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// ServoStatus

// required int32 id = 1;
inline bool ServoStatus::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServoStatus::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServoStatus::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServoStatus::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ServoStatus::id() const {
  return id_;
}
inline void ServoStatus::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional double positionError = 2;
inline bool ServoStatus::has_positionerror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServoStatus::set_has_positionerror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServoStatus::clear_has_positionerror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServoStatus::clear_positionerror() {
  positionerror_ = 0;
  clear_has_positionerror();
}
inline double ServoStatus::positionerror() const {
  return positionerror_;
}
inline void ServoStatus::set_positionerror(double value) {
  set_has_positionerror();
  positionerror_ = value;
}

// optional double temperatur = 3;
inline bool ServoStatus::has_temperatur() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServoStatus::set_has_temperatur() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServoStatus::clear_has_temperatur() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServoStatus::clear_temperatur() {
  temperatur_ = 0;
  clear_has_temperatur();
}
inline double ServoStatus::temperatur() const {
  return temperatur_;
}
inline void ServoStatus::set_temperatur(double value) {
  set_has_temperatur();
  temperatur_ = value;
}

// optional double voltage = 4;
inline bool ServoStatus::has_voltage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServoStatus::set_has_voltage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServoStatus::clear_has_voltage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServoStatus::clear_voltage() {
  voltage_ = 0;
  clear_has_voltage();
}
inline double ServoStatus::voltage() const {
  return voltage_;
}
inline void ServoStatus::set_voltage(double value) {
  set_has_voltage();
  voltage_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServoStatus_2eproto__INCLUDED
