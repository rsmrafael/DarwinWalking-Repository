/*
 * BodyAction.cpp
 *
 *  Created on: 26.11.2012
 *      Author: Stefan Krupop
 */

#include "BodyAction.h"
#include "../Config.h"
#include "../Messages/BodyAction.pb.h"
#include "../Messages/OstreamOutputStream.h"
#include "../Messages/IstreamInputStream.h"

BodyAction::BodyAction() {
	mWalkerX = 0;
	mWalkerY = 0;
	mWalkerR = 0;
	mWalkerTurningAim = false;
	mMotion = ICommunicator::Stop;
	mPan = 0;
	mTilt = 0;
	mErrorX = 0;
	mErrorY = 0;
	mDisablePanError = false;
	mWithError = false;
	mWalkerCommand = false;
	mPanTiltSetDirect = true;

	mBall.x = 0;
	mBall.y = 0;
	mBall.z = 0;
	mTarget.x = 0;
	mTarget.y = 0;
	mTarget.z = 0;
	mKicktype = 0;

	mPanTiltChangeID = 0;
	mMovementChangeID = 0;
}

BodyAction::~BodyAction() {
}

void BodyAction::setWalkerCommand(int16_t x, int16_t y, int16_t r) {
	setWalkerCommand(x, y, r, false);
}

void BodyAction::setWalkerCommand(int16_t x, int16_t y, int16_t r, bool turningAim) {
	if (x > 100) {
		x = 100;
	} else if (x < -100) {
		x = -100;
	}
	if (y > 100) {
		y = 100;
	} else if (y < -100) {
		y = -100;
	}
	if (r > 100) {
		r = 100;
	} else if (r < -100) {
		r = -100;
	}

	mWalkerX = (int8_t)x;
	mWalkerY = (int8_t)y;
	mWalkerR = (int8_t)r;
	mWalkerTurningAim = turningAim;
	mWalkerCommand = true;
	mMovementChangeID++;
}

void BodyAction::Stop() {
	mMotion = ICommunicator::Stop;
	mWalkerCommand = false;
	mMovementChangeID++;
}

void BodyAction::KickLeft() {
	mMotion = ICommunicator::KickLeft;
	mWalkerCommand = false;
	mMovementChangeID++;
}

void BodyAction::KickRight() {
	mMotion = ICommunicator::KickRight;
	mWalkerCommand = false;
	mMovementChangeID++;
}

void BodyAction::KickBall(const vect3d_t& ball) {
	mMotion = ICommunicator::KickBall;
	mBall = ball;
	mWalkerCommand = false;
	mMovementChangeID++;
}

void BodyAction::KickToTarget(const vect3d_t& ball, const vect3d_t& target) {
	mMotion = ICommunicator::KickToTarget;
	mBall = ball;
	mTarget = target;
	mWalkerCommand = false;
	mMovementChangeID++;
}

void BodyAction::KickAdvanced(const vect3d_t& ball, const vect3d_t& target, uint8_t kicktype) {
	mMotion = ICommunicator::KickAdvanced;
	mBall = ball;
	mTarget = target;
	mKicktype = kicktype;
	mWalkerCommand = false;
	mMovementChangeID++;
}

void BodyAction::CancelKick() {
	mMotion = ICommunicator::CancelKick;
	mWalkerCommand = false;
	mMovementChangeID++;
}

void BodyAction::GoaliMoveLeft() {
	mMotion = ICommunicator::GoaliMoveLeft;
	mWalkerCommand = false;
	mMovementChangeID++;
}

void BodyAction::GoaliMoveRight() {
	mMotion = ICommunicator::GoaliMoveRight;
	mWalkerCommand = false;
	mMovementChangeID++;
}

void BodyAction::PlayMotion( enum ICommunicator::Motion motion) {
	mMotion = motion;
	mWalkerCommand = false;
	mMovementChangeID++;
}

void BodyAction::setPanTilt(int PanDeg, int TiltDeg) {
	mPan = PanDeg;
	mTilt = TiltDeg;
	mPanTiltSetDirect = true;
	mPanTiltChangeID++;
}

void BodyAction::PanTiltTracking(bool disablePan) {
	mErrorX = 0;
	mErrorY = 0;
	mDisablePanError = disablePan;
	mWithError = false;
	mPanTiltSetDirect = false;
	mPanTiltChangeID++;
}

void BodyAction::PanTiltTracking(double errorX, double errorY, bool disablePan) {
	mErrorX = errorX;
	mErrorY = errorY;
	mDisablePanError = disablePan;
	mWithError = true;
	mPanTiltSetDirect = false;
	mPanTiltChangeID++;
}

void Serializer<BodyAction>::serialize(const BodyAction& representation, ostream& stream) {
	protobuf::BodyAction action;

	action.set_walkercommand(representation.getIsWalkerCommand());
	action.set_walkerx(representation.getWalkerX());
	action.set_walkery(representation.getWalkerY());
	action.set_walkerr(representation.getWalkerR());
	action.set_walkerturningaim(representation.getWalkerTurningAim());
	action.set_motion((protobuf::BodyAction_StaticMotion)representation.getMotion());

	OstreamOutputStream buf(&stream);
	action.SerializeToZeroCopyStream(&buf);
}

void Serializer<BodyAction>::deserialize(istream& stream, BodyAction& representation) {
	protobuf::BodyAction action;

	IstreamInputStream buf(&stream);
	action.ParseFromZeroCopyStream(&buf);

	if (action.walkercommand()) {
		representation.setWalkerCommand((int16_t)action.walkerx(), (int16_t)action.walkery(), (int16_t)action.walkerr(), action.walkerturningaim());
	}

}
void BodyAction::CircleRight(){
	int16_t x = (int16_t)Config::GetInt("Body", "circleRightX", -40);
	int16_t y = (int16_t)Config::GetInt("Body", "circleRightY", 50);
	int16_t r = (int16_t)Config::GetInt("Body", "circleRightR", 70);
	bool turningAim = Config::GetBoolean("Body", "circleRightTurningAim", false);
	setWalkerCommand(x, y, r, turningAim);
	Debugger::INFO("Body", "Circling right...");
}
void BodyAction::CircleLeft(){
	int16_t x = (int16_t)Config::GetInt("Body", "circleLeftX", -40);
	int16_t y = (int16_t)Config::GetInt("Body", "circleLeftY", -70);//Bot4: -65
	int16_t r = (int16_t)Config::GetInt("Body", "circleLeftR", -50);
	bool turningAim = Config::GetBoolean("Body", "circleLeftTurningAim", false);
	setWalkerCommand(x, y, r, turningAim);
	Debugger::INFO("Body", "Circling left...");
}
