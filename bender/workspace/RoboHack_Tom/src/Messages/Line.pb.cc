// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Line.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

void protobuf_ShutdownFile_Line_2eproto() {
  delete Line::default_instance_;
}

void protobuf_AddDesc_Line_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::protobuf_AddDesc_Point_2eproto();
  Line::default_instance_ = new Line();
  Line::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Line_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Line_2eproto {
  StaticDescriptorInitializer_Line_2eproto() {
    protobuf_AddDesc_Line_2eproto();
  }
} static_descriptor_initializer_Line_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Line::kStartPointFieldNumber;
const int Line::kEndPointFieldNumber;
#endif  // !_MSC_VER

Line::Line()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Line::InitAsDefaultInstance() {
  startpoint_ = const_cast< ::protobuf::Point*>(&::protobuf::Point::default_instance());
  endpoint_ = const_cast< ::protobuf::Point*>(&::protobuf::Point::default_instance());
}

Line::Line(const Line& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Line::SharedCtor() {
  _cached_size_ = 0;
  startpoint_ = NULL;
  endpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Line::~Line() {
  SharedDtor();
}

void Line::SharedDtor() {
  if (this != default_instance_) {
    delete startpoint_;
    delete endpoint_;
  }
}

void Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Line& Line::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Line_2eproto();  return *default_instance_;
}

Line* Line::default_instance_ = NULL;

Line* Line::New() const {
  return new Line;
}

void Line::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_startpoint()) {
      if (startpoint_ != NULL) startpoint_->::protobuf::Point::Clear();
    }
    if (has_endpoint()) {
      if (endpoint_ != NULL) endpoint_->::protobuf::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.Point startPoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endPoint;
        break;
      }
      
      // required .protobuf.Point endPoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.Point startPoint = 1;
  if (has_startpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->startpoint(), output);
  }
  
  // required .protobuf.Point endPoint = 2;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->endpoint(), output);
  }
  
}

int Line::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.Point startPoint = 1;
    if (has_startpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startpoint());
    }
    
    // required .protobuf.Point endPoint = 2;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Line::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Line*>(&from));
}

void Line::MergeFrom(const Line& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startpoint()) {
      mutable_startpoint()->::protobuf::Point::MergeFrom(from.startpoint());
    }
    if (from.has_endpoint()) {
      mutable_endpoint()->::protobuf::Point::MergeFrom(from.endpoint());
    }
  }
}

void Line::CopyFrom(const Line& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_startpoint()) {
    if (!this->startpoint().IsInitialized()) return false;
  }
  if (has_endpoint()) {
    if (!this->endpoint().IsInitialized()) return false;
  }
  return true;
}

void Line::Swap(Line* other) {
  if (other != this) {
    std::swap(startpoint_, other->startpoint_);
    std::swap(endpoint_, other->endpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Line::GetTypeName() const {
  return "protobuf.Line";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
