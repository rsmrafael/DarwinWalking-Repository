// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServoStatus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

void protobuf_ShutdownFile_ServoStatus_2eproto() {
  delete ServoStatus::default_instance_;
}

void protobuf_AddDesc_ServoStatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ServoStatus::default_instance_ = new ServoStatus();
  ServoStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServoStatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServoStatus_2eproto {
  StaticDescriptorInitializer_ServoStatus_2eproto() {
    protobuf_AddDesc_ServoStatus_2eproto();
  }
} static_descriptor_initializer_ServoStatus_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ServoStatus::kIdFieldNumber;
const int ServoStatus::kPositionErrorFieldNumber;
const int ServoStatus::kTemperaturFieldNumber;
const int ServoStatus::kVoltageFieldNumber;
#endif  // !_MSC_VER

ServoStatus::ServoStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ServoStatus::InitAsDefaultInstance() {
}

ServoStatus::ServoStatus(const ServoStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ServoStatus::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  positionerror_ = 0;
  temperatur_ = 0;
  voltage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServoStatus::~ServoStatus() {
  SharedDtor();
}

void ServoStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServoStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServoStatus& ServoStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServoStatus_2eproto();  return *default_instance_;
}

ServoStatus* ServoStatus::default_instance_ = NULL;

ServoStatus* ServoStatus::New() const {
  return new ServoStatus;
}

void ServoStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    positionerror_ = 0;
    temperatur_ = 0;
    voltage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ServoStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_positionError;
        break;
      }
      
      // optional double positionError = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_positionError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionerror_)));
          set_has_positionerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_temperatur;
        break;
      }
      
      // optional double temperatur = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_temperatur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperatur_)));
          set_has_temperatur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_voltage;
        break;
      }
      
      // optional double voltage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voltage_)));
          set_has_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServoStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional double positionError = 2;
  if (has_positionerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->positionerror(), output);
  }
  
  // optional double temperatur = 3;
  if (has_temperatur()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->temperatur(), output);
  }
  
  // optional double voltage = 4;
  if (has_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->voltage(), output);
  }
  
}

int ServoStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional double positionError = 2;
    if (has_positionerror()) {
      total_size += 1 + 8;
    }
    
    // optional double temperatur = 3;
    if (has_temperatur()) {
      total_size += 1 + 8;
    }
    
    // optional double voltage = 4;
    if (has_voltage()) {
      total_size += 1 + 8;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServoStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServoStatus*>(&from));
}

void ServoStatus::MergeFrom(const ServoStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_positionerror()) {
      set_positionerror(from.positionerror());
    }
    if (from.has_temperatur()) {
      set_temperatur(from.temperatur());
    }
    if (from.has_voltage()) {
      set_voltage(from.voltage());
    }
  }
}

void ServoStatus::CopyFrom(const ServoStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ServoStatus::Swap(ServoStatus* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(positionerror_, other->positionerror_);
    std::swap(temperatur_, other->temperatur_);
    std::swap(voltage_, other->voltage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServoStatus::GetTypeName() const {
  return "protobuf.ServoStatus";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
