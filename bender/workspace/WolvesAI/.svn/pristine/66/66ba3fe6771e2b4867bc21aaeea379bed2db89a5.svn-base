#ifndef NETWORK_H_
#define NETWORK_H_

#include <stdint.h>
#include <string>

#ifdef WIN32
  #include <winsock2.h>
  typedef int socklen_t;
#else
  #include <arpa/inet.h>
  #include <sys/socket.h>
  #include <netinet/in.h>
  #include <unistd.h>
  #include <sys/types.h>
  #include <sys/ioctl.h>
  #include <net/if.h>
  #include <net/if_arp.h>
  #include <netdb.h>
  typedef int SOCKET;
  #define SOCKET_ERROR -1
  #define INVALID_SOCKET -1
#endif

class Network {
public:
  Network(uint32_t address, uint16_t port, uint32_t sourceAddress, uint16_t sourcePort);
  Network(uint32_t address, uint16_t port, uint32_t sourceAddress);
  Network(uint32_t address, uint16_t port);
  Network(uint32_t address, uint16_t port, bool TCPMode);
  ~Network();

  bool sendData(const char* data, size_t length);
  size_t receiveData(char* data, size_t maxLength);
  size_t receiveData(char* data, size_t maxLength, struct timeval* timeout, uint32_t *addr, uint16_t *port);
  uint32_t getLocalIP();
  uint32_t getRemoteIP();
  uint32_t getInterfaceIP() const;
  void setRemoteIP(uint32_t address);
  static void printIP(uint32_t ip);
  static uint32_t resolveHost(std::string host);
  uint8_t isConnected() const;

private:
  void construct(uint32_t address, uint16_t port, uint32_t sourceAddress, uint16_t sourcePort, bool TCPMode);
  static void initWinsocks();

  SOCKET mSocket;
  struct sockaddr_in mSource;
  struct sockaddr_in mDestination;

  static uint32_t mInstanceCounter;
};

#endif /*NETWORK_H_*/
